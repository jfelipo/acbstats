/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var GN=Object.create;var i_=Object.defineProperty;var HN=Object.getOwnPropertyDescriptor;var XN=Object.getOwnPropertyNames;var ZN=Object.getPrototypeOf,KN=Object.prototype.hasOwnProperty;var _f=(e,t)=>()=>(t||e((t={exports:{}}).exports,t),t.exports),Ua=(e,t)=>{for(var n in t)i_(e,n,{get:t[n],enumerable:!0})},QN=(e,t,n,r)=>{if(t&&typeof t=="object"||typeof t=="function")for(let i of XN(t))!KN.call(e,i)&&i!==n&&i_(e,i,{get:()=>t[i],enumerable:!(r=HN(t,i))||r.enumerable});return e};var jp=(e,t,n)=>(n=e!=null?GN(ZN(e)):{},QN(t||!e||!e.__esModule?i_(n,"default",{value:e,enumerable:!0}):n,e));var UT=_f((aY,Wp)=>{var bT,_T,xT,wT,vT,ST,TT,IT,ET,Yp,o_,MT,AT,FT,ec,kT,NT,OT,CT,BT,DT,LT,RT,PT,qp;(function(e){var t=typeof global=="object"?global:typeof self=="object"?self:typeof this=="object"?this:{};typeof define=="function"&&define.amd?define("tslib",["exports"],function(r){e(n(t,n(r)))}):typeof Wp=="object"&&typeof Wp.exports=="object"?e(n(t,n(Wp.exports))):e(n(t));function n(r,i){return r!==t&&(typeof Object.create=="function"?Object.defineProperty(r,"__esModule",{value:!0}):r.__esModule=!0),function(o,s){return r[o]=i?i(o,s):s}}})(function(e){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(r,i){r.__proto__=i}||function(r,i){for(var o in i)Object.prototype.hasOwnProperty.call(i,o)&&(r[o]=i[o])};bT=function(r,i){if(typeof i!="function"&&i!==null)throw new TypeError("Class extends value "+String(i)+" is not a constructor or null");t(r,i);function o(){this.constructor=r}r.prototype=i===null?Object.create(i):(o.prototype=i.prototype,new o)},_T=Object.assign||function(r){for(var i,o=1,s=arguments.length;o<s;o++){i=arguments[o];for(var a in i)Object.prototype.hasOwnProperty.call(i,a)&&(r[a]=i[a])}return r},xT=function(r,i){var o={};for(var s in r)Object.prototype.hasOwnProperty.call(r,s)&&i.indexOf(s)<0&&(o[s]=r[s]);if(r!=null&&typeof Object.getOwnPropertySymbols=="function")for(var a=0,s=Object.getOwnPropertySymbols(r);a<s.length;a++)i.indexOf(s[a])<0&&Object.prototype.propertyIsEnumerable.call(r,s[a])&&(o[s[a]]=r[s[a]]);return o},wT=function(r,i,o,s){var a=arguments.length,l=a<3?i:s===null?s=Object.getOwnPropertyDescriptor(i,o):s,c;if(typeof Reflect=="object"&&typeof Reflect.decorate=="function")l=Reflect.decorate(r,i,o,s);else for(var u=r.length-1;u>=0;u--)(c=r[u])&&(l=(a<3?c(l):a>3?c(i,o,l):c(i,o))||l);return a>3&&l&&Object.defineProperty(i,o,l),l},vT=function(r,i){return function(o,s){i(o,s,r)}},ST=function(r,i){if(typeof Reflect=="object"&&typeof Reflect.metadata=="function")return Reflect.metadata(r,i)},TT=function(r,i,o,s){function a(l){return l instanceof o?l:new o(function(c){c(l)})}return new(o||(o=Promise))(function(l,c){function u(h){try{f(s.next(h))}catch(p){c(p)}}function d(h){try{f(s.throw(h))}catch(p){c(p)}}function f(h){h.done?l(h.value):a(h.value).then(u,d)}f((s=s.apply(r,i||[])).next())})},IT=function(r,i){var o={label:0,sent:function(){if(l[0]&1)throw l[1];return l[1]},trys:[],ops:[]},s,a,l,c;return c={next:u(0),throw:u(1),return:u(2)},typeof Symbol=="function"&&(c[Symbol.iterator]=function(){return this}),c;function u(f){return function(h){return d([f,h])}}function d(f){if(s)throw new TypeError("Generator is already executing.");for(;o;)try{if(s=1,a&&(l=f[0]&2?a.return:f[0]?a.throw||((l=a.return)&&l.call(a),0):a.next)&&!(l=l.call(a,f[1])).done)return l;switch(a=0,l&&(f=[f[0]&2,l.value]),f[0]){case 0:case 1:l=f;break;case 4:return o.label++,{value:f[1],done:!1};case 5:o.label++,a=f[1],f=[0];continue;case 7:f=o.ops.pop(),o.trys.pop();continue;default:if(l=o.trys,!(l=l.length>0&&l[l.length-1])&&(f[0]===6||f[0]===2)){o=0;continue}if(f[0]===3&&(!l||f[1]>l[0]&&f[1]<l[3])){o.label=f[1];break}if(f[0]===6&&o.label<l[1]){o.label=l[1],l=f;break}if(l&&o.label<l[2]){o.label=l[2],o.ops.push(f);break}l[2]&&o.ops.pop(),o.trys.pop();continue}f=i.call(r,o)}catch(h){f=[6,h],a=0}finally{s=l=0}if(f[0]&5)throw f[1];return{value:f[0]?f[1]:void 0,done:!0}}},ET=function(r,i){for(var o in r)o!=="default"&&!Object.prototype.hasOwnProperty.call(i,o)&&qp(i,r,o)},qp=Object.create?function(r,i,o,s){s===void 0&&(s=o);var a=Object.getOwnPropertyDescriptor(i,o);(!a||("get"in a?!i.__esModule:a.writable||a.configurable))&&(a={enumerable:!0,get:function(){return i[o]}}),Object.defineProperty(r,s,a)}:function(r,i,o,s){s===void 0&&(s=o),r[s]=i[o]},Yp=function(r){var i=typeof Symbol=="function"&&Symbol.iterator,o=i&&r[i],s=0;if(o)return o.call(r);if(r&&typeof r.length=="number")return{next:function(){return r&&s>=r.length&&(r=void 0),{value:r&&r[s++],done:!r}}};throw new TypeError(i?"Object is not iterable.":"Symbol.iterator is not defined.")},o_=function(r,i){var o=typeof Symbol=="function"&&r[Symbol.iterator];if(!o)return r;var s=o.call(r),a,l=[],c;try{for(;(i===void 0||i-- >0)&&!(a=s.next()).done;)l.push(a.value)}catch(u){c={error:u}}finally{try{a&&!a.done&&(o=s.return)&&o.call(s)}finally{if(c)throw c.error}}return l},MT=function(){for(var r=[],i=0;i<arguments.length;i++)r=r.concat(o_(arguments[i]));return r},AT=function(){for(var r=0,i=0,o=arguments.length;i<o;i++)r+=arguments[i].length;for(var s=Array(r),a=0,i=0;i<o;i++)for(var l=arguments[i],c=0,u=l.length;c<u;c++,a++)s[a]=l[c];return s},FT=function(r,i,o){if(o||arguments.length===2)for(var s=0,a=i.length,l;s<a;s++)(l||!(s in i))&&(l||(l=Array.prototype.slice.call(i,0,s)),l[s]=i[s]);return r.concat(l||Array.prototype.slice.call(i))},ec=function(r){return this instanceof ec?(this.v=r,this):new ec(r)},kT=function(r,i,o){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var s=o.apply(r,i||[]),a,l=[];return a={},c("next"),c("throw"),c("return"),a[Symbol.asyncIterator]=function(){return this},a;function c(m){s[m]&&(a[m]=function(g){return new Promise(function(b,y){l.push([m,g,b,y])>1||u(m,g)})})}function u(m,g){try{d(s[m](g))}catch(b){p(l[0][3],b)}}function d(m){m.value instanceof ec?Promise.resolve(m.value.v).then(f,h):p(l[0][2],m)}function f(m){u("next",m)}function h(m){u("throw",m)}function p(m,g){m(g),l.shift(),l.length&&u(l[0][0],l[0][1])}},NT=function(r){var i,o;return i={},s("next"),s("throw",function(a){throw a}),s("return"),i[Symbol.iterator]=function(){return this},i;function s(a,l){i[a]=r[a]?function(c){return(o=!o)?{value:ec(r[a](c)),done:a==="return"}:l?l(c):c}:l}},OT=function(r){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var i=r[Symbol.asyncIterator],o;return i?i.call(r):(r=typeof Yp=="function"?Yp(r):r[Symbol.iterator](),o={},s("next"),s("throw"),s("return"),o[Symbol.asyncIterator]=function(){return this},o);function s(l){o[l]=r[l]&&function(c){return new Promise(function(u,d){c=r[l](c),a(u,d,c.done,c.value)})}}function a(l,c,u,d){Promise.resolve(d).then(function(f){l({value:f,done:u})},c)}},CT=function(r,i){return Object.defineProperty?Object.defineProperty(r,"raw",{value:i}):r.raw=i,r};var n=Object.create?function(r,i){Object.defineProperty(r,"default",{enumerable:!0,value:i})}:function(r,i){r.default=i};BT=function(r){if(r&&r.__esModule)return r;var i={};if(r!=null)for(var o in r)o!=="default"&&Object.prototype.hasOwnProperty.call(r,o)&&qp(i,r,o);return n(i,r),i},DT=function(r){return r&&r.__esModule?r:{default:r}},LT=function(r,i,o,s){if(o==="a"&&!s)throw new TypeError("Private accessor was defined without a getter");if(typeof i=="function"?r!==i||!s:!i.has(r))throw new TypeError("Cannot read private member from an object whose class did not declare it");return o==="m"?s:o==="a"?s.call(r):s?s.value:i.get(r)},RT=function(r,i,o,s,a){if(s==="m")throw new TypeError("Private method is not writable");if(s==="a"&&!a)throw new TypeError("Private accessor was defined without a setter");if(typeof i=="function"?r!==i||!a:!i.has(r))throw new TypeError("Cannot write private member to an object whose class did not declare it");return s==="a"?a.call(r,o):a?a.value=o:i.set(r,o),o},PT=function(r,i){if(i===null||typeof i!="object"&&typeof i!="function")throw new TypeError("Cannot use 'in' operator on non-object");return typeof r=="function"?i===r:r.has(i)},e("__extends",bT),e("__assign",_T),e("__rest",xT),e("__decorate",wT),e("__param",vT),e("__metadata",ST),e("__awaiter",TT),e("__generator",IT),e("__exportStar",ET),e("__createBinding",qp),e("__values",Yp),e("__read",o_),e("__spread",MT),e("__spreadArrays",AT),e("__spreadArray",FT),e("__await",ec),e("__asyncGenerator",kT),e("__asyncDelegator",NT),e("__asyncValues",OT),e("__makeTemplateObject",CT),e("__importStar",BT),e("__importDefault",DT),e("__classPrivateFieldGet",LT),e("__classPrivateFieldSet",RT),e("__classPrivateFieldIn",PT)})});var Ok=_f((kAt,Nk)=>{"use strict";function ej(e,t,n,r,i){for(var o=i+1;r<=i;){var s=r+i>>>1,a=e[s],l=n!==void 0?n(a,t):a-t;l>=0?(o=s,i=s-1):r=s+1}return o}function nj(e,t,n,r,i){for(var o=i+1;r<=i;){var s=r+i>>>1,a=e[s],l=n!==void 0?n(a,t):a-t;l>0?(o=s,i=s-1):r=s+1}return o}function rj(e,t,n,r,i){for(var o=r-1;r<=i;){var s=r+i>>>1,a=e[s],l=n!==void 0?n(a,t):a-t;l<0?(o=s,r=s+1):i=s-1}return o}function ij(e,t,n,r,i){for(var o=r-1;r<=i;){var s=r+i>>>1,a=e[s],l=n!==void 0?n(a,t):a-t;l<=0?(o=s,r=s+1):i=s-1}return o}function oj(e,t,n,r,i){for(;r<=i;){var o=r+i>>>1,s=e[o],a=n!==void 0?n(s,t):s-t;if(a===0)return o;a<=0?r=o+1:i=o-1}return-1}function Bp(e,t,n,r,i,o){return typeof n=="function"?o(e,t,n,r===void 0?0:r|0,i===void 0?e.length-1:i|0):o(e,t,void 0,n===void 0?0:n|0,r===void 0?e.length-1:r|0)}Nk.exports={ge:function(e,t,n,r,i){return Bp(e,t,n,r,i,ej)},gt:function(e,t,n,r,i){return Bp(e,t,n,r,i,nj)},lt:function(e,t,n,r,i){return Bp(e,t,n,r,i,rj)},le:function(e,t,n,r,i){return Bp(e,t,n,r,i,ij)},eq:function(e,t,n,r,i){return Bp(e,t,n,r,i,oj)}}});var $k=_f((NAt,Uk)=>{"use strict";var V1=Ok(),ff=0,Ql=1,z1=2;Uk.exports=aj;function ZS(e,t,n,r,i){this.mid=e,this.left=t,this.right=n,this.leftPoints=r,this.rightPoints=i,this.count=(t?t.count:0)+(n?n.count:0)+r.length}var Dp=ZS.prototype;function HS(e,t){e.mid=t.mid,e.left=t.left,e.right=t.right,e.leftPoints=t.leftPoints,e.rightPoints=t.rightPoints,e.count=t.count}function Dk(e,t){var n=df(t);e.mid=n.mid,e.left=n.left,e.right=n.right,e.leftPoints=n.leftPoints,e.rightPoints=n.rightPoints,e.count=n.count}function Ck(e,t){var n=e.intervals([]);n.push(t),Dk(e,n)}function Bk(e,t){var n=e.intervals([]),r=n.indexOf(t);return r<0?ff:(n.splice(r,1),Dk(e,n),Ql)}Dp.intervals=function(e){return e.push.apply(e,this.leftPoints),this.left&&this.left.intervals(e),this.right&&this.right.intervals(e),e};Dp.insert=function(e){var t=this.count-this.leftPoints.length;if(this.count+=1,e[1]<this.mid)this.left?4*(this.left.count+1)>3*(t+1)?Ck(this,e):this.left.insert(e):this.left=df([e]);else if(e[0]>this.mid)this.right?4*(this.right.count+1)>3*(t+1)?Ck(this,e):this.right.insert(e):this.right=df([e]);else{var n=V1.ge(this.leftPoints,e,KS),r=V1.ge(this.rightPoints,e,QS);this.leftPoints.splice(n,0,e),this.rightPoints.splice(r,0,e)}};Dp.remove=function(e){var t=this.count-this.leftPoints;if(e[1]<this.mid){if(!this.left)return ff;var n=this.right?this.right.count:0;if(4*n>3*(t-1))return Bk(this,e);var r=this.left.remove(e);return r===z1?(this.left=null,this.count-=1,Ql):(r===Ql&&(this.count-=1),r)}else if(e[0]>this.mid){if(!this.right)return ff;var i=this.left?this.left.count:0;if(4*i>3*(t-1))return Bk(this,e);var r=this.right.remove(e);return r===z1?(this.right=null,this.count-=1,Ql):(r===Ql&&(this.count-=1),r)}else{if(this.count===1)return this.leftPoints[0]===e?z1:ff;if(this.leftPoints.length===1&&this.leftPoints[0]===e){if(this.left&&this.right){for(var o=this,s=this.left;s.right;)o=s,s=s.right;if(o===this)s.right=this.right;else{var a=this.left,r=this.right;o.count-=s.count,o.right=s.left,s.left=a,s.right=r}HS(this,s),this.count=(this.left?this.left.count:0)+(this.right?this.right.count:0)+this.leftPoints.length}else this.left?HS(this,this.left):HS(this,this.right);return Ql}for(var a=V1.ge(this.leftPoints,e,KS);a<this.leftPoints.length&&this.leftPoints[a][0]===e[0];++a)if(this.leftPoints[a]===e){this.count-=1,this.leftPoints.splice(a,1);for(var r=V1.ge(this.rightPoints,e,QS);r<this.rightPoints.length&&this.rightPoints[r][1]===e[1];++r)if(this.rightPoints[r]===e)return this.rightPoints.splice(r,1),Ql}return ff}};function Lk(e,t,n){for(var r=0;r<e.length&&e[r][0]<=t;++r){var i=n(e[r]);if(i)return i}}function Rk(e,t,n){for(var r=e.length-1;r>=0&&e[r][1]>=t;--r){var i=n(e[r]);if(i)return i}}function Pk(e,t){for(var n=0;n<e.length;++n){var r=t(e[n]);if(r)return r}}Dp.queryPoint=function(e,t){if(e<this.mid){if(this.left){var n=this.left.queryPoint(e,t);if(n)return n}return Lk(this.leftPoints,e,t)}else if(e>this.mid){if(this.right){var n=this.right.queryPoint(e,t);if(n)return n}return Rk(this.rightPoints,e,t)}else return Pk(this.leftPoints,t)};Dp.queryInterval=function(e,t,n){if(e<this.mid&&this.left){var r=this.left.queryInterval(e,t,n);if(r)return r}if(t>this.mid&&this.right){var r=this.right.queryInterval(e,t,n);if(r)return r}return t<this.mid?Lk(this.leftPoints,t,n):e>this.mid?Rk(this.rightPoints,e,n):Pk(this.leftPoints,n)};function sj(e,t){return e-t}function KS(e,t){var n=e[0]-t[0];return n||e[1]-t[1]}function QS(e,t){var n=e[1]-t[1];return n||e[0]-t[0]}function df(e){if(e.length===0)return null;for(var t=[],n=0;n<e.length;++n)t.push(e[n][0],e[n][1]);t.sort(sj);for(var r=t[t.length>>1],i=[],o=[],s=[],n=0;n<e.length;++n){var a=e[n];a[1]<r?i.push(a):r<a[0]?o.push(a):s.push(a)}var l=s,c=s.slice();return l.sort(KS),c.sort(QS),new ZS(r,df(i),df(o),l,c)}function XS(e){this.root=e}var hf=XS.prototype;hf.insert=function(e){this.root?this.root.insert(e):this.root=new ZS(e[0],null,null,[e],[e])};hf.remove=function(e){if(this.root){var t=this.root.remove(e);return t===z1&&(this.root=null),t!==ff}return!1};hf.queryPoint=function(e,t){if(this.root)return this.root.queryPoint(e,t)};hf.queryInterval=function(e,t,n){if(e<=t&&this.root)return this.root.queryInterval(e,t,n)};Object.defineProperty(hf,"count",{get:function(){return this.root?this.root.count:0}});Object.defineProperty(hf,"intervals",{get:function(){return this.root?this.root.intervals([]):[]}});function aj(e){return!e||e.length===0?new XS(null):new XS(df(e))}});var iN=_f(mf=>{"use strict";Object.defineProperty(mf,"__esModule",{value:!0});mf.bytesToBase64=nN;mf.base64ToBytes=rN;mf.base64encode=Mj;mf.base64decode=Aj;var Ms=["A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","0","1","2","3","4","5","6","7","8","9","+","/"],eN=[255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,62,255,255,255,63,52,53,54,55,56,57,58,59,60,61,255,255,255,0,255,255,255,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,255,255,255,255,255,255,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51];function q1(e){if(e>=eN.length)throw new Error("Unable to parse base64 string.");var t=eN[e];if(t===255)throw new Error("Unable to parse base64 string.");return t}function nN(e){var t="",n,r=e.length;for(n=2;n<r;n+=3)t+=Ms[e[n-2]>>2],t+=Ms[(e[n-2]&3)<<4|e[n-1]>>4],t+=Ms[(e[n-1]&15)<<2|e[n]>>6],t+=Ms[e[n]&63];return n===r+1&&(t+=Ms[e[n-2]>>2],t+=Ms[(e[n-2]&3)<<4],t+="=="),n===r&&(t+=Ms[e[n-2]>>2],t+=Ms[(e[n-2]&3)<<4|e[n-1]>>4],t+=Ms[(e[n-1]&15)<<2],t+="="),t}function rN(e){if(e.length%4!==0)throw new Error("Unable to parse base64 string.");var t=e.indexOf("=");if(t!==-1&&t<e.length-2)throw new Error("Unable to parse base64 string.");for(var n=e.endsWith("==")?2:e.endsWith("=")?1:0,r=e.length,i=new Uint8Array(3*(r/4)),o,s=0,a=0;s<r;s+=4,a+=3)o=q1(e.charCodeAt(s))<<18|q1(e.charCodeAt(s+1))<<12|q1(e.charCodeAt(s+2))<<6|q1(e.charCodeAt(s+3)),i[a]=o>>16,i[a+1]=o>>8&255,i[a+2]=o&255;return i.subarray(0,i.length-n)}function Mj(e){var t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:new TextEncoder;return nN(t.encode(e))}function Aj(e){var t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:new TextDecoder;return t.decode(rN(e))}});var aN=_f((z4t,sN)=>{function oN(e,t){let n=window.getComputedStyle(e);for(let r of n)t.style[r]=n[r];for(let r=0;r<e.children.length;r++)oN(e.children[r],t.children[r])}function Fj({source:e,target:t,scale:n,format:r,quality:i}){let o=new XMLSerializer().serializeToString(t),s=document.createElement("canvas"),a=e.getBoundingClientRect();s.width=a.width*n,s.height=a.height*n,s.style.width=a.width,s.style.height=a.height;let l=s.getContext("2d");l.scale(n,n);let c=document.createElement("img");return c.setAttribute("src","data:image/svg+xml;base64,"+btoa(unescape(encodeURIComponent(o)))),new Promise(u=>{c.onload=()=>{l.drawImage(c,0,0),u(s.toDataURL(`image/${r==="jpg"?"jpeg":r}`,i))}})}function kj({file:e,name:t,format:n}){let r=document.createElement("a");r.download=`${t}.${n}`,r.href=e,document.body.appendChild(r),r.click(),document.body.removeChild(r)}sN.exports=async function(e,t,{scale:n=1,format:r="png",quality:i=.92,download:o=!0,ignore:s=null,cssinline:a=1,background:l=null}={}){e=e instanceof Element?e:document.querySelector(e);let c=document.createElementNS("http://www.w3.org/2000/svg","svg");c.innerHTML=e.innerHTML;for(let d of e.attributes)c.setAttribute(d.name,d.value);if(a===1&&oN(e,c),l&&(c.style.background=l),s!=null){let d=c.querySelector(s);d.parentNode.removeChild(d)}let u=await Fj({source:e,target:c,scale:n,format:r,quality:i});return o&&kj({file:u,name:t,format:r}),u}});var $T=jp(UT(),1),{__extends:lY,__assign:cY,__rest:zT,__decorate:uY,__param:fY,__metadata:dY,__awaiter:q,__generator:hY,__exportStar:pY,__createBinding:mY,__values:yY,__read:gY,__spread:bY,__spreadArrays:_Y,__spreadArray:xY,__await:Nt,__asyncGenerator:hr,__asyncDelegator:nc,__asyncValues:zr,__makeTemplateObject:wY,__importStar:vY,__importDefault:SY,__classPrivateFieldGet:TY,__classPrivateFieldSet:IY,__classPrivateFieldIn:EY}=$T.default;var f_={};Ua(f_,{compareArrayLike:()=>u_,joinUint8Arrays:()=>Mr,memcpy:()=>ic,rebaseValueOffsets:()=>Sf,toArrayBufferView:()=>Ot,toArrayBufferViewAsyncIterator:()=>li,toArrayBufferViewIterator:()=>Bi,toBigInt64Array:()=>oO,toBigUint64Array:()=>lO,toFloat32Array:()=>cO,toFloat32ArrayAsyncIterator:()=>IO,toFloat32ArrayIterator:()=>gO,toFloat64Array:()=>uO,toFloat64ArrayAsyncIterator:()=>EO,toFloat64ArrayIterator:()=>bO,toInt16Array:()=>iO,toInt16ArrayAsyncIterator:()=>wO,toInt16ArrayIterator:()=>hO,toInt32Array:()=>$a,toInt32ArrayAsyncIterator:()=>vO,toInt32ArrayIterator:()=>pO,toInt8Array:()=>rO,toInt8ArrayAsyncIterator:()=>xO,toInt8ArrayIterator:()=>dO,toUint16Array:()=>sO,toUint16ArrayAsyncIterator:()=>SO,toUint16ArrayIterator:()=>mO,toUint32Array:()=>aO,toUint32ArrayAsyncIterator:()=>TO,toUint32ArrayIterator:()=>yO,toUint8Array:()=>xt,toUint8ArrayAsyncIterator:()=>c_,toUint8ArrayIterator:()=>l_,toUint8ClampedArray:()=>fO,toUint8ClampedArrayAsyncIterator:()=>MO,toUint8ClampedArrayIterator:()=>_O});var JN=new TextDecoder("utf-8"),xf=e=>JN.decode(e),tO=new TextEncoder,Ns=e=>tO.encode(e);var[FY,Gp]=(()=>{let e=()=>{throw new Error("BigInt is not available in this environment")};function t(){throw e()}return t.asIntN=()=>{throw e()},t.asUintN=()=>{throw e()},typeof BigInt<"u"?[BigInt,!0]:[t,!1]})(),[wf,kY]=(()=>{let e=()=>{throw new Error("BigInt64Array is not available in this environment")};class t{static get BYTES_PER_ELEMENT(){return 8}static of(){throw e()}static from(){throw e()}constructor(){throw e()}}return typeof BigInt64Array<"u"?[BigInt64Array,!0]:[t,!1]})(),[rc,NY]=(()=>{let e=()=>{throw new Error("BigUint64Array is not available in this environment")};class t{static get BYTES_PER_ELEMENT(){return 8}static of(){throw e()}static from(){throw e()}constructor(){throw e()}}return typeof BigUint64Array<"u"?[BigUint64Array,!0]:[t,!1]})();var eO=e=>typeof e=="number",VT=e=>typeof e=="boolean",Ze=e=>typeof e=="function",qn=e=>e!=null&&Object(e)===e,si=e=>qn(e)&&Ze(e.then);var ai=e=>qn(e)&&Ze(e[Symbol.iterator]),Vr=e=>qn(e)&&Ze(e[Symbol.asyncIterator]),Hp=e=>qn(e)&&qn(e.schema);var Xp=e=>qn(e)&&"done"in e&&"value"in e;var Zp=e=>qn(e)&&Ze(e.stat)&&eO(e.fd);var Kp=e=>qn(e)&&vf(e.body),Qp=e=>"_getDOMStream"in e&&"_getNodeStream"in e,jT=e=>qn(e)&&Ze(e.abort)&&Ze(e.getWriter)&&!Qp(e),vf=e=>qn(e)&&Ze(e.cancel)&&Ze(e.getReader)&&!Qp(e),YT=e=>qn(e)&&Ze(e.end)&&Ze(e.write)&&VT(e.writable)&&!Qp(e),Jp=e=>qn(e)&&Ze(e.read)&&Ze(e.pipe)&&VT(e.readable)&&!Qp(e),qT=e=>qn(e)&&Ze(e.clear)&&Ze(e.bytes)&&Ze(e.position)&&Ze(e.setPosition)&&Ze(e.capacity)&&Ze(e.getBufferIdentifier)&&Ze(e.createLong);var a_=typeof SharedArrayBuffer<"u"?SharedArrayBuffer:ArrayBuffer;function nO(e){let t=e[0]?[e[0]]:[],n,r,i,o;for(let s,a,l=0,c=0,u=e.length;++l<u;){if(s=t[c],a=e[l],!s||!a||s.buffer!==a.buffer||a.byteOffset<s.byteOffset){a&&(t[++c]=a);continue}if({byteOffset:n,byteLength:i}=s,{byteOffset:r,byteLength:o}=a,n+i<r||r+o<n){a&&(t[++c]=a);continue}t[c]=new Uint8Array(s.buffer,n,r-n+o)}return t}function ic(e,t,n=0,r=t.byteLength){let i=e.byteLength,o=new Uint8Array(e.buffer,e.byteOffset,i),s=new Uint8Array(t.buffer,t.byteOffset,Math.min(r,i));return o.set(s,n),e}function Mr(e,t){let n=nO(e),r=n.reduce((u,d)=>u+d.byteLength,0),i,o,s,a=0,l=-1,c=Math.min(t||Number.POSITIVE_INFINITY,r);for(let u=n.length;++l<u;){if(i=n[l],o=i.subarray(0,Math.min(i.length,c-a)),c<=a+o.length){o.length<i.length?n[l]=i.subarray(o.length):o.length===i.length&&l++,s?ic(s,o,a):s=o;break}ic(s||(s=new Uint8Array(c)),o,a),a+=o.length}return[s||new Uint8Array(0),n.slice(l),r-(s?s.byteLength:0)]}function Ot(e,t){let n=Xp(t)?t.value:t;return n instanceof e?e===Uint8Array?new e(n.buffer,n.byteOffset,n.byteLength):n:n?(typeof n=="string"&&(n=Ns(n)),n instanceof ArrayBuffer?new e(n):n instanceof a_?new e(n):qT(n)?Ot(e,n.bytes()):ArrayBuffer.isView(n)?n.byteLength<=0?new e(0):new e(n.buffer,n.byteOffset,n.byteLength/e.BYTES_PER_ELEMENT):e.from(n)):new e(0)}var rO=e=>Ot(Int8Array,e),iO=e=>Ot(Int16Array,e),$a=e=>Ot(Int32Array,e),oO=e=>Ot(wf,e),xt=e=>Ot(Uint8Array,e),sO=e=>Ot(Uint16Array,e),aO=e=>Ot(Uint32Array,e),lO=e=>Ot(rc,e),cO=e=>Ot(Float32Array,e),uO=e=>Ot(Float64Array,e),fO=e=>Ot(Uint8ClampedArray,e),s_=e=>(e.next(),e);function*Bi(e,t){let n=function*(i){yield i},r=typeof t=="string"||ArrayBuffer.isView(t)||t instanceof ArrayBuffer||t instanceof a_?n(t):ai(t)?t:n(t);return yield*s_(function*(i){let o=null;do o=i.next(yield Ot(e,o));while(!o.done)}(r[Symbol.iterator]())),new e}var dO=e=>Bi(Int8Array,e),hO=e=>Bi(Int16Array,e),pO=e=>Bi(Int32Array,e),l_=e=>Bi(Uint8Array,e),mO=e=>Bi(Uint16Array,e),yO=e=>Bi(Uint32Array,e),gO=e=>Bi(Float32Array,e),bO=e=>Bi(Float64Array,e),_O=e=>Bi(Uint8ClampedArray,e);function li(e,t){return hr(this,arguments,function*(){if(si(t))return yield Nt(yield Nt(yield*nc(zr(li(e,yield Nt(t))))));let r=function(s){return hr(this,arguments,function*(){yield yield Nt(yield Nt(s))})},i=function(s){return hr(this,arguments,function*(){yield Nt(yield*nc(zr(s_(function*(a){let l=null;do l=a.next(yield l?.value);while(!l.done)}(s[Symbol.iterator]())))))})},o=typeof t=="string"||ArrayBuffer.isView(t)||t instanceof ArrayBuffer||t instanceof a_?r(t):ai(t)?i(t):Vr(t)?t:r(t);return yield Nt(yield*nc(zr(s_(function(s){return hr(this,arguments,function*(){let a=null;do a=yield Nt(s.next(yield yield Nt(Ot(e,a))));while(!a.done)})}(o[Symbol.asyncIterator]()))))),yield Nt(new e)})}var xO=e=>li(Int8Array,e),wO=e=>li(Int16Array,e),vO=e=>li(Int32Array,e),c_=e=>li(Uint8Array,e),SO=e=>li(Uint16Array,e),TO=e=>li(Uint32Array,e),IO=e=>li(Float32Array,e),EO=e=>li(Float64Array,e),MO=e=>li(Uint8ClampedArray,e);function Sf(e,t,n){if(e!==0){n=n.slice(0,t+1);for(let r=-1;++r<=t;)n[r]+=e}return n}function u_(e,t){let n=0,r=e.length;if(r!==t.length)return!1;if(r>0)do if(e[n]!==t[n])return!1;while(++n<r);return!0}var _n={fromIterable(e){return tm(AO(e))},fromAsyncIterable(e){return tm(FO(e))},fromDOMStream(e){return tm(kO(e))},fromNodeStream(e){return tm(NO(e))},toDOMStream(e,t){throw new Error('"toDOMStream" not available in this environment')},toNodeStream(e,t){throw new Error('"toNodeStream" not available in this environment')}},tm=e=>(e.next(),e);function*AO(e){let t,n=!1,r=[],i,o,s,a=0;function l(){return o==="peek"?Mr(r,s)[0]:([i,r,a]=Mr(r,s),i)}({cmd:o,size:s}=yield null);let c=l_(e)[Symbol.iterator]();try{do if({done:t,value:i}=Number.isNaN(s-a)?c.next():c.next(s-a),!t&&i.byteLength>0&&(r.push(i),a+=i.byteLength),t||s<=a)do({cmd:o,size:s}=yield l());while(s<a);while(!t)}catch(u){(n=!0)&&typeof c.throw=="function"&&c.throw(u)}finally{n===!1&&typeof c.return=="function"&&c.return(null)}return null}function FO(e){return hr(this,arguments,function*(){let n,r=!1,i=[],o,s,a,l=0;function c(){return s==="peek"?Mr(i,a)[0]:([o,i,l]=Mr(i,a),o)}({cmd:s,size:a}=yield yield Nt(null));let u=c_(e)[Symbol.asyncIterator]();try{do if({done:n,value:o}=Number.isNaN(a-l)?yield Nt(u.next()):yield Nt(u.next(a-l)),!n&&o.byteLength>0&&(i.push(o),l+=o.byteLength),n||a<=l)do({cmd:s,size:a}=yield yield Nt(c()));while(a<l);while(!n)}catch(d){(r=!0)&&typeof u.throw=="function"&&(yield Nt(u.throw(d)))}finally{r===!1&&typeof u.return=="function"&&(yield Nt(u.return(new Uint8Array(0))))}return yield Nt(null)})}function kO(e){return hr(this,arguments,function*(){let n=!1,r=!1,i=[],o,s,a,l=0;function c(){return s==="peek"?Mr(i,a)[0]:([o,i,l]=Mr(i,a),o)}({cmd:s,size:a}=yield yield Nt(null));let u=new h_(e);try{do if({done:n,value:o}=Number.isNaN(a-l)?yield Nt(u.read()):yield Nt(u.read(a-l)),!n&&o.byteLength>0&&(i.push(xt(o)),l+=o.byteLength),n||a<=l)do({cmd:s,size:a}=yield yield Nt(c()));while(a<l);while(!n)}catch(d){(r=!0)&&(yield Nt(u.cancel(d)))}finally{r===!1?yield Nt(u.cancel()):e.locked&&u.releaseLock()}return yield Nt(null)})}var h_=class{constructor(t){this.source=t,this.reader=null,this.reader=this.source.getReader(),this.reader.closed.catch(()=>{})}get closed(){return this.reader?this.reader.closed.catch(()=>{}):Promise.resolve()}releaseLock(){this.reader&&this.reader.releaseLock(),this.reader=null}cancel(t){return q(this,void 0,void 0,function*(){let{reader:n,source:r}=this;n&&(yield n.cancel(t).catch(()=>{})),r&&r.locked&&this.releaseLock()})}read(t){return q(this,void 0,void 0,function*(){if(t===0)return{done:this.reader==null,value:new Uint8Array(0)};let n=yield this.reader.read();return!n.done&&(n.value=xt(n)),n})}},d_=(e,t)=>{let n=i=>r([t,i]),r;return[t,n,new Promise(i=>(r=i)&&e.once(t,n))]};function NO(e){return hr(this,arguments,function*(){let n=[],r="error",i=!1,o=null,s,a,l=0,c=[],u;function d(){return s==="peek"?Mr(c,a)[0]:([u,c,l]=Mr(c,a),u)}if({cmd:s,size:a}=yield yield Nt(null),e.isTTY)return yield yield Nt(new Uint8Array(0)),yield Nt(null);try{n[0]=d_(e,"end"),n[1]=d_(e,"error");do{if(n[2]=d_(e,"readable"),[r,o]=yield Nt(Promise.race(n.map(h=>h[2]))),r==="error")break;if((i=r==="end")||(Number.isFinite(a-l)?(u=xt(e.read(a-l)),u.byteLength<a-l&&(u=xt(e.read()))):u=xt(e.read()),u.byteLength>0&&(c.push(u),l+=u.byteLength)),i||a<=l)do({cmd:s,size:a}=yield yield Nt(d()));while(a<l)}while(!i)}finally{yield Nt(f(n,r==="error"?o:null))}return yield Nt(null);function f(h,p){return u=c=null,new Promise((m,g)=>{for(let[b,y]of h)e.off(b,y);try{let b=e.destroy;b&&b.call(e,p),p=void 0}catch(b){p=b||p}finally{p!=null?g(p):m()}})}})}var en;(function(e){e[e.V1=0]="V1",e[e.V2=1]="V2",e[e.V3=2]="V3",e[e.V4=3]="V4",e[e.V5=4]="V5"})(en||(en={}));var xe;(function(e){e[e.Sparse=0]="Sparse",e[e.Dense=1]="Dense"})(xe||(xe={}));var fe;(function(e){e[e.HALF=0]="HALF",e[e.SINGLE=1]="SINGLE",e[e.DOUBLE=2]="DOUBLE"})(fe||(fe={}));var xn;(function(e){e[e.DAY=0]="DAY",e[e.MILLISECOND=1]="MILLISECOND"})(xn||(xn={}));var Dt;(function(e){e[e.SECOND=0]="SECOND",e[e.MILLISECOND=1]="MILLISECOND",e[e.MICROSECOND=2]="MICROSECOND",e[e.NANOSECOND=3]="NANOSECOND"})(Dt||(Dt={}));var Wn;(function(e){e[e.YEAR_MONTH=0]="YEAR_MONTH",e[e.DAY_TIME=1]="DAY_TIME",e[e.MONTH_DAY_NANO=2]="MONTH_DAY_NANO"})(Wn||(Wn={}));var Vt;(function(e){e[e.NONE=0]="NONE",e[e.Schema=1]="Schema",e[e.DictionaryBatch=2]="DictionaryBatch",e[e.RecordBatch=3]="RecordBatch",e[e.Tensor=4]="Tensor",e[e.SparseTensor=5]="SparseTensor"})(Vt||(Vt={}));var E;(function(e){e[e.NONE=0]="NONE",e[e.Null=1]="Null",e[e.Int=2]="Int",e[e.Float=3]="Float",e[e.Binary=4]="Binary",e[e.Utf8=5]="Utf8",e[e.Bool=6]="Bool",e[e.Decimal=7]="Decimal",e[e.Date=8]="Date",e[e.Time=9]="Time",e[e.Timestamp=10]="Timestamp",e[e.Interval=11]="Interval",e[e.List=12]="List",e[e.Struct=13]="Struct",e[e.Union=14]="Union",e[e.FixedSizeBinary=15]="FixedSizeBinary",e[e.FixedSizeList=16]="FixedSizeList",e[e.Map=17]="Map",e[e.Dictionary=-1]="Dictionary",e[e.Int8=-2]="Int8",e[e.Int16=-3]="Int16",e[e.Int32=-4]="Int32",e[e.Int64=-5]="Int64",e[e.Uint8=-6]="Uint8",e[e.Uint16=-7]="Uint16",e[e.Uint32=-8]="Uint32",e[e.Uint64=-9]="Uint64",e[e.Float16=-10]="Float16",e[e.Float32=-11]="Float32",e[e.Float64=-12]="Float64",e[e.DateDay=-13]="DateDay",e[e.DateMillisecond=-14]="DateMillisecond",e[e.TimestampSecond=-15]="TimestampSecond",e[e.TimestampMillisecond=-16]="TimestampMillisecond",e[e.TimestampMicrosecond=-17]="TimestampMicrosecond",e[e.TimestampNanosecond=-18]="TimestampNanosecond",e[e.TimeSecond=-19]="TimeSecond",e[e.TimeMillisecond=-20]="TimeMillisecond",e[e.TimeMicrosecond=-21]="TimeMicrosecond",e[e.TimeNanosecond=-22]="TimeNanosecond",e[e.DenseUnion=-23]="DenseUnion",e[e.SparseUnion=-24]="SparseUnion",e[e.IntervalDayTime=-25]="IntervalDayTime",e[e.IntervalYearMonth=-26]="IntervalYearMonth"})(E||(E={}));var jr;(function(e){e[e.OFFSET=0]="OFFSET",e[e.DATA=1]="DATA",e[e.VALIDITY=2]="VALIDITY",e[e.TYPE=3]="TYPE"})(jr||(jr={}));var k_={};Ua(k_,{clampIndex:()=>wC,clampRange:()=>Ef,createElementComparator:()=>Ds});function ci(e){if(e===null)return"null";if(e===void 0)return"undefined";switch(typeof e){case"number":return`${e}`;case"bigint":return`${e}`;case"string":return`"${e}"`}return typeof e[Symbol.toPrimitive]=="function"?e[Symbol.toPrimitive]("string"):ArrayBuffer.isView(e)?e instanceof BigInt64Array||e instanceof BigUint64Array?`[${[...e].map(t=>ci(t))}]`:`[${e}]`:ArrayBuffer.isView(e)?`[${e}]`:JSON.stringify(e,(t,n)=>typeof n=="bigint"?`${n}`:n)}var m_={};Ua(m_,{BN:()=>za,bignumToBigInt:()=>em,bignumToString:()=>Os,isArrowBigNumSymbol:()=>WT});var WT=Symbol.for("isArrowBigNum");function ui(e,...t){return t.length===0?Object.setPrototypeOf(Ot(this.TypedArray,e),this.constructor.prototype):Object.setPrototypeOf(new this.TypedArray(e,...t),this.constructor.prototype)}ui.prototype[WT]=!0;ui.prototype.toJSON=function(){return`"${Os(this)}"`};ui.prototype.valueOf=function(){return GT(this)};ui.prototype.toString=function(){return Os(this)};ui.prototype[Symbol.toPrimitive]=function(e="default"){switch(e){case"number":return GT(this);case"string":return Os(this);case"default":return em(this)}return Os(this)};function oc(...e){return ui.apply(this,e)}function sc(...e){return ui.apply(this,e)}function Tf(...e){return ui.apply(this,e)}Object.setPrototypeOf(oc.prototype,Object.create(Int32Array.prototype));Object.setPrototypeOf(sc.prototype,Object.create(Uint32Array.prototype));Object.setPrototypeOf(Tf.prototype,Object.create(Uint32Array.prototype));Object.assign(oc.prototype,ui.prototype,{constructor:oc,signed:!0,TypedArray:Int32Array,BigIntArray:wf});Object.assign(sc.prototype,ui.prototype,{constructor:sc,signed:!1,TypedArray:Uint32Array,BigIntArray:rc});Object.assign(Tf.prototype,ui.prototype,{constructor:Tf,signed:!0,TypedArray:Uint32Array,BigIntArray:rc});function GT(e){let{buffer:t,byteOffset:n,length:r,signed:i}=e,o=new rc(t,n,r),s=i&&o[o.length-1]&BigInt(1)<<BigInt(63),a=BigInt(s?1:0),l=BigInt(0);if(s){for(let c of o)a+=~c*(BigInt(1)<<BigInt(32)*l++);a*=BigInt(-1)}else for(let c of o)a+=c*(BigInt(1)<<BigInt(32)*l++);return a}var Os,em;Gp?(em=e=>e.byteLength===8?new e.BigIntArray(e.buffer,e.byteOffset,1)[0]:p_(e),Os=e=>e.byteLength===8?`${new e.BigIntArray(e.buffer,e.byteOffset,1)[0]}`:p_(e)):(Os=p_,em=Os);function p_(e){let t="",n=new Uint32Array(2),r=new Uint16Array(e.buffer,e.byteOffset,e.byteLength/2),i=new Uint32Array((r=new Uint16Array(r).reverse()).buffer),o=-1,s=r.length-1;do{for(n[0]=r[o=0];o<s;)r[o++]=n[1]=n[0]/10,n[0]=(n[0]-n[1]*10<<16)+r[o];r[o]=n[1]=n[0]/10,n[0]=n[0]-n[1]*10,t=`${n[0]}${t}`}while(i[0]||i[1]||i[2]||i[3]);return t||"0"}var za=class{static new(t,n){switch(n){case!0:return new oc(t);case!1:return new sc(t)}switch(t.constructor){case Int8Array:case Int16Array:case Int32Array:case wf:return new oc(t)}return t.byteLength===16?new Tf(t):new sc(t)}static signed(t){return new oc(t)}static unsigned(t){return new sc(t)}static decimal(t){return new Tf(t)}constructor(t,n){return za.new(t,n)}};var HT,XT,ZT,KT,QT,JT,tI,eI,nI,rI,iI,oI,sI,aI,lI,cI,uI,fI,dI,tt=class{static isNull(t){return t?.typeId===E.Null}static isInt(t){return t?.typeId===E.Int}static isFloat(t){return t?.typeId===E.Float}static isBinary(t){return t?.typeId===E.Binary}static isUtf8(t){return t?.typeId===E.Utf8}static isBool(t){return t?.typeId===E.Bool}static isDecimal(t){return t?.typeId===E.Decimal}static isDate(t){return t?.typeId===E.Date}static isTime(t){return t?.typeId===E.Time}static isTimestamp(t){return t?.typeId===E.Timestamp}static isInterval(t){return t?.typeId===E.Interval}static isList(t){return t?.typeId===E.List}static isStruct(t){return t?.typeId===E.Struct}static isUnion(t){return t?.typeId===E.Union}static isFixedSizeBinary(t){return t?.typeId===E.FixedSizeBinary}static isFixedSizeList(t){return t?.typeId===E.FixedSizeList}static isMap(t){return t?.typeId===E.Map}static isDictionary(t){return t?.typeId===E.Dictionary}static isDenseUnion(t){return tt.isUnion(t)&&t.mode===xe.Dense}static isSparseUnion(t){return tt.isUnion(t)&&t.mode===xe.Sparse}get typeId(){return E.NONE}};HT=Symbol.toStringTag;tt[HT]=(e=>(e.children=null,e.ArrayType=Array,e[Symbol.toStringTag]="DataType"))(tt.prototype);var Gn=class extends tt{toString(){return"Null"}get typeId(){return E.Null}};XT=Symbol.toStringTag;Gn[XT]=(e=>e[Symbol.toStringTag]="Null")(Gn.prototype);var ke=class extends tt{constructor(t,n){super(),this.isSigned=t,this.bitWidth=n}get typeId(){return E.Int}get ArrayType(){switch(this.bitWidth){case 8:return this.isSigned?Int8Array:Uint8Array;case 16:return this.isSigned?Int16Array:Uint16Array;case 32:return this.isSigned?Int32Array:Uint32Array;case 64:return this.isSigned?BigInt64Array:BigUint64Array}throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`)}toString(){return`${this.isSigned?"I":"Ui"}nt${this.bitWidth}`}};ZT=Symbol.toStringTag;ke[ZT]=(e=>(e.isSigned=null,e.bitWidth=null,e[Symbol.toStringTag]="Int"))(ke.prototype);var nm=class extends ke{constructor(){super(!0,8)}get ArrayType(){return Int8Array}},rm=class extends ke{constructor(){super(!0,16)}get ArrayType(){return Int16Array}},Di=class extends ke{constructor(){super(!0,32)}get ArrayType(){return Int32Array}},im=class extends ke{constructor(){super(!0,64)}get ArrayType(){return BigInt64Array}},om=class extends ke{constructor(){super(!1,8)}get ArrayType(){return Uint8Array}},sm=class extends ke{constructor(){super(!1,16)}get ArrayType(){return Uint16Array}},am=class extends ke{constructor(){super(!1,32)}get ArrayType(){return Uint32Array}},lm=class extends ke{constructor(){super(!1,64)}get ArrayType(){return BigUint64Array}};Object.defineProperty(nm.prototype,"ArrayType",{value:Int8Array});Object.defineProperty(rm.prototype,"ArrayType",{value:Int16Array});Object.defineProperty(Di.prototype,"ArrayType",{value:Int32Array});Object.defineProperty(im.prototype,"ArrayType",{value:BigInt64Array});Object.defineProperty(om.prototype,"ArrayType",{value:Uint8Array});Object.defineProperty(sm.prototype,"ArrayType",{value:Uint16Array});Object.defineProperty(am.prototype,"ArrayType",{value:Uint32Array});Object.defineProperty(lm.prototype,"ArrayType",{value:BigUint64Array});var pr=class extends tt{constructor(t){super(),this.precision=t}get typeId(){return E.Float}get ArrayType(){switch(this.precision){case fe.HALF:return Uint16Array;case fe.SINGLE:return Float32Array;case fe.DOUBLE:return Float64Array}throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`)}toString(){return`Float${this.precision<<5||16}`}};KT=Symbol.toStringTag;pr[KT]=(e=>(e.precision=null,e[Symbol.toStringTag]="Float"))(pr.prototype);var cm=class extends pr{constructor(){super(fe.HALF)}},um=class extends pr{constructor(){super(fe.SINGLE)}},fm=class extends pr{constructor(){super(fe.DOUBLE)}};Object.defineProperty(cm.prototype,"ArrayType",{value:Uint16Array});Object.defineProperty(um.prototype,"ArrayType",{value:Float32Array});Object.defineProperty(fm.prototype,"ArrayType",{value:Float64Array});var Fo=class extends tt{constructor(){super()}get typeId(){return E.Binary}toString(){return"Binary"}};QT=Symbol.toStringTag;Fo[QT]=(e=>(e.ArrayType=Uint8Array,e[Symbol.toStringTag]="Binary"))(Fo.prototype);var ko=class extends tt{constructor(){super()}get typeId(){return E.Utf8}toString(){return"Utf8"}};JT=Symbol.toStringTag;ko[JT]=(e=>(e.ArrayType=Uint8Array,e[Symbol.toStringTag]="Utf8"))(ko.prototype);var No=class extends tt{constructor(){super()}get typeId(){return E.Bool}toString(){return"Bool"}};tI=Symbol.toStringTag;No[tI]=(e=>(e.ArrayType=Uint8Array,e[Symbol.toStringTag]="Bool"))(No.prototype);var Oo=class extends tt{constructor(t,n,r=128){super(),this.scale=t,this.precision=n,this.bitWidth=r}get typeId(){return E.Decimal}toString(){return`Decimal[${this.precision}e${this.scale>0?"+":""}${this.scale}]`}};eI=Symbol.toStringTag;Oo[eI]=(e=>(e.scale=null,e.precision=null,e.ArrayType=Uint32Array,e[Symbol.toStringTag]="Decimal"))(Oo.prototype);var Co=class extends tt{constructor(t){super(),this.unit=t}get typeId(){return E.Date}toString(){return`Date${(this.unit+1)*32}<${xn[this.unit]}>`}};nI=Symbol.toStringTag;Co[nI]=(e=>(e.unit=null,e.ArrayType=Int32Array,e[Symbol.toStringTag]="Date"))(Co.prototype);var fi=class extends tt{constructor(t,n){super(),this.unit=t,this.bitWidth=n}get typeId(){return E.Time}toString(){return`Time${this.bitWidth}<${Dt[this.unit]}>`}get ArrayType(){switch(this.bitWidth){case 32:return Int32Array;case 64:return BigInt64Array}throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`)}};rI=Symbol.toStringTag;fi[rI]=(e=>(e.unit=null,e.bitWidth=null,e[Symbol.toStringTag]="Time"))(fi.prototype);var Bo=class extends tt{constructor(t,n){super(),this.unit=t,this.timezone=n}get typeId(){return E.Timestamp}toString(){return`Timestamp<${Dt[this.unit]}${this.timezone?`, ${this.timezone}`:""}>`}};iI=Symbol.toStringTag;Bo[iI]=(e=>(e.unit=null,e.timezone=null,e.ArrayType=Int32Array,e[Symbol.toStringTag]="Timestamp"))(Bo.prototype);var Do=class extends tt{constructor(t){super(),this.unit=t}get typeId(){return E.Interval}toString(){return`Interval<${Wn[this.unit]}>`}};oI=Symbol.toStringTag;Do[oI]=(e=>(e.unit=null,e.ArrayType=Int32Array,e[Symbol.toStringTag]="Interval"))(Do.prototype);var di=class extends tt{constructor(t){super(),this.children=[t]}get typeId(){return E.List}toString(){return`List<${this.valueType}>`}get valueType(){return this.children[0].type}get valueField(){return this.children[0]}get ArrayType(){return this.valueType.ArrayType}};sI=Symbol.toStringTag;di[sI]=(e=>(e.children=null,e[Symbol.toStringTag]="List"))(di.prototype);var le=class extends tt{constructor(t){super(),this.children=t}get typeId(){return E.Struct}toString(){return`Struct<{${this.children.map(t=>`${t.name}:${t.type}`).join(", ")}}>`}};aI=Symbol.toStringTag;le[aI]=(e=>(e.children=null,e[Symbol.toStringTag]="Struct"))(le.prototype);var hi=class extends tt{constructor(t,n,r){super(),this.mode=t,this.children=r,this.typeIds=n=Int32Array.from(n),this.typeIdToChildIndex=n.reduce((i,o,s)=>(i[o]=s)&&i||i,Object.create(null))}get typeId(){return E.Union}toString(){return`${this[Symbol.toStringTag]}<${this.children.map(t=>`${t.type}`).join(" | ")}>`}};lI=Symbol.toStringTag;hi[lI]=(e=>(e.mode=null,e.typeIds=null,e.children=null,e.typeIdToChildIndex=null,e.ArrayType=Int8Array,e[Symbol.toStringTag]="Union"))(hi.prototype);var Lo=class extends tt{constructor(t){super(),this.byteWidth=t}get typeId(){return E.FixedSizeBinary}toString(){return`FixedSizeBinary[${this.byteWidth}]`}};cI=Symbol.toStringTag;Lo[cI]=(e=>(e.byteWidth=null,e.ArrayType=Uint8Array,e[Symbol.toStringTag]="FixedSizeBinary"))(Lo.prototype);var pi=class extends tt{constructor(t,n){super(),this.listSize=t,this.children=[n]}get typeId(){return E.FixedSizeList}get valueType(){return this.children[0].type}get valueField(){return this.children[0]}get ArrayType(){return this.valueType.ArrayType}toString(){return`FixedSizeList[${this.listSize}]<${this.valueType}>`}};uI=Symbol.toStringTag;pi[uI]=(e=>(e.children=null,e.listSize=null,e[Symbol.toStringTag]="FixedSizeList"))(pi.prototype);var mi=class extends tt{constructor(t,n=!1){super(),this.children=[t],this.keysSorted=n}get typeId(){return E.Map}get keyType(){return this.children[0].type.children[0].type}get valueType(){return this.children[0].type.children[1].type}get childType(){return this.children[0].type}toString(){return`Map<{${this.children[0].type.children.map(t=>`${t.name}:${t.type}`).join(", ")}}>`}};fI=Symbol.toStringTag;mi[fI]=(e=>(e.children=null,e.keysSorted=null,e[Symbol.toStringTag]="Map_"))(mi.prototype);var OO=(e=>()=>++e)(-1),Ar=class extends tt{constructor(t,n,r,i){super(),this.indices=n,this.dictionary=t,this.isOrdered=i||!1,this.id=r==null?OO():typeof r=="number"?r:r.low}get typeId(){return E.Dictionary}get children(){return this.dictionary.children}get valueType(){return this.dictionary}get ArrayType(){return this.dictionary.ArrayType}toString(){return`Dictionary<${this.indices}, ${this.dictionary}>`}};dI=Symbol.toStringTag;Ar[dI]=(e=>(e.id=null,e.indices=null,e.isOrdered=null,e.dictionary=null,e[Symbol.toStringTag]="Dictionary"))(Ar.prototype);function Fr(e){let t=e;switch(e.typeId){case E.Decimal:return e.bitWidth/32;case E.Timestamp:return 2;case E.Date:return 1+t.unit;case E.Interval:return 1+t.unit;case E.FixedSizeList:return t.listSize;case E.FixedSizeBinary:return t.byteWidth;default:return 1}}var lt=class{visitMany(t,...n){return t.map((r,i)=>this.visit(r,...n.map(o=>o[i])))}visit(...t){return this.getVisitFn(t[0],!1).apply(this,t)}getVisitFn(t,n=!0){return CO(this,t,n)}getVisitFnByTypeId(t,n=!0){return ac(this,t,n)}visitNull(t,...n){return null}visitBool(t,...n){return null}visitInt(t,...n){return null}visitFloat(t,...n){return null}visitUtf8(t,...n){return null}visitBinary(t,...n){return null}visitFixedSizeBinary(t,...n){return null}visitDate(t,...n){return null}visitTimestamp(t,...n){return null}visitTime(t,...n){return null}visitDecimal(t,...n){return null}visitList(t,...n){return null}visitStruct(t,...n){return null}visitUnion(t,...n){return null}visitDictionary(t,...n){return null}visitInterval(t,...n){return null}visitFixedSizeList(t,...n){return null}visitMap(t,...n){return null}};function CO(e,t,n=!0){return typeof t=="number"?ac(e,t,n):typeof t=="string"&&t in E?ac(e,E[t],n):t&&t instanceof tt?ac(e,hI(t),n):t?.type&&t.type instanceof tt?ac(e,hI(t.type),n):ac(e,E.NONE,n)}function ac(e,t,n=!0){let r=null;switch(t){case E.Null:r=e.visitNull;break;case E.Bool:r=e.visitBool;break;case E.Int:r=e.visitInt;break;case E.Int8:r=e.visitInt8||e.visitInt;break;case E.Int16:r=e.visitInt16||e.visitInt;break;case E.Int32:r=e.visitInt32||e.visitInt;break;case E.Int64:r=e.visitInt64||e.visitInt;break;case E.Uint8:r=e.visitUint8||e.visitInt;break;case E.Uint16:r=e.visitUint16||e.visitInt;break;case E.Uint32:r=e.visitUint32||e.visitInt;break;case E.Uint64:r=e.visitUint64||e.visitInt;break;case E.Float:r=e.visitFloat;break;case E.Float16:r=e.visitFloat16||e.visitFloat;break;case E.Float32:r=e.visitFloat32||e.visitFloat;break;case E.Float64:r=e.visitFloat64||e.visitFloat;break;case E.Utf8:r=e.visitUtf8;break;case E.Binary:r=e.visitBinary;break;case E.FixedSizeBinary:r=e.visitFixedSizeBinary;break;case E.Date:r=e.visitDate;break;case E.DateDay:r=e.visitDateDay||e.visitDate;break;case E.DateMillisecond:r=e.visitDateMillisecond||e.visitDate;break;case E.Timestamp:r=e.visitTimestamp;break;case E.TimestampSecond:r=e.visitTimestampSecond||e.visitTimestamp;break;case E.TimestampMillisecond:r=e.visitTimestampMillisecond||e.visitTimestamp;break;case E.TimestampMicrosecond:r=e.visitTimestampMicrosecond||e.visitTimestamp;break;case E.TimestampNanosecond:r=e.visitTimestampNanosecond||e.visitTimestamp;break;case E.Time:r=e.visitTime;break;case E.TimeSecond:r=e.visitTimeSecond||e.visitTime;break;case E.TimeMillisecond:r=e.visitTimeMillisecond||e.visitTime;break;case E.TimeMicrosecond:r=e.visitTimeMicrosecond||e.visitTime;break;case E.TimeNanosecond:r=e.visitTimeNanosecond||e.visitTime;break;case E.Decimal:r=e.visitDecimal;break;case E.List:r=e.visitList;break;case E.Struct:r=e.visitStruct;break;case E.Union:r=e.visitUnion;break;case E.DenseUnion:r=e.visitDenseUnion||e.visitUnion;break;case E.SparseUnion:r=e.visitSparseUnion||e.visitUnion;break;case E.Dictionary:r=e.visitDictionary;break;case E.Interval:r=e.visitInterval;break;case E.IntervalDayTime:r=e.visitIntervalDayTime||e.visitInterval;break;case E.IntervalYearMonth:r=e.visitIntervalYearMonth||e.visitInterval;break;case E.FixedSizeList:r=e.visitFixedSizeList;break;case E.Map:r=e.visitMap;break}if(typeof r=="function")return r;if(!n)return()=>null;throw new Error(`Unrecognized type '${E[t]}'`)}function hI(e){switch(e.typeId){case E.Null:return E.Null;case E.Int:{let{bitWidth:t,isSigned:n}=e;switch(t){case 8:return n?E.Int8:E.Uint8;case 16:return n?E.Int16:E.Uint16;case 32:return n?E.Int32:E.Uint32;case 64:return n?E.Int64:E.Uint64}return E.Int}case E.Float:switch(e.precision){case fe.HALF:return E.Float16;case fe.SINGLE:return E.Float32;case fe.DOUBLE:return E.Float64}return E.Float;case E.Binary:return E.Binary;case E.Utf8:return E.Utf8;case E.Bool:return E.Bool;case E.Decimal:return E.Decimal;case E.Time:switch(e.unit){case Dt.SECOND:return E.TimeSecond;case Dt.MILLISECOND:return E.TimeMillisecond;case Dt.MICROSECOND:return E.TimeMicrosecond;case Dt.NANOSECOND:return E.TimeNanosecond}return E.Time;case E.Timestamp:switch(e.unit){case Dt.SECOND:return E.TimestampSecond;case Dt.MILLISECOND:return E.TimestampMillisecond;case Dt.MICROSECOND:return E.TimestampMicrosecond;case Dt.NANOSECOND:return E.TimestampNanosecond}return E.Timestamp;case E.Date:switch(e.unit){case xn.DAY:return E.DateDay;case xn.MILLISECOND:return E.DateMillisecond}return E.Date;case E.Interval:switch(e.unit){case Wn.DAY_TIME:return E.IntervalDayTime;case Wn.YEAR_MONTH:return E.IntervalYearMonth}return E.Interval;case E.Map:return E.Map;case E.List:return E.List;case E.Struct:return E.Struct;case E.Union:switch(e.mode){case xe.Dense:return E.DenseUnion;case xe.Sparse:return E.SparseUnion}return E.Union;case E.FixedSizeBinary:return E.FixedSizeBinary;case E.FixedSizeList:return E.FixedSizeList;case E.Dictionary:return E.Dictionary}throw new Error(`Unrecognized type '${E[e.typeId]}'`)}lt.prototype.visitInt8=null;lt.prototype.visitInt16=null;lt.prototype.visitInt32=null;lt.prototype.visitInt64=null;lt.prototype.visitUint8=null;lt.prototype.visitUint16=null;lt.prototype.visitUint32=null;lt.prototype.visitUint64=null;lt.prototype.visitFloat16=null;lt.prototype.visitFloat32=null;lt.prototype.visitFloat64=null;lt.prototype.visitDateDay=null;lt.prototype.visitDateMillisecond=null;lt.prototype.visitTimestampSecond=null;lt.prototype.visitTimestampMillisecond=null;lt.prototype.visitTimestampMicrosecond=null;lt.prototype.visitTimestampNanosecond=null;lt.prototype.visitTimeSecond=null;lt.prototype.visitTimeMillisecond=null;lt.prototype.visitTimeMicrosecond=null;lt.prototype.visitTimeNanosecond=null;lt.prototype.visitDenseUnion=null;lt.prototype.visitSparseUnion=null;lt.prototype.visitIntervalDayTime=null;lt.prototype.visitIntervalYearMonth=null;var y_={};Ua(y_,{float64ToUint16:()=>If,uint16ToFloat64:()=>dm});var pI=new Float64Array(1),lc=new Uint32Array(pI.buffer);function dm(e){let t=(e&31744)>>10,n=(e&1023)/1024,r=Math.pow(-1,(e&32768)>>15);switch(t){case 31:return r*(n?Number.NaN:1/0);case 0:return r*(n?6103515625e-14*n:0)}return r*Math.pow(2,t-15)*(1+n)}function If(e){if(e!==e)return 32256;pI[0]=e;let t=(lc[1]&2147483648)>>16&65535,n=lc[1]&2146435072,r=0;return n>=1089470464?lc[0]>0?n=31744:(n=(n&2080374784)>>16,r=(lc[1]&1048575)>>10):n<=1056964608?(r=1048576+(lc[1]&1048575),r=1048576+(r<<(n>>20)-998)>>21,n=0):(n=n-1056964608>>10,r=(lc[1]&1048575)+512>>10),t|n|r&65535}var wt=class extends lt{};function kt(e){return(t,n,r)=>{if(t.setValid(n,r!=null))return e(t,n,r)}}var BO=(e,t,n)=>{e[t]=Math.trunc(n/864e5)},g_=(e,t,n)=>{e[t]=Math.trunc(n%4294967296),e[t+1]=Math.trunc(n/4294967296)},DO=(e,t,n)=>{e[t]=Math.trunc(n*1e3%4294967296),e[t+1]=Math.trunc(n*1e3/4294967296)},LO=(e,t,n)=>{e[t]=Math.trunc(n*1e6%4294967296),e[t+1]=Math.trunc(n*1e6/4294967296)},mI=(e,t,n,r)=>{if(n+1<t.length){let{[n]:i,[n+1]:o}=t;e.set(r.subarray(0,o-i),i)}},RO=({offset:e,values:t},n,r)=>{let i=e+n;r?t[i>>3]|=1<<i%8:t[i>>3]&=~(1<<i%8)},Ro=({values:e},t,n)=>{e[t]=n},b_=({values:e},t,n)=>{e[t]=n},yI=({values:e},t,n)=>{e[t]=If(n)},PO=(e,t,n)=>{switch(e.type.precision){case fe.HALF:return yI(e,t,n);case fe.SINGLE:case fe.DOUBLE:return b_(e,t,n)}},hm=({values:e},t,n)=>{BO(e,t,n.valueOf())},pm=({values:e},t,n)=>{g_(e,t*2,n.valueOf())},__=({stride:e,values:t},n,r)=>{t.set(r.subarray(0,e),e*n)},UO=({values:e,valueOffsets:t},n,r)=>mI(e,t,n,r),$O=({values:e,valueOffsets:t},n,r)=>{mI(e,t,n,Ns(r))},x_=(e,t,n)=>{e.type.unit===xn.DAY?hm(e,t,n):pm(e,t,n)},mm=({values:e},t,n)=>g_(e,t*2,n/1e3),ym=({values:e},t,n)=>g_(e,t*2,n),gm=({values:e},t,n)=>DO(e,t*2,n),bm=({values:e},t,n)=>LO(e,t*2,n),w_=(e,t,n)=>{switch(e.type.unit){case Dt.SECOND:return mm(e,t,n);case Dt.MILLISECOND:return ym(e,t,n);case Dt.MICROSECOND:return gm(e,t,n);case Dt.NANOSECOND:return bm(e,t,n)}},_m=({values:e},t,n)=>{e[t]=n},xm=({values:e},t,n)=>{e[t]=n},wm=({values:e},t,n)=>{e[t]=n},vm=({values:e},t,n)=>{e[t]=n},v_=(e,t,n)=>{switch(e.type.unit){case Dt.SECOND:return _m(e,t,n);case Dt.MILLISECOND:return xm(e,t,n);case Dt.MICROSECOND:return wm(e,t,n);case Dt.NANOSECOND:return vm(e,t,n)}},S_=({values:e,stride:t},n,r)=>{e.set(r.subarray(0,t),t*n)},zO=(e,t,n)=>{let r=e.children[0],i=e.valueOffsets,o=wn.getVisitFn(r);if(Array.isArray(n))for(let s=-1,a=i[t],l=i[t+1];a<l;)o(r,a++,n[++s]);else for(let s=-1,a=i[t],l=i[t+1];a<l;)o(r,a++,n.get(++s))},VO=(e,t,n)=>{let r=e.children[0],{valueOffsets:i}=e,o=wn.getVisitFn(r),{[t]:s,[t+1]:a}=i,l=n instanceof Map?n.entries():Object.entries(n);for(let c of l)if(o(r,s,c),++s>=a)break},jO=(e,t)=>(n,r,i,o)=>r&&n(r,e,t[o]),YO=(e,t)=>(n,r,i,o)=>r&&n(r,e,t.get(o)),qO=(e,t)=>(n,r,i,o)=>r&&n(r,e,t.get(i.name)),WO=(e,t)=>(n,r,i,o)=>r&&n(r,e,t[i.name]),GO=(e,t,n)=>{let r=e.type.children.map(o=>wn.getVisitFn(o.type)),i=n instanceof Map?qO(t,n):n instanceof vt?YO(t,n):Array.isArray(n)?jO(t,n):WO(t,n);e.type.children.forEach((o,s)=>i(r[s],e.children[s],o,s))},HO=(e,t,n)=>{e.type.mode===xe.Dense?gI(e,t,n):bI(e,t,n)},gI=(e,t,n)=>{let r=e.type.typeIdToChildIndex[e.typeIds[t]],i=e.children[r];wn.visit(i,e.valueOffsets[t],n)},bI=(e,t,n)=>{let r=e.type.typeIdToChildIndex[e.typeIds[t]],i=e.children[r];wn.visit(i,t,n)},XO=(e,t,n)=>{var r;(r=e.dictionary)===null||r===void 0||r.set(e.values[t],n)},T_=(e,t,n)=>{e.type.unit===Wn.DAY_TIME?Sm(e,t,n):Tm(e,t,n)},Sm=({values:e},t,n)=>{e.set(n.subarray(0,2),2*t)},Tm=({values:e},t,n)=>{e[t]=n[0]*12+n[1]%12},ZO=(e,t,n)=>{let{stride:r}=e,i=e.children[0],o=wn.getVisitFn(i);if(Array.isArray(n))for(let s=-1,a=t*r;++s<r;)o(i,a+s,n[s]);else for(let s=-1,a=t*r;++s<r;)o(i,a+s,n.get(s))};wt.prototype.visitBool=kt(RO);wt.prototype.visitInt=kt(Ro);wt.prototype.visitInt8=kt(Ro);wt.prototype.visitInt16=kt(Ro);wt.prototype.visitInt32=kt(Ro);wt.prototype.visitInt64=kt(Ro);wt.prototype.visitUint8=kt(Ro);wt.prototype.visitUint16=kt(Ro);wt.prototype.visitUint32=kt(Ro);wt.prototype.visitUint64=kt(Ro);wt.prototype.visitFloat=kt(PO);wt.prototype.visitFloat16=kt(yI);wt.prototype.visitFloat32=kt(b_);wt.prototype.visitFloat64=kt(b_);wt.prototype.visitUtf8=kt($O);wt.prototype.visitBinary=kt(UO);wt.prototype.visitFixedSizeBinary=kt(__);wt.prototype.visitDate=kt(x_);wt.prototype.visitDateDay=kt(hm);wt.prototype.visitDateMillisecond=kt(pm);wt.prototype.visitTimestamp=kt(w_);wt.prototype.visitTimestampSecond=kt(mm);wt.prototype.visitTimestampMillisecond=kt(ym);wt.prototype.visitTimestampMicrosecond=kt(gm);wt.prototype.visitTimestampNanosecond=kt(bm);wt.prototype.visitTime=kt(v_);wt.prototype.visitTimeSecond=kt(_m);wt.prototype.visitTimeMillisecond=kt(xm);wt.prototype.visitTimeMicrosecond=kt(wm);wt.prototype.visitTimeNanosecond=kt(vm);wt.prototype.visitDecimal=kt(S_);wt.prototype.visitList=kt(zO);wt.prototype.visitStruct=kt(GO);wt.prototype.visitUnion=kt(HO);wt.prototype.visitDenseUnion=kt(gI);wt.prototype.visitSparseUnion=kt(bI);wt.prototype.visitDictionary=kt(XO);wt.prototype.visitInterval=kt(T_);wt.prototype.visitIntervalDayTime=kt(Sm);wt.prototype.visitIntervalYearMonth=kt(Tm);wt.prototype.visitFixedSizeList=kt(ZO);wt.prototype.visitMap=kt(VO);var wn=new wt;var yi=Symbol.for("parent"),cc=Symbol.for("rowIndex"),Cs=class{constructor(t,n){return this[yi]=t,this[cc]=n,new Proxy(this,new E_)}toArray(){return Object.values(this.toJSON())}toJSON(){let t=this[cc],n=this[yi],r=n.type.children,i={};for(let o=-1,s=r.length;++o<s;)i[r[o].name]=Pe.visit(n.children[o],t);return i}toString(){return`{${[...this].map(([t,n])=>`${ci(t)}: ${ci(n)}`).join(", ")}}`}[Symbol.for("nodejs.util.inspect.custom")](){return this.toString()}[Symbol.iterator](){return new I_(this[yi],this[cc])}},I_=class{constructor(t,n){this.childIndex=0,this.children=t.children,this.rowIndex=n,this.childFields=t.type.children,this.numChildren=this.childFields.length}[Symbol.iterator](){return this}next(){let t=this.childIndex;return t<this.numChildren?(this.childIndex=t+1,{done:!1,value:[this.childFields[t].name,Pe.visit(this.children[t],this.rowIndex)]}):{done:!0,value:null}}};Object.defineProperties(Cs.prototype,{[Symbol.toStringTag]:{enumerable:!1,configurable:!1,value:"Row"},[yi]:{writable:!0,enumerable:!1,configurable:!1,value:null},[cc]:{writable:!0,enumerable:!1,configurable:!1,value:-1}});var E_=class{isExtensible(){return!1}deleteProperty(){return!1}preventExtensions(){return!0}ownKeys(t){return t[yi].type.children.map(n=>n.name)}has(t,n){return t[yi].type.children.findIndex(r=>r.name===n)!==-1}getOwnPropertyDescriptor(t,n){if(t[yi].type.children.findIndex(r=>r.name===n)!==-1)return{writable:!0,enumerable:!0,configurable:!0}}get(t,n){if(Reflect.has(t,n))return t[n];let r=t[yi].type.children.findIndex(i=>i.name===n);if(r!==-1){let i=Pe.visit(t[yi].children[r],t[cc]);return Reflect.set(t,n,i),i}}set(t,n,r){let i=t[yi].type.children.findIndex(o=>o.name===n);return i!==-1?(wn.visit(t[yi].children[i],t[cc],r),Reflect.set(t,n,r)):Reflect.has(t,n)||typeof n=="symbol"?Reflect.set(t,n,r):!1}};var pt=class extends lt{};function Et(e){return(t,n)=>t.getValid(n)?e(t,n):null}var KO=(e,t)=>864e5*e[t],M_=(e,t)=>4294967296*e[t+1]+(e[t]>>>0),QO=(e,t)=>4294967296*(e[t+1]/1e3)+(e[t]>>>0)/1e3,JO=(e,t)=>4294967296*(e[t+1]/1e6)+(e[t]>>>0)/1e6,_I=e=>new Date(e),tC=(e,t)=>_I(KO(e,t)),eC=(e,t)=>_I(M_(e,t)),nC=(e,t)=>null,xI=(e,t,n)=>{if(n+1>=t.length)return null;let r=t[n],i=t[n+1];return e.subarray(r,i)},rC=({offset:e,values:t},n)=>{let r=e+n;return(t[r>>3]&1<<r%8)!==0},wI=({values:e},t)=>tC(e,t),vI=({values:e},t)=>eC(e,t*2),Bs=({stride:e,values:t},n)=>t[e*n],iC=({stride:e,values:t},n)=>dm(t[e*n]),SI=({values:e},t)=>e[t],oC=({stride:e,values:t},n)=>t.subarray(e*n,e*(n+1)),sC=({values:e,valueOffsets:t},n)=>xI(e,t,n),aC=({values:e,valueOffsets:t},n)=>{let r=xI(e,t,n);return r!==null?xf(r):null},lC=({values:e},t)=>e[t],cC=({type:e,values:t},n)=>e.precision!==fe.HALF?t[n]:dm(t[n]),uC=(e,t)=>e.type.unit===xn.DAY?wI(e,t):vI(e,t),TI=({values:e},t)=>1e3*M_(e,t*2),II=({values:e},t)=>M_(e,t*2),EI=({values:e},t)=>QO(e,t*2),MI=({values:e},t)=>JO(e,t*2),fC=(e,t)=>{switch(e.type.unit){case Dt.SECOND:return TI(e,t);case Dt.MILLISECOND:return II(e,t);case Dt.MICROSECOND:return EI(e,t);case Dt.NANOSECOND:return MI(e,t)}},AI=({values:e},t)=>e[t],FI=({values:e},t)=>e[t],kI=({values:e},t)=>e[t],NI=({values:e},t)=>e[t],dC=(e,t)=>{switch(e.type.unit){case Dt.SECOND:return AI(e,t);case Dt.MILLISECOND:return FI(e,t);case Dt.MICROSECOND:return kI(e,t);case Dt.NANOSECOND:return NI(e,t)}},hC=({values:e,stride:t},n)=>za.decimal(e.subarray(t*n,t*(n+1))),pC=(e,t)=>{let{valueOffsets:n,stride:r,children:i}=e,{[t*r]:o,[t*r+1]:s}=n,l=i[0].slice(o,s-o);return new vt([l])},mC=(e,t)=>{let{valueOffsets:n,children:r}=e,{[t]:i,[t+1]:o}=n,s=r[0];return new Li(s.slice(i,o-i))},yC=(e,t)=>new Cs(e,t),gC=(e,t)=>e.type.mode===xe.Dense?OI(e,t):CI(e,t),OI=(e,t)=>{let n=e.type.typeIdToChildIndex[e.typeIds[t]],r=e.children[n];return Pe.visit(r,e.valueOffsets[t])},CI=(e,t)=>{let n=e.type.typeIdToChildIndex[e.typeIds[t]],r=e.children[n];return Pe.visit(r,t)},bC=(e,t)=>{var n;return(n=e.dictionary)===null||n===void 0?void 0:n.get(e.values[t])},_C=(e,t)=>e.type.unit===Wn.DAY_TIME?BI(e,t):DI(e,t),BI=({values:e},t)=>e.subarray(2*t,2*(t+1)),DI=({values:e},t)=>{let n=e[t],r=new Int32Array(2);return r[0]=Math.trunc(n/12),r[1]=Math.trunc(n%12),r},xC=(e,t)=>{let{stride:n,children:r}=e,o=r[0].slice(t*n,n);return new vt([o])};pt.prototype.visitNull=Et(nC);pt.prototype.visitBool=Et(rC);pt.prototype.visitInt=Et(lC);pt.prototype.visitInt8=Et(Bs);pt.prototype.visitInt16=Et(Bs);pt.prototype.visitInt32=Et(Bs);pt.prototype.visitInt64=Et(SI);pt.prototype.visitUint8=Et(Bs);pt.prototype.visitUint16=Et(Bs);pt.prototype.visitUint32=Et(Bs);pt.prototype.visitUint64=Et(SI);pt.prototype.visitFloat=Et(cC);pt.prototype.visitFloat16=Et(iC);pt.prototype.visitFloat32=Et(Bs);pt.prototype.visitFloat64=Et(Bs);pt.prototype.visitUtf8=Et(aC);pt.prototype.visitBinary=Et(sC);pt.prototype.visitFixedSizeBinary=Et(oC);pt.prototype.visitDate=Et(uC);pt.prototype.visitDateDay=Et(wI);pt.prototype.visitDateMillisecond=Et(vI);pt.prototype.visitTimestamp=Et(fC);pt.prototype.visitTimestampSecond=Et(TI);pt.prototype.visitTimestampMillisecond=Et(II);pt.prototype.visitTimestampMicrosecond=Et(EI);pt.prototype.visitTimestampNanosecond=Et(MI);pt.prototype.visitTime=Et(dC);pt.prototype.visitTimeSecond=Et(AI);pt.prototype.visitTimeMillisecond=Et(FI);pt.prototype.visitTimeMicrosecond=Et(kI);pt.prototype.visitTimeNanosecond=Et(NI);pt.prototype.visitDecimal=Et(hC);pt.prototype.visitList=Et(pC);pt.prototype.visitStruct=Et(yC);pt.prototype.visitUnion=Et(gC);pt.prototype.visitDenseUnion=Et(OI);pt.prototype.visitSparseUnion=Et(CI);pt.prototype.visitDictionary=Et(bC);pt.prototype.visitInterval=Et(_C);pt.prototype.visitIntervalDayTime=Et(BI);pt.prototype.visitIntervalYearMonth=Et(DI);pt.prototype.visitFixedSizeList=Et(xC);pt.prototype.visitMap=Et(mC);var Pe=new pt;var Yr=Symbol.for("keys"),uc=Symbol.for("vals"),Li=class{constructor(t){return this[Yr]=new vt([t.children[0]]).memoize(),this[uc]=t.children[1],new Proxy(this,new F_)}[Symbol.iterator](){return new A_(this[Yr],this[uc])}get size(){return this[Yr].length}toArray(){return Object.values(this.toJSON())}toJSON(){let t=this[Yr],n=this[uc],r={};for(let i=-1,o=t.length;++i<o;)r[t.get(i)]=Pe.visit(n,i);return r}toString(){return`{${[...this].map(([t,n])=>`${ci(t)}: ${ci(n)}`).join(", ")}}`}[Symbol.for("nodejs.util.inspect.custom")](){return this.toString()}},A_=class{constructor(t,n){this.keys=t,this.vals=n,this.keyIndex=0,this.numKeys=t.length}[Symbol.iterator](){return this}next(){let t=this.keyIndex;return t===this.numKeys?{done:!0,value:null}:(this.keyIndex++,{done:!1,value:[this.keys.get(t),Pe.visit(this.vals,t)]})}},F_=class{isExtensible(){return!1}deleteProperty(){return!1}preventExtensions(){return!0}ownKeys(t){return t[Yr].toArray().map(String)}has(t,n){return t[Yr].includes(n)}getOwnPropertyDescriptor(t,n){if(t[Yr].indexOf(n)!==-1)return{writable:!0,enumerable:!0,configurable:!0}}get(t,n){if(Reflect.has(t,n))return t[n];let r=t[Yr].indexOf(n);if(r!==-1){let i=Pe.visit(Reflect.get(t,uc),r);return Reflect.set(t,n,i),i}}set(t,n,r){let i=t[Yr].indexOf(n);return i!==-1?(wn.visit(Reflect.get(t,uc),i,r),Reflect.set(t,n,r)):Reflect.has(t,n)?Reflect.set(t,n,r):!1}};Object.defineProperties(Li.prototype,{[Symbol.toStringTag]:{enumerable:!1,configurable:!1,value:"Row"},[Yr]:{writable:!0,enumerable:!1,configurable:!1,value:null},[uc]:{writable:!0,enumerable:!1,configurable:!1,value:null}});function wC(e,t,n){let r=e.length,i=t>-1?t:r+t%r;return n?n(e,i):i}var LI;function Ef(e,t,n,r){let{length:i=0}=e,o=typeof t!="number"?0:t,s=typeof n!="number"?i:n;return o<0&&(o=(o%i+i)%i),s<0&&(s=(s%i+i)%i),s<o&&(LI=o,o=s,s=LI),s>i&&(s=i),r?r(e,o,s):[o,s]}var RI=e=>e!==e;function Ds(e){if(typeof e!=="object"||e===null)return RI(e)?RI:n=>n===e;if(e instanceof Date){let n=e.valueOf();return r=>r instanceof Date?r.valueOf()===n:!1}return ArrayBuffer.isView(e)?n=>n?u_(e,n):!1:e instanceof Map?SC(e):Array.isArray(e)?vC(e):e instanceof vt?TC(e):IC(e,!0)}function vC(e){let t=[];for(let n=-1,r=e.length;++n<r;)t[n]=Ds(e[n]);return Im(t)}function SC(e){let t=-1,n=[];for(let r of e.values())n[++t]=Ds(r);return Im(n)}function TC(e){let t=[];for(let n=-1,r=e.length;++n<r;)t[n]=Ds(e.get(n));return Im(t)}function IC(e,t=!1){let n=Object.keys(e);if(!t&&n.length===0)return()=>!1;let r=[];for(let i=-1,o=n.length;++i<o;)r[i]=Ds(e[n[i]]);return Im(r,n)}function Im(e,t){return n=>{if(!n||typeof n!="object")return!1;switch(n.constructor){case Array:return EC(e,n);case Map:return PI(e,n,n.keys());case Li:case Cs:case Object:case void 0:return PI(e,n,t||Object.keys(n))}return n instanceof vt?MC(e,n):!1}}function EC(e,t){let n=e.length;if(t.length!==n)return!1;for(let r=-1;++r<n;)if(!e[r](t[r]))return!1;return!0}function MC(e,t){let n=e.length;if(t.length!==n)return!1;for(let r=-1;++r<n;)if(!e[r](t.get(r)))return!1;return!0}function PI(e,t,n){let r=n[Symbol.iterator](),i=t instanceof Map?t.keys():Object.keys(t)[Symbol.iterator](),o=t instanceof Map?t.values():Object.values(t)[Symbol.iterator](),s=0,a=e.length,l=o.next(),c=r.next(),u=i.next();for(;s<a&&!c.done&&!u.done&&!l.done&&!(c.value!==u.value||!e[s](l.value));++s,c=r.next(),u=i.next(),l=o.next());return s===a&&c.done&&u.done&&l.done?!0:(r.return&&r.return(),i.return&&i.return(),o.return&&o.return(),!1)}var N_={};Ua(N_,{BitIterator:()=>Va,getBit:()=>UI,getBool:()=>Mm,packBools:()=>ja,popcnt_array:()=>$I,popcnt_bit_range:()=>Mf,popcnt_uint32:()=>Em,setBool:()=>AC,truncateBitmap:()=>fc});function Mm(e,t,n,r){return(n&1<<r)!==0}function UI(e,t,n,r){return(n&1<<r)>>r}function AC(e,t,n){return n?!!(e[t>>3]|=1<<t%8)||!0:!(e[t>>3]&=~(1<<t%8))&&!1}function fc(e,t,n){let r=n.byteLength+7&-8;if(e>0||n.byteLength<r){let i=new Uint8Array(r);return i.set(e%8===0?n.subarray(e>>3):ja(new Va(n,e,t,null,Mm)).subarray(0,r)),i}return n}function ja(e){let t=[],n=0,r=0,i=0;for(let s of e)s&&(i|=1<<r),++r===8&&(t[n++]=i,i=r=0);(n===0||r>0)&&(t[n++]=i);let o=new Uint8Array(t.length+7&-8);return o.set(t),o}var Va=class{constructor(t,n,r,i,o){this.bytes=t,this.length=r,this.context=i,this.get=o,this.bit=n%8,this.byteIndex=n>>3,this.byte=t[this.byteIndex++],this.index=0}next(){return this.index<this.length?(this.bit===8&&(this.bit=0,this.byte=this.bytes[this.byteIndex++]),{value:this.get(this.context,this.index++,this.byte,this.bit++)}):{done:!0,value:null}}[Symbol.iterator](){return this}};function Mf(e,t,n){if(n-t<=0)return 0;if(n-t<8){let o=0;for(let s of new Va(e,t,n-t,e,UI))o+=s;return o}let r=n>>3<<3,i=t+(t%8===0?0:8-t%8);return Mf(e,t,i)+Mf(e,r,n)+$I(e,i>>3,r-i>>3)}function $I(e,t,n){let r=0,i=Math.trunc(t),o=new DataView(e.buffer,e.byteOffset,e.byteLength),s=n===void 0?e.byteLength:i+n;for(;s-i>=4;)r+=Em(o.getUint32(i)),i+=4;for(;s-i>=2;)r+=Em(o.getUint16(i)),i+=2;for(;s-i>=1;)r+=Em(o.getUint8(i)),i+=1;return r}function Em(e){let t=Math.trunc(e);return t=t-(t>>>1&1431655765),t=(t&858993459)+(t>>>2&858993459),(t+(t>>>4)&252645135)*16843009>>>24}var FC=-1,Wt=class{constructor(t,n,r,i,o,s=[],a){this.type=t,this.children=s,this.dictionary=a,this.offset=Math.floor(Math.max(n||0,0)),this.length=Math.floor(Math.max(r||0,0)),this._nullCount=Math.floor(Math.max(i||0,-1));let l;o instanceof Wt?(this.stride=o.stride,this.values=o.values,this.typeIds=o.typeIds,this.nullBitmap=o.nullBitmap,this.valueOffsets=o.valueOffsets):(this.stride=Fr(t),o&&((l=o[0])&&(this.valueOffsets=l),(l=o[1])&&(this.values=l),(l=o[2])&&(this.nullBitmap=l),(l=o[3])&&(this.typeIds=l))),this.nullable=this._nullCount!==0&&this.nullBitmap&&this.nullBitmap.byteLength>0}get typeId(){return this.type.typeId}get ArrayType(){return this.type.ArrayType}get buffers(){return[this.valueOffsets,this.values,this.nullBitmap,this.typeIds]}get byteLength(){let t=0,{valueOffsets:n,values:r,nullBitmap:i,typeIds:o}=this;return n&&(t+=n.byteLength),r&&(t+=r.byteLength),i&&(t+=i.byteLength),o&&(t+=o.byteLength),this.children.reduce((s,a)=>s+a.byteLength,t)}get nullCount(){let t=this._nullCount,n;return t<=FC&&(n=this.nullBitmap)&&(this._nullCount=t=this.length-Mf(n,this.offset,this.offset+this.length)),t}getValid(t){if(this.nullable&&this.nullCount>0){let n=this.offset+t;return(this.nullBitmap[n>>3]&1<<n%8)!==0}return!0}setValid(t,n){if(!this.nullable)return n;if(!this.nullBitmap||this.nullBitmap.byteLength<=t>>3){let{nullBitmap:l}=this._changeLengthAndBackfillNullBitmap(this.length);Object.assign(this,{nullBitmap:l,_nullCount:0})}let{nullBitmap:r,offset:i}=this,o=i+t>>3,s=(i+t)%8,a=r[o]>>s&1;return n?a===0&&(r[o]|=1<<s,this._nullCount=this.nullCount+1):a===1&&(r[o]&=~(1<<s),this._nullCount=this.nullCount-1),n}clone(t=this.type,n=this.offset,r=this.length,i=this._nullCount,o=this,s=this.children){return new Wt(t,n,r,i,o,s,this.dictionary)}slice(t,n){let{stride:r,typeId:i,children:o}=this,s=+(this._nullCount===0)-1,a=i===16?r:1,l=this._sliceBuffers(t,n,r,i);return this.clone(this.type,this.offset+t,n,s,l,o.length===0||this.valueOffsets?o:this._sliceChildren(o,a*t,a*n))}_changeLengthAndBackfillNullBitmap(t){if(this.typeId===E.Null)return this.clone(this.type,0,t,0);let{length:n,nullCount:r}=this,i=new Uint8Array((t+63&-64)>>3).fill(255,0,n>>3);i[n>>3]=(1<<n-(n&-8))-1,r>0&&i.set(fc(this.offset,n,this.nullBitmap),0);let o=this.buffers;return o[jr.VALIDITY]=i,this.clone(this.type,0,t,r+(t-n),o)}_sliceBuffers(t,n,r,i){let o,{buffers:s}=this;return(o=s[jr.TYPE])&&(s[jr.TYPE]=o.subarray(t,t+n)),(o=s[jr.OFFSET])&&(s[jr.OFFSET]=o.subarray(t,t+n+1))||(o=s[jr.DATA])&&(s[jr.DATA]=i===6?o:o.subarray(r*t,r*(t+n))),s}_sliceChildren(t,n,r){return t.map(i=>i.slice(n,r))}};Wt.prototype.children=Object.freeze([]);var Ya=class extends lt{visit(t){return this.getVisitFn(t.type).call(this,t)}visitNull(t){let{["type"]:n,["offset"]:r=0,["length"]:i=0}=t;return new Wt(n,r,i,0)}visitBool(t){let{["type"]:n,["offset"]:r=0}=t,i=xt(t.nullBitmap),o=Ot(n.ArrayType,t.data),{["length"]:s=o.length>>3,["nullCount"]:a=t.nullBitmap?-1:0}=t;return new Wt(n,r,s,a,[void 0,o,i])}visitInt(t){let{["type"]:n,["offset"]:r=0}=t,i=xt(t.nullBitmap),o=Ot(n.ArrayType,t.data),{["length"]:s=o.length,["nullCount"]:a=t.nullBitmap?-1:0}=t;return new Wt(n,r,s,a,[void 0,o,i])}visitFloat(t){let{["type"]:n,["offset"]:r=0}=t,i=xt(t.nullBitmap),o=Ot(n.ArrayType,t.data),{["length"]:s=o.length,["nullCount"]:a=t.nullBitmap?-1:0}=t;return new Wt(n,r,s,a,[void 0,o,i])}visitUtf8(t){let{["type"]:n,["offset"]:r=0}=t,i=xt(t.data),o=xt(t.nullBitmap),s=$a(t.valueOffsets),{["length"]:a=s.length-1,["nullCount"]:l=t.nullBitmap?-1:0}=t;return new Wt(n,r,a,l,[s,i,o])}visitBinary(t){let{["type"]:n,["offset"]:r=0}=t,i=xt(t.data),o=xt(t.nullBitmap),s=$a(t.valueOffsets),{["length"]:a=s.length-1,["nullCount"]:l=t.nullBitmap?-1:0}=t;return new Wt(n,r,a,l,[s,i,o])}visitFixedSizeBinary(t){let{["type"]:n,["offset"]:r=0}=t,i=xt(t.nullBitmap),o=Ot(n.ArrayType,t.data),{["length"]:s=o.length/Fr(n),["nullCount"]:a=t.nullBitmap?-1:0}=t;return new Wt(n,r,s,a,[void 0,o,i])}visitDate(t){let{["type"]:n,["offset"]:r=0}=t,i=xt(t.nullBitmap),o=Ot(n.ArrayType,t.data),{["length"]:s=o.length/Fr(n),["nullCount"]:a=t.nullBitmap?-1:0}=t;return new Wt(n,r,s,a,[void 0,o,i])}visitTimestamp(t){let{["type"]:n,["offset"]:r=0}=t,i=xt(t.nullBitmap),o=Ot(n.ArrayType,t.data),{["length"]:s=o.length/Fr(n),["nullCount"]:a=t.nullBitmap?-1:0}=t;return new Wt(n,r,s,a,[void 0,o,i])}visitTime(t){let{["type"]:n,["offset"]:r=0}=t,i=xt(t.nullBitmap),o=Ot(n.ArrayType,t.data),{["length"]:s=o.length/Fr(n),["nullCount"]:a=t.nullBitmap?-1:0}=t;return new Wt(n,r,s,a,[void 0,o,i])}visitDecimal(t){let{["type"]:n,["offset"]:r=0}=t,i=xt(t.nullBitmap),o=Ot(n.ArrayType,t.data),{["length"]:s=o.length/Fr(n),["nullCount"]:a=t.nullBitmap?-1:0}=t;return new Wt(n,r,s,a,[void 0,o,i])}visitList(t){let{["type"]:n,["offset"]:r=0,["child"]:i}=t,o=xt(t.nullBitmap),s=$a(t.valueOffsets),{["length"]:a=s.length-1,["nullCount"]:l=t.nullBitmap?-1:0}=t;return new Wt(n,r,a,l,[s,void 0,o],[i])}visitStruct(t){let{["type"]:n,["offset"]:r=0,["children"]:i=[]}=t,o=xt(t.nullBitmap),{length:s=i.reduce((l,{length:c})=>Math.max(l,c),0),nullCount:a=t.nullBitmap?-1:0}=t;return new Wt(n,r,s,a,[void 0,void 0,o],i)}visitUnion(t){let{["type"]:n,["offset"]:r=0,["children"]:i=[]}=t,o=xt(t.nullBitmap),s=Ot(n.ArrayType,t.typeIds),{["length"]:a=s.length,["nullCount"]:l=t.nullBitmap?-1:0}=t;if(tt.isSparseUnion(n))return new Wt(n,r,a,l,[void 0,void 0,o,s],i);let c=$a(t.valueOffsets);return new Wt(n,r,a,l,[c,void 0,o,s],i)}visitDictionary(t){let{["type"]:n,["offset"]:r=0}=t,i=xt(t.nullBitmap),o=Ot(n.indices.ArrayType,t.data),{["dictionary"]:s=new vt([new Ya().visit({type:n.dictionary})])}=t,{["length"]:a=o.length,["nullCount"]:l=t.nullBitmap?-1:0}=t;return new Wt(n,r,a,l,[void 0,o,i],[],s)}visitInterval(t){let{["type"]:n,["offset"]:r=0}=t,i=xt(t.nullBitmap),o=Ot(n.ArrayType,t.data),{["length"]:s=o.length/Fr(n),["nullCount"]:a=t.nullBitmap?-1:0}=t;return new Wt(n,r,s,a,[void 0,o,i])}visitFixedSizeList(t){let{["type"]:n,["offset"]:r=0,["child"]:i=new Ya().visit({type:n.valueType})}=t,o=xt(t.nullBitmap),{["length"]:s=i.length/Fr(n),["nullCount"]:a=t.nullBitmap?-1:0}=t;return new Wt(n,r,s,a,[void 0,void 0,o],[i])}visitMap(t){let{["type"]:n,["offset"]:r=0,["child"]:i=new Ya().visit({type:n.childType})}=t,o=xt(t.nullBitmap),s=$a(t.valueOffsets),{["length"]:a=s.length-1,["nullCount"]:l=t.nullBitmap?-1:0}=t;return new Wt(n,r,a,l,[s,void 0,o],[i])}};function Tt(e){return new Ya().visit(e)}var Af=class{constructor(t=0,n){this.numChunks=t,this.getChunkIterator=n,this.chunkIndex=0,this.chunkIterator=this.getChunkIterator(0)}next(){for(;this.chunkIndex<this.numChunks;){let t=this.chunkIterator.next();if(!t.done)return t;++this.chunkIndex<this.numChunks&&(this.chunkIterator=this.getChunkIterator(this.chunkIndex))}return{done:!0,value:null}}[Symbol.iterator](){return this}};function Am(e){return e.reduce((t,n)=>t+n.nullCount,0)}function Fm(e){return e.reduce((t,n,r)=>(t[r+1]=t[r]+n.length,t),new Uint32Array(e.length+1))}function km(e,t,n,r){let i=[];for(let o=-1,s=e.length;++o<s;){let a=e[o],l=t[o],{length:c}=a;if(l>=r)break;if(n>=l+c)continue;if(l>=n&&l+c<=r){i.push(a);continue}let u=Math.max(0,n-l),d=Math.min(r-l,c);i.push(a.slice(u,d-u))}return i.length===0&&i.push(e[0].slice(0,0)),i}function O_(e,t,n,r){let i=0,o=0,s=t.length-1;do{if(i>=s-1)return n<t[s]?r(e,i,n-t[i]):null;o=i+Math.trunc((s-i)*.5),n<t[o]?s=o:i=o}while(i<s)}function Ff(e,t){return e.getValid(t)}function Ls(e){function t(n,r,i){return e(n[r],i)}return function(n){let r=this.data;return O_(r,this._offsets,n,t)}}function Nm(e){let t;function n(r,i,o){return e(r[i],o,t)}return function(r,i){let o=this.data;t=i;let s=O_(o,this._offsets,r,n);return t=void 0,s}}function Om(e){let t;function n(r,i,o){let s=o,a=0,l=0;for(let c=i-1,u=r.length;++c<u;){let d=r[c];if(~(a=e(d,t,s)))return l+a;s=0,l+=d.length}return-1}return function(r,i){t=r;let o=this.data,s=typeof i!="number"?n(o,0,0):O_(o,this._offsets,i,n);return t=void 0,s}}var mt=class extends lt{};function kC(e,t){return t===null&&e.length>0?0:-1}function NC(e,t){let{nullBitmap:n}=e;if(!n||e.nullCount<=0)return-1;let r=0;for(let i of new Va(n,e.offset+(t||0),e.length,n,Mm)){if(!i)return r;++r}return-1}function Ct(e,t,n){if(t===void 0)return-1;if(t===null)return NC(e,n);let r=Pe.getVisitFn(e),i=Ds(t);for(let o=(n||0)-1,s=e.length;++o<s;)if(i(r(e,o)))return o;return-1}function zI(e,t,n){let r=Pe.getVisitFn(e),i=Ds(t);for(let o=(n||0)-1,s=e.length;++o<s;)if(i(r(e,o)))return o;return-1}mt.prototype.visitNull=kC;mt.prototype.visitBool=Ct;mt.prototype.visitInt=Ct;mt.prototype.visitInt8=Ct;mt.prototype.visitInt16=Ct;mt.prototype.visitInt32=Ct;mt.prototype.visitInt64=Ct;mt.prototype.visitUint8=Ct;mt.prototype.visitUint16=Ct;mt.prototype.visitUint32=Ct;mt.prototype.visitUint64=Ct;mt.prototype.visitFloat=Ct;mt.prototype.visitFloat16=Ct;mt.prototype.visitFloat32=Ct;mt.prototype.visitFloat64=Ct;mt.prototype.visitUtf8=Ct;mt.prototype.visitBinary=Ct;mt.prototype.visitFixedSizeBinary=Ct;mt.prototype.visitDate=Ct;mt.prototype.visitDateDay=Ct;mt.prototype.visitDateMillisecond=Ct;mt.prototype.visitTimestamp=Ct;mt.prototype.visitTimestampSecond=Ct;mt.prototype.visitTimestampMillisecond=Ct;mt.prototype.visitTimestampMicrosecond=Ct;mt.prototype.visitTimestampNanosecond=Ct;mt.prototype.visitTime=Ct;mt.prototype.visitTimeSecond=Ct;mt.prototype.visitTimeMillisecond=Ct;mt.prototype.visitTimeMicrosecond=Ct;mt.prototype.visitTimeNanosecond=Ct;mt.prototype.visitDecimal=Ct;mt.prototype.visitList=Ct;mt.prototype.visitStruct=Ct;mt.prototype.visitUnion=Ct;mt.prototype.visitDenseUnion=zI;mt.prototype.visitSparseUnion=zI;mt.prototype.visitDictionary=Ct;mt.prototype.visitInterval=Ct;mt.prototype.visitIntervalDayTime=Ct;mt.prototype.visitIntervalYearMonth=Ct;mt.prototype.visitFixedSizeList=Ct;mt.prototype.visitMap=Ct;var qa=new mt;var yt=class extends lt{};function Mt(e){let{type:t}=e;if(e.nullCount===0&&e.stride===1&&(t.typeId===E.Timestamp||t instanceof ke&&t.bitWidth!==64||t instanceof fi&&t.bitWidth!==64||t instanceof pr&&t.precision!==fe.HALF))return new Af(e.data.length,r=>{let i=e.data[r];return i.values.subarray(0,i.length)[Symbol.iterator]()});let n=0;return new Af(e.data.length,r=>{let o=e.data[r].length,s=e.slice(n,n+o);return n+=o,new C_(s)})}var C_=class{constructor(t){this.vector=t,this.index=0}next(){return this.index<this.vector.length?{value:this.vector.get(this.index++)}:{done:!0,value:null}}[Symbol.iterator](){return this}};yt.prototype.visitNull=Mt;yt.prototype.visitBool=Mt;yt.prototype.visitInt=Mt;yt.prototype.visitInt8=Mt;yt.prototype.visitInt16=Mt;yt.prototype.visitInt32=Mt;yt.prototype.visitInt64=Mt;yt.prototype.visitUint8=Mt;yt.prototype.visitUint16=Mt;yt.prototype.visitUint32=Mt;yt.prototype.visitUint64=Mt;yt.prototype.visitFloat=Mt;yt.prototype.visitFloat16=Mt;yt.prototype.visitFloat32=Mt;yt.prototype.visitFloat64=Mt;yt.prototype.visitUtf8=Mt;yt.prototype.visitBinary=Mt;yt.prototype.visitFixedSizeBinary=Mt;yt.prototype.visitDate=Mt;yt.prototype.visitDateDay=Mt;yt.prototype.visitDateMillisecond=Mt;yt.prototype.visitTimestamp=Mt;yt.prototype.visitTimestampSecond=Mt;yt.prototype.visitTimestampMillisecond=Mt;yt.prototype.visitTimestampMicrosecond=Mt;yt.prototype.visitTimestampNanosecond=Mt;yt.prototype.visitTime=Mt;yt.prototype.visitTimeSecond=Mt;yt.prototype.visitTimeMillisecond=Mt;yt.prototype.visitTimeMicrosecond=Mt;yt.prototype.visitTimeNanosecond=Mt;yt.prototype.visitDecimal=Mt;yt.prototype.visitList=Mt;yt.prototype.visitStruct=Mt;yt.prototype.visitUnion=Mt;yt.prototype.visitDenseUnion=Mt;yt.prototype.visitSparseUnion=Mt;yt.prototype.visitDictionary=Mt;yt.prototype.visitInterval=Mt;yt.prototype.visitIntervalDayTime=Mt;yt.prototype.visitIntervalYearMonth=Mt;yt.prototype.visitFixedSizeList=Mt;yt.prototype.visitMap=Mt;var dc=new yt;var OC=(e,t)=>e+t,Ri=class extends lt{visitNull(t,n){return 0}visitInt(t,n){return t.type.bitWidth/8}visitFloat(t,n){return t.type.ArrayType.BYTES_PER_ELEMENT}visitBool(t,n){return 1/8}visitDecimal(t,n){return t.type.bitWidth/8}visitDate(t,n){return(t.type.unit+1)*4}visitTime(t,n){return t.type.bitWidth/8}visitTimestamp(t,n){return t.type.unit===Dt.SECOND?4:8}visitInterval(t,n){return(t.type.unit+1)*4}visitStruct(t,n){return t.children.reduce((r,i)=>r+kr.visit(i,n),0)}visitFixedSizeBinary(t,n){return t.type.byteWidth}visitMap(t,n){return 8+t.children.reduce((r,i)=>r+kr.visit(i,n),0)}visitDictionary(t,n){var r;return t.type.indices.bitWidth/8+(((r=t.dictionary)===null||r===void 0?void 0:r.getByteLength(t.values[n]))||0)}},CC=({valueOffsets:e},t)=>8+(e[t+1]-e[t]),BC=({valueOffsets:e},t)=>8+(e[t+1]-e[t]),DC=({valueOffsets:e,stride:t,children:n},r)=>{let i=n[0],{[r*t]:o}=e,{[r*t+1]:s}=e,a=kr.getVisitFn(i.type),l=i.slice(o,s-o),c=8;for(let u=-1,d=s-o;++u<d;)c+=a(l,u);return c},LC=({stride:e,children:t},n)=>{let r=t[0],i=r.slice(n*e,e),o=kr.getVisitFn(r.type),s=0;for(let a=-1,l=i.length;++a<l;)s+=o(i,a);return s},RC=(e,t)=>e.type.mode===xe.Dense?VI(e,t):jI(e,t),VI=({type:e,children:t,typeIds:n,valueOffsets:r},i)=>{let o=e.typeIdToChildIndex[n[i]];return 8+kr.visit(t[o],r[i])},jI=({children:e},t)=>4+kr.visitMany(e,e.map(()=>t)).reduce(OC,0);Ri.prototype.visitUtf8=CC;Ri.prototype.visitBinary=BC;Ri.prototype.visitList=DC;Ri.prototype.visitFixedSizeList=LC;Ri.prototype.visitUnion=RC;Ri.prototype.visitDenseUnion=VI;Ri.prototype.visitSparseUnion=jI;var kr=new Ri;var YI,qI={},WI={},vt=class{constructor(t){var n,r,i;let o=t[0]instanceof vt?t.flatMap(a=>a.data):t;if(o.length===0||o.some(a=>!(a instanceof Wt)))throw new TypeError("Vector constructor expects an Array of Data instances.");let s=(n=o[0])===null||n===void 0?void 0:n.type;switch(o.length){case 0:this._offsets=[0];break;case 1:{let{get:a,set:l,indexOf:c,byteLength:u}=qI[s.typeId],d=o[0];this.isValid=f=>Ff(d,f),this.get=f=>a(d,f),this.set=(f,h)=>l(d,f,h),this.indexOf=f=>c(d,f),this.getByteLength=f=>u(d,f),this._offsets=[0,d.length];break}default:Object.setPrototypeOf(this,WI[s.typeId]),this._offsets=Fm(o);break}this.data=o,this.type=s,this.stride=Fr(s),this.numChildren=(i=(r=s.children)===null||r===void 0?void 0:r.length)!==null&&i!==void 0?i:0,this.length=this._offsets[this._offsets.length-1]}get byteLength(){return this._byteLength===-1&&(this._byteLength=this.data.reduce((t,n)=>t+n.byteLength,0)),this._byteLength}get nullCount(){return this._nullCount===-1&&(this._nullCount=Am(this.data)),this._nullCount}get ArrayType(){return this.type.ArrayType}get[Symbol.toStringTag](){return`${this.VectorName}<${this.type[Symbol.toStringTag]}>`}get VectorName(){return`${E[this.type.typeId]}Vector`}isValid(t){return!1}get(t){return null}set(t,n){}indexOf(t,n){return-1}includes(t,n){return this.indexOf(t,n)>0}getByteLength(t){return 0}[Symbol.iterator](){return dc.visit(this)}concat(...t){return new vt(this.data.concat(t.flatMap(n=>n.data).flat(Number.POSITIVE_INFINITY)))}slice(t,n){return new vt(Ef(this,t,n,({data:r,_offsets:i},o,s)=>km(r,i,o,s)))}toJSON(){return[...this]}toArray(){let{type:t,data:n,length:r,stride:i,ArrayType:o}=this;switch(t.typeId){case E.Int:case E.Float:case E.Decimal:case E.Time:case E.Timestamp:switch(n.length){case 0:return new o;case 1:return n[0].values.subarray(0,r*i);default:return n.reduce((s,{values:a})=>(s.array.set(a,s.offset),s.offset+=a.length,s),{array:new o(r*i),offset:0}).array}}return[...this]}toString(){return`[${[...this].join(",")}]`}getChild(t){var n;return this.getChildAt((n=this.type.children)===null||n===void 0?void 0:n.findIndex(r=>r.name===t))}getChildAt(t){return t>-1&&t<this.numChildren?new vt(this.data.map(({children:n})=>n[t])):null}get isMemoized(){return tt.isDictionary(this.type)?this.data[0].dictionary.isMemoized:!1}memoize(){if(tt.isDictionary(this.type)){let t=new hc(this.data[0].dictionary),n=this.data.map(r=>{let i=r.clone();return i.dictionary=t,i});return new vt(n)}return new hc(this)}unmemoize(){if(tt.isDictionary(this.type)&&this.isMemoized){let t=this.data[0].dictionary.unmemoize(),n=this.data.map(r=>{let i=r.clone();return i.dictionary=t,i});return new vt(n)}return this}};YI=Symbol.toStringTag;vt[YI]=(e=>{e.type=tt.prototype,e.data=[],e.length=0,e.stride=1,e.numChildren=0,e._nullCount=-1,e._byteLength=-1,e._offsets=new Uint32Array([0]),e[Symbol.isConcatSpreadable]=!0;let t=Object.keys(E).map(n=>E[n]).filter(n=>typeof n=="number"&&n!==E.NONE);for(let n of t){let r=Pe.getVisitFnByTypeId(n),i=wn.getVisitFnByTypeId(n),o=qa.getVisitFnByTypeId(n),s=kr.getVisitFnByTypeId(n);qI[n]={get:r,set:i,indexOf:o,byteLength:s},WI[n]=Object.create(e,{isValid:{value:Ls(Ff)},get:{value:Ls(Pe.getVisitFnByTypeId(n))},set:{value:Nm(wn.getVisitFnByTypeId(n))},indexOf:{value:Om(qa.getVisitFnByTypeId(n))},getByteLength:{value:Ls(kr.getVisitFnByTypeId(n))}})}return"Vector"})(vt.prototype);var hc=class extends vt{constructor(t){super(t.data);let n=this.get,r=this.set,i=this.slice,o=new Array(this.length);Object.defineProperty(this,"get",{value(s){let a=o[s];if(a!==void 0)return a;let l=n.call(this,s);return o[s]=l,l}}),Object.defineProperty(this,"set",{value(s,a){r.call(this,s,a),o[s]=a}}),Object.defineProperty(this,"slice",{value:(s,a)=>new hc(i.call(this,s,a))}),Object.defineProperty(this,"isMemoized",{value:!0}),Object.defineProperty(this,"unmemoize",{value:()=>new vt(this.data)}),Object.defineProperty(this,"memoize",{value:()=>this})}};function GI(e){if(!e||e.length<=0)return function(i){return!0};let t="",n=e.filter(r=>r===r);return n.length>0&&(t=`
    switch (x) {${n.map(r=>`
        case ${PC(r)}:`).join("")}
            return false;
    }`),e.length!==n.length&&(t=`if (x !== x) return false;
${t}`),new Function("x",`${t}
return true;`)}function PC(e){return typeof e!="bigint"?ci(e):Gp?`${ci(e)}n`:`"${ci(e)}"`}var B_=(e,t)=>(e*t+63&-64||64)/t,UC=(e,t=0)=>e.length>=t?e.subarray(0,t):ic(new e.constructor(t),e,0),Rs=class{constructor(t,n=1){this.buffer=t,this.stride=n,this.BYTES_PER_ELEMENT=t.BYTES_PER_ELEMENT,this.ArrayType=t.constructor,this._resize(this.length=Math.trunc(t.length/n))}get byteLength(){return Math.trunc(this.length*this.stride*this.BYTES_PER_ELEMENT)}get reservedLength(){return this.buffer.length/this.stride}get reservedByteLength(){return this.buffer.byteLength}set(t,n){return this}append(t){return this.set(this.length,t)}reserve(t){if(t>0){this.length+=t;let n=this.stride,r=this.length*n,i=this.buffer.length;r>=i&&this._resize(i===0?B_(r*1,this.BYTES_PER_ELEMENT):B_(r*2,this.BYTES_PER_ELEMENT))}return this}flush(t=this.length){t=B_(t*this.stride,this.BYTES_PER_ELEMENT);let n=UC(this.buffer,t);return this.clear(),n}clear(){return this.length=0,this._resize(0),this}_resize(t){return this.buffer=ic(new this.ArrayType(t),this.buffer)}};Rs.prototype.offset=0;var Po=class extends Rs{last(){return this.get(this.length-1)}get(t){return this.buffer[t]}set(t,n){return this.reserve(t-this.length+1),this.buffer[t*this.stride]=n,this}},pc=class extends Po{constructor(t=new Uint8Array(0)){super(t,1/8),this.numValid=0}get numInvalid(){return this.length-this.numValid}get(t){return this.buffer[t>>3]>>t%8&1}set(t,n){let{buffer:r}=this.reserve(t-this.length+1),i=t>>3,o=t%8,s=r[i]>>o&1;return n?s===0&&(r[i]|=1<<o,++this.numValid):s===1&&(r[i]&=~(1<<o),--this.numValid),this}clear(){return this.numValid=0,super.clear()}},mc=class extends Po{constructor(t=new Int32Array(1)){super(t,1)}append(t){return this.set(this.length-1,t)}set(t,n){let r=this.length-1,i=this.reserve(t-r+1).buffer;return r<t++&&i.fill(i[r],r,t),i[t]=i[t-1]+n,this}flush(t=this.length-1){return t>this.length&&this.set(t-1,0),super.flush(t+1)}};var de=class{constructor({type:t,nullValues:n}){this.length=0,this.finished=!1,this.type=t,this.children=[],this.nullValues=n,this.stride=Fr(t),this._nulls=new pc,n&&n.length>0&&(this._isValid=GI(n))}static throughNode(t){throw new Error('"throughNode" not available in this environment')}static throughDOM(t){throw new Error('"throughDOM" not available in this environment')}toVector(){return new vt([this.flush()])}get ArrayType(){return this.type.ArrayType}get nullCount(){return this._nulls.numInvalid}get numChildren(){return this.children.length}get byteLength(){let t=0,{_offsets:n,_values:r,_nulls:i,_typeIds:o,children:s}=this;return n&&(t+=n.byteLength),r&&(t+=r.byteLength),i&&(t+=i.byteLength),o&&(t+=o.byteLength),s.reduce((a,l)=>a+l.byteLength,t)}get reservedLength(){return this._nulls.reservedLength}get reservedByteLength(){let t=0;return this._offsets&&(t+=this._offsets.reservedByteLength),this._values&&(t+=this._values.reservedByteLength),this._nulls&&(t+=this._nulls.reservedByteLength),this._typeIds&&(t+=this._typeIds.reservedByteLength),this.children.reduce((n,r)=>n+r.reservedByteLength,t)}get valueOffsets(){return this._offsets?this._offsets.buffer:null}get values(){return this._values?this._values.buffer:null}get nullBitmap(){return this._nulls?this._nulls.buffer:null}get typeIds(){return this._typeIds?this._typeIds.buffer:null}append(t){return this.set(this.length,t)}isValid(t){return this._isValid(t)}set(t,n){return this.setValid(t,this.isValid(n))&&this.setValue(t,n),this}setValue(t,n){this._setValue(this,t,n)}setValid(t,n){return this.length=this._nulls.set(t,+n).length,n}addChild(t,n=`${this.numChildren}`){throw new Error(`Cannot append children to non-nested type "${this.type}"`)}getChildAt(t){return this.children[t]||null}flush(){let t,n,r,i,{type:o,length:s,nullCount:a,_typeIds:l,_offsets:c,_values:u,_nulls:d}=this;(n=l?.flush(s))?i=c?.flush(s):(i=c?.flush(s))?t=u?.flush(c.last()):t=u?.flush(s),a>0&&(r=d?.flush(s));let f=this.children.map(h=>h.flush());return this.clear(),Tt({type:o,length:s,nullCount:a,children:f,child:f[0],data:t,typeIds:n,nullBitmap:r,valueOffsets:i})}finish(){this.finished=!0;for(let t of this.children)t.finish();return this}clear(){var t,n,r,i;this.length=0,(t=this._nulls)===null||t===void 0||t.clear(),(n=this._values)===null||n===void 0||n.clear(),(r=this._offsets)===null||r===void 0||r.clear(),(i=this._typeIds)===null||i===void 0||i.clear();for(let o of this.children)o.clear();return this}};de.prototype.length=1;de.prototype.stride=1;de.prototype.children=null;de.prototype.finished=!1;de.prototype.nullValues=null;de.prototype._isValid=()=>!0;var nn=class extends de{constructor(t){super(t),this._values=new Po(new this.ArrayType(0),this.stride)}setValue(t,n){let r=this._values;return r.reserve(t-r.length+1),super.setValue(t,n)}},Pi=class extends de{constructor(t){super(t),this._pendingLength=0,this._offsets=new mc}setValue(t,n){let r=this._pending||(this._pending=new Map),i=r.get(t);i&&(this._pendingLength-=i.length),this._pendingLength+=n instanceof Li?n[Yr].length:n.length,r.set(t,n)}setValid(t,n){return super.setValid(t,n)?!0:((this._pending||(this._pending=new Map)).set(t,void 0),!1)}clear(){return this._pendingLength=0,this._pending=void 0,super.clear()}flush(){return this._flush(),super.flush()}finish(){return this._flush(),super.finish()}_flush(){let t=this._pending,n=this._pendingLength;return this._pendingLength=0,this._pending=void 0,t&&t.size>0&&this._flushPending(t,n),this}};var Wa=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,n){return this.bb_pos=t,this.bb=n,this}offset(){return this.bb.readInt64(this.bb_pos)}metaDataLength(){return this.bb.readInt32(this.bb_pos+8)}bodyLength(){return this.bb.readInt64(this.bb_pos+16)}static sizeOf(){return 24}static createBlock(t,n,r,i){return t.prep(8,24),t.writeInt64(i),t.pad(4),t.writeInt32(r),t.writeInt64(n),t.offset()}};var Ui=new Int32Array(2),Cm=new Float32Array(Ui.buffer),Bm=new Float64Array(Ui.buffer),yc=new Uint16Array(new Uint8Array([1,0]).buffer)[0]===1;var Ue=class{constructor(t,n){this.low=t|0,this.high=n|0}static create(t,n){return t==0&&n==0?Ue.ZERO:new Ue(t,n)}toFloat64(){return(this.low>>>0)+this.high*4294967296}equals(t){return this.low==t.low&&this.high==t.high}};Ue.ZERO=new Ue(0,0);var kf;(function(e){e[e.UTF8_BYTES=1]="UTF8_BYTES",e[e.UTF16_STRING=2]="UTF16_STRING"})(kf||(kf={}));var Hn=class{constructor(t){this.bytes_=t,this.position_=0}static allocate(t){return new Hn(new Uint8Array(t))}clear(){this.position_=0}bytes(){return this.bytes_}position(){return this.position_}setPosition(t){this.position_=t}capacity(){return this.bytes_.length}readInt8(t){return this.readUint8(t)<<24>>24}readUint8(t){return this.bytes_[t]}readInt16(t){return this.readUint16(t)<<16>>16}readUint16(t){return this.bytes_[t]|this.bytes_[t+1]<<8}readInt32(t){return this.bytes_[t]|this.bytes_[t+1]<<8|this.bytes_[t+2]<<16|this.bytes_[t+3]<<24}readUint32(t){return this.readInt32(t)>>>0}readInt64(t){return new Ue(this.readInt32(t),this.readInt32(t+4))}readUint64(t){return new Ue(this.readUint32(t),this.readUint32(t+4))}readFloat32(t){return Ui[0]=this.readInt32(t),Cm[0]}readFloat64(t){return Ui[yc?0:1]=this.readInt32(t),Ui[yc?1:0]=this.readInt32(t+4),Bm[0]}writeInt8(t,n){this.bytes_[t]=n}writeUint8(t,n){this.bytes_[t]=n}writeInt16(t,n){this.bytes_[t]=n,this.bytes_[t+1]=n>>8}writeUint16(t,n){this.bytes_[t]=n,this.bytes_[t+1]=n>>8}writeInt32(t,n){this.bytes_[t]=n,this.bytes_[t+1]=n>>8,this.bytes_[t+2]=n>>16,this.bytes_[t+3]=n>>24}writeUint32(t,n){this.bytes_[t]=n,this.bytes_[t+1]=n>>8,this.bytes_[t+2]=n>>16,this.bytes_[t+3]=n>>24}writeInt64(t,n){this.writeInt32(t,n.low),this.writeInt32(t+4,n.high)}writeUint64(t,n){this.writeUint32(t,n.low),this.writeUint32(t+4,n.high)}writeFloat32(t,n){Cm[0]=n,this.writeInt32(t,Ui[0])}writeFloat64(t,n){Bm[0]=n,this.writeInt32(t,Ui[yc?0:1]),this.writeInt32(t+4,Ui[yc?1:0])}getBufferIdentifier(){if(this.bytes_.length<this.position_+4+4)throw new Error("FlatBuffers: ByteBuffer is too short to contain an identifier.");let t="";for(let n=0;n<4;n++)t+=String.fromCharCode(this.readInt8(this.position_+4+n));return t}__offset(t,n){let r=t-this.readInt32(t);return n<this.readInt16(r)?this.readInt16(r+n):0}__union(t,n){return t.bb_pos=n+this.readInt32(n),t.bb=this,t}__string(t,n){t+=this.readInt32(t);let r=this.readInt32(t),i="",o=0;if(t+=4,n===kf.UTF8_BYTES)return this.bytes_.subarray(t,t+r);for(;o<r;){let s,a=this.readUint8(t+o++);if(a<192)s=a;else{let l=this.readUint8(t+o++);if(a<224)s=(a&31)<<6|l&63;else{let c=this.readUint8(t+o++);if(a<240)s=(a&15)<<12|(l&63)<<6|c&63;else{let u=this.readUint8(t+o++);s=(a&7)<<18|(l&63)<<12|(c&63)<<6|u&63}}}s<65536?i+=String.fromCharCode(s):(s-=65536,i+=String.fromCharCode((s>>10)+55296,(s&(1<<10)-1)+56320))}return i}__union_with_string(t,n){return typeof t=="string"?this.__string(n):this.__union(t,n)}__indirect(t){return t+this.readInt32(t)}__vector(t){return t+this.readInt32(t)+4}__vector_len(t){return this.readInt32(t+this.readInt32(t))}__has_identifier(t){if(t.length!=4)throw new Error("FlatBuffers: file identifier must be length "+4);for(let n=0;n<4;n++)if(t.charCodeAt(n)!=this.readInt8(this.position()+4+n))return!1;return!0}createLong(t,n){return Ue.create(t,n)}createScalarList(t,n){let r=[];for(let i=0;i<n;++i)t(i)!==null&&r.push(t(i));return r}createObjList(t,n){let r=[];for(let i=0;i<n;++i){let o=t(i);o!==null&&r.push(o.unpack())}return r}};var Uo=class{constructor(t){this.minalign=1,this.vtable=null,this.vtable_in_use=0,this.isNested=!1,this.object_start=0,this.vtables=[],this.vector_num_elems=0,this.force_defaults=!1,this.string_maps=null;let n;t?n=t:n=1024,this.bb=Hn.allocate(n),this.space=n}clear(){this.bb.clear(),this.space=this.bb.capacity(),this.minalign=1,this.vtable=null,this.vtable_in_use=0,this.isNested=!1,this.object_start=0,this.vtables=[],this.vector_num_elems=0,this.force_defaults=!1,this.string_maps=null}forceDefaults(t){this.force_defaults=t}dataBuffer(){return this.bb}asUint8Array(){return this.bb.bytes().subarray(this.bb.position(),this.bb.position()+this.offset())}prep(t,n){t>this.minalign&&(this.minalign=t);let r=~(this.bb.capacity()-this.space+n)+1&t-1;for(;this.space<r+t+n;){let i=this.bb.capacity();this.bb=Uo.growByteBuffer(this.bb),this.space+=this.bb.capacity()-i}this.pad(r)}pad(t){for(let n=0;n<t;n++)this.bb.writeInt8(--this.space,0)}writeInt8(t){this.bb.writeInt8(this.space-=1,t)}writeInt16(t){this.bb.writeInt16(this.space-=2,t)}writeInt32(t){this.bb.writeInt32(this.space-=4,t)}writeInt64(t){this.bb.writeInt64(this.space-=8,t)}writeFloat32(t){this.bb.writeFloat32(this.space-=4,t)}writeFloat64(t){this.bb.writeFloat64(this.space-=8,t)}addInt8(t){this.prep(1,0),this.writeInt8(t)}addInt16(t){this.prep(2,0),this.writeInt16(t)}addInt32(t){this.prep(4,0),this.writeInt32(t)}addInt64(t){this.prep(8,0),this.writeInt64(t)}addFloat32(t){this.prep(4,0),this.writeFloat32(t)}addFloat64(t){this.prep(8,0),this.writeFloat64(t)}addFieldInt8(t,n,r){(this.force_defaults||n!=r)&&(this.addInt8(n),this.slot(t))}addFieldInt16(t,n,r){(this.force_defaults||n!=r)&&(this.addInt16(n),this.slot(t))}addFieldInt32(t,n,r){(this.force_defaults||n!=r)&&(this.addInt32(n),this.slot(t))}addFieldInt64(t,n,r){(this.force_defaults||!n.equals(r))&&(this.addInt64(n),this.slot(t))}addFieldFloat32(t,n,r){(this.force_defaults||n!=r)&&(this.addFloat32(n),this.slot(t))}addFieldFloat64(t,n,r){(this.force_defaults||n!=r)&&(this.addFloat64(n),this.slot(t))}addFieldOffset(t,n,r){(this.force_defaults||n!=r)&&(this.addOffset(n),this.slot(t))}addFieldStruct(t,n,r){n!=r&&(this.nested(n),this.slot(t))}nested(t){if(t!=this.offset())throw new Error("FlatBuffers: struct must be serialized inline.")}notNested(){if(this.isNested)throw new Error("FlatBuffers: object serialization must not be nested.")}slot(t){this.vtable!==null&&(this.vtable[t]=this.offset())}offset(){return this.bb.capacity()-this.space}static growByteBuffer(t){let n=t.capacity();if(n&3221225472)throw new Error("FlatBuffers: cannot grow buffer beyond 2 gigabytes.");let r=n<<1,i=Hn.allocate(r);return i.setPosition(r-n),i.bytes().set(t.bytes(),r-n),i}addOffset(t){this.prep(4,0),this.writeInt32(this.offset()-t+4)}startObject(t){this.notNested(),this.vtable==null&&(this.vtable=[]),this.vtable_in_use=t;for(let n=0;n<t;n++)this.vtable[n]=0;this.isNested=!0,this.object_start=this.offset()}endObject(){if(this.vtable==null||!this.isNested)throw new Error("FlatBuffers: endObject called without startObject");this.addInt32(0);let t=this.offset(),n=this.vtable_in_use-1;for(;n>=0&&this.vtable[n]==0;n--);let r=n+1;for(;n>=0;n--)this.addInt16(this.vtable[n]!=0?t-this.vtable[n]:0);let i=2;this.addInt16(t-this.object_start);let o=(r+i)*2;this.addInt16(o);let s=0,a=this.space;t:for(n=0;n<this.vtables.length;n++){let l=this.bb.capacity()-this.vtables[n];if(o==this.bb.readInt16(l)){for(let c=2;c<o;c+=2)if(this.bb.readInt16(a+c)!=this.bb.readInt16(l+c))continue t;s=this.vtables[n];break}}return s?(this.space=this.bb.capacity()-t,this.bb.writeInt32(this.space,s-t)):(this.vtables.push(this.offset()),this.bb.writeInt32(this.bb.capacity()-t,this.offset()-t)),this.isNested=!1,t}finish(t,n,r){let i=r?4:0;if(n){let o=n;if(this.prep(this.minalign,4+4+i),o.length!=4)throw new Error("FlatBuffers: file identifier must be length "+4);for(let s=4-1;s>=0;s--)this.writeInt8(o.charCodeAt(s))}this.prep(this.minalign,4+i),this.addOffset(t),i&&this.addInt32(this.bb.capacity()-this.space),this.bb.setPosition(this.space)}finishSizePrefixed(t,n){this.finish(t,n,!0)}requiredField(t,n){let r=this.bb.capacity()-t,i=r-this.bb.readInt32(r);if(!(this.bb.readInt16(i+n)!=0))throw new Error("FlatBuffers: field "+n+" must be set")}startVector(t,n,r){this.notNested(),this.vector_num_elems=n,this.prep(4,t*n),this.prep(r,t*n)}endVector(){return this.writeInt32(this.vector_num_elems),this.offset()}createSharedString(t){if(!t)return 0;if(this.string_maps||(this.string_maps=new Map),this.string_maps.has(t))return this.string_maps.get(t);let n=this.createString(t);return this.string_maps.set(t,n),n}createString(t){if(!t)return 0;let n;if(t instanceof Uint8Array)n=t;else{n=[];let r=0;for(;r<t.length;){let i,o=t.charCodeAt(r++);if(o<55296||o>=56320)i=o;else{let s=t.charCodeAt(r++);i=(o<<10)+s+(65536-(55296<<10)-56320)}i<128?n.push(i):(i<2048?n.push(i>>6&31|192):(i<65536?n.push(i>>12&15|224):n.push(i>>18&7|240,i>>12&63|128),n.push(i>>6&63|128)),n.push(i&63|128))}}this.addInt8(0),this.startVector(1,n.length,1),this.bb.setPosition(this.space-=n.length);for(let r=0,i=this.space,o=this.bb.bytes();r<n.length;r++)o[i++]=n[r];return this.endVector()}createLong(t,n){return Ue.create(t,n)}createObjectOffset(t){return t===null?0:typeof t=="string"?this.createString(t):t.pack(this)}createObjectOffsetList(t){let n=[];for(let r=0;r<t.length;++r){let i=t[r];if(i!==null)n.push(this.createObjectOffset(i));else throw new Error("FlatBuffers: Argument for createObjectOffsetList cannot contain null.")}return n}createStructOffsetList(t,n){return n(this,t.length),this.createObjectOffsetList(t),this.endVector()}};var ce=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,n){return this.bb_pos=t,this.bb=n,this}static getRootAsKeyValue(t,n){return(n||new ce).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsKeyValue(t,n){return t.setPosition(t.position()+4),(n||new ce).__init(t.readInt32(t.position())+t.position(),t)}key(t){let n=this.bb.__offset(this.bb_pos,4);return n?this.bb.__string(this.bb_pos+n,t):null}value(t){let n=this.bb.__offset(this.bb_pos,6);return n?this.bb.__string(this.bb_pos+n,t):null}static startKeyValue(t){t.startObject(2)}static addKey(t,n){t.addFieldOffset(0,n,0)}static addValue(t,n){t.addFieldOffset(1,n,0)}static endKeyValue(t){return t.endObject()}static createKeyValue(t,n,r){return ce.startKeyValue(t),ce.addKey(t,n),ce.addValue(t,r),ce.endKeyValue(t)}};var Ps;(function(e){e[e.V1=0]="V1",e[e.V2=1]="V2",e[e.V3=2]="V3",e[e.V4=3]="V4",e[e.V5=4]="V5"})(Ps||(Ps={}));var Us;(function(e){e[e.Little=0]="Little",e[e.Big=1]="Big"})(Us||(Us={}));var Nf;(function(e){e[e.DenseArray=0]="DenseArray"})(Nf||(Nf={}));var rn=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,n){return this.bb_pos=t,this.bb=n,this}static getRootAsInt(t,n){return(n||new rn).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsInt(t,n){return t.setPosition(t.position()+4),(n||new rn).__init(t.readInt32(t.position())+t.position(),t)}bitWidth(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt32(this.bb_pos+t):0}isSigned(){let t=this.bb.__offset(this.bb_pos,6);return t?!!this.bb.readInt8(this.bb_pos+t):!1}static startInt(t){t.startObject(2)}static addBitWidth(t,n){t.addFieldInt32(0,n,0)}static addIsSigned(t,n){t.addFieldInt8(1,+n,0)}static endInt(t){return t.endObject()}static createInt(t,n,r){return rn.startInt(t),rn.addBitWidth(t,n),rn.addIsSigned(t,r),rn.endInt(t)}};var Nr=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,n){return this.bb_pos=t,this.bb=n,this}static getRootAsDictionaryEncoding(t,n){return(n||new Nr).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsDictionaryEncoding(t,n){return t.setPosition(t.position()+4),(n||new Nr).__init(t.readInt32(t.position())+t.position(),t)}id(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt64(this.bb_pos+t):this.bb.createLong(0,0)}indexType(t){let n=this.bb.__offset(this.bb_pos,6);return n?(t||new rn).__init(this.bb.__indirect(this.bb_pos+n),this.bb):null}isOrdered(){let t=this.bb.__offset(this.bb_pos,8);return t?!!this.bb.readInt8(this.bb_pos+t):!1}dictionaryKind(){let t=this.bb.__offset(this.bb_pos,10);return t?this.bb.readInt16(this.bb_pos+t):Nf.DenseArray}static startDictionaryEncoding(t){t.startObject(4)}static addId(t,n){t.addFieldInt64(0,n,t.createLong(0,0))}static addIndexType(t,n){t.addFieldOffset(1,n,0)}static addIsOrdered(t,n){t.addFieldInt8(2,+n,0)}static addDictionaryKind(t,n){t.addFieldInt16(3,n,Nf.DenseArray)}static endDictionaryEncoding(t){return t.endObject()}};var $i=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,n){return this.bb_pos=t,this.bb=n,this}static getRootAsBinary(t,n){return(n||new $i).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsBinary(t,n){return t.setPosition(t.position()+4),(n||new $i).__init(t.readInt32(t.position())+t.position(),t)}static startBinary(t){t.startObject(0)}static endBinary(t){return t.endObject()}static createBinary(t){return $i.startBinary(t),$i.endBinary(t)}};var zi=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,n){return this.bb_pos=t,this.bb=n,this}static getRootAsBool(t,n){return(n||new zi).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsBool(t,n){return t.setPosition(t.position()+4),(n||new zi).__init(t.readInt32(t.position())+t.position(),t)}static startBool(t){t.startObject(0)}static endBool(t){return t.endObject()}static createBool(t){return zi.startBool(t),zi.endBool(t)}};var Of;(function(e){e[e.DAY=0]="DAY",e[e.MILLISECOND=1]="MILLISECOND"})(Of||(Of={}));var mr=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,n){return this.bb_pos=t,this.bb=n,this}static getRootAsDate(t,n){return(n||new mr).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsDate(t,n){return t.setPosition(t.position()+4),(n||new mr).__init(t.readInt32(t.position())+t.position(),t)}unit(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt16(this.bb_pos+t):Of.MILLISECOND}static startDate(t){t.startObject(1)}static addUnit(t,n){t.addFieldInt16(0,n,Of.MILLISECOND)}static endDate(t){return t.endObject()}static createDate(t,n){return mr.startDate(t),mr.addUnit(t,n),mr.endDate(t)}};var on=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,n){return this.bb_pos=t,this.bb=n,this}static getRootAsDecimal(t,n){return(n||new on).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsDecimal(t,n){return t.setPosition(t.position()+4),(n||new on).__init(t.readInt32(t.position())+t.position(),t)}precision(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt32(this.bb_pos+t):0}scale(){let t=this.bb.__offset(this.bb_pos,6);return t?this.bb.readInt32(this.bb_pos+t):0}bitWidth(){let t=this.bb.__offset(this.bb_pos,8);return t?this.bb.readInt32(this.bb_pos+t):128}static startDecimal(t){t.startObject(3)}static addPrecision(t,n){t.addFieldInt32(0,n,0)}static addScale(t,n){t.addFieldInt32(1,n,0)}static addBitWidth(t,n){t.addFieldInt32(2,n,128)}static endDecimal(t){return t.endObject()}static createDecimal(t,n,r,i){return on.startDecimal(t),on.addPrecision(t,n),on.addScale(t,r),on.addBitWidth(t,i),on.endDecimal(t)}};var $s;(function(e){e[e.SECOND=0]="SECOND",e[e.MILLISECOND=1]="MILLISECOND",e[e.MICROSECOND=2]="MICROSECOND",e[e.NANOSECOND=3]="NANOSECOND"})($s||($s={}));var yr=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,n){return this.bb_pos=t,this.bb=n,this}static getRootAsFixedSizeBinary(t,n){return(n||new yr).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsFixedSizeBinary(t,n){return t.setPosition(t.position()+4),(n||new yr).__init(t.readInt32(t.position())+t.position(),t)}byteWidth(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt32(this.bb_pos+t):0}static startFixedSizeBinary(t){t.startObject(1)}static addByteWidth(t,n){t.addFieldInt32(0,n,0)}static endFixedSizeBinary(t){return t.endObject()}static createFixedSizeBinary(t,n){return yr.startFixedSizeBinary(t),yr.addByteWidth(t,n),yr.endFixedSizeBinary(t)}};var gr=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,n){return this.bb_pos=t,this.bb=n,this}static getRootAsFixedSizeList(t,n){return(n||new gr).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsFixedSizeList(t,n){return t.setPosition(t.position()+4),(n||new gr).__init(t.readInt32(t.position())+t.position(),t)}listSize(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt32(this.bb_pos+t):0}static startFixedSizeList(t){t.startObject(1)}static addListSize(t,n){t.addFieldInt32(0,n,0)}static endFixedSizeList(t){return t.endObject()}static createFixedSizeList(t,n){return gr.startFixedSizeList(t),gr.addListSize(t,n),gr.endFixedSizeList(t)}};var Cf;(function(e){e[e.HALF=0]="HALF",e[e.SINGLE=1]="SINGLE",e[e.DOUBLE=2]="DOUBLE"})(Cf||(Cf={}));var br=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,n){return this.bb_pos=t,this.bb=n,this}static getRootAsFloatingPoint(t,n){return(n||new br).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsFloatingPoint(t,n){return t.setPosition(t.position()+4),(n||new br).__init(t.readInt32(t.position())+t.position(),t)}precision(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt16(this.bb_pos+t):Cf.HALF}static startFloatingPoint(t){t.startObject(1)}static addPrecision(t,n){t.addFieldInt16(0,n,Cf.HALF)}static endFloatingPoint(t){return t.endObject()}static createFloatingPoint(t,n){return br.startFloatingPoint(t),br.addPrecision(t,n),br.endFloatingPoint(t)}};var Bf;(function(e){e[e.YEAR_MONTH=0]="YEAR_MONTH",e[e.DAY_TIME=1]="DAY_TIME",e[e.MONTH_DAY_NANO=2]="MONTH_DAY_NANO"})(Bf||(Bf={}));var _r=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,n){return this.bb_pos=t,this.bb=n,this}static getRootAsInterval(t,n){return(n||new _r).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsInterval(t,n){return t.setPosition(t.position()+4),(n||new _r).__init(t.readInt32(t.position())+t.position(),t)}unit(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt16(this.bb_pos+t):Bf.YEAR_MONTH}static startInterval(t){t.startObject(1)}static addUnit(t,n){t.addFieldInt16(0,n,Bf.YEAR_MONTH)}static endInterval(t){return t.endObject()}static createInterval(t,n){return _r.startInterval(t),_r.addUnit(t,n),_r.endInterval(t)}};var Vi=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,n){return this.bb_pos=t,this.bb=n,this}static getRootAsList(t,n){return(n||new Vi).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsList(t,n){return t.setPosition(t.position()+4),(n||new Vi).__init(t.readInt32(t.position())+t.position(),t)}static startList(t){t.startObject(0)}static endList(t){return t.endObject()}static createList(t){return Vi.startList(t),Vi.endList(t)}};var xr=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,n){return this.bb_pos=t,this.bb=n,this}static getRootAsMap(t,n){return(n||new xr).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsMap(t,n){return t.setPosition(t.position()+4),(n||new xr).__init(t.readInt32(t.position())+t.position(),t)}keysSorted(){let t=this.bb.__offset(this.bb_pos,4);return t?!!this.bb.readInt8(this.bb_pos+t):!1}static startMap(t){t.startObject(1)}static addKeysSorted(t,n){t.addFieldInt8(0,+n,0)}static endMap(t){return t.endObject()}static createMap(t,n){return xr.startMap(t),xr.addKeysSorted(t,n),xr.endMap(t)}};var ji=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,n){return this.bb_pos=t,this.bb=n,this}static getRootAsNull(t,n){return(n||new ji).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsNull(t,n){return t.setPosition(t.position()+4),(n||new ji).__init(t.readInt32(t.position())+t.position(),t)}static startNull(t){t.startObject(0)}static endNull(t){return t.endObject()}static createNull(t){return ji.startNull(t),ji.endNull(t)}};var Yi=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,n){return this.bb_pos=t,this.bb=n,this}static getRootAsStruct_(t,n){return(n||new Yi).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsStruct_(t,n){return t.setPosition(t.position()+4),(n||new Yi).__init(t.readInt32(t.position())+t.position(),t)}static startStruct_(t){t.startObject(0)}static endStruct_(t){return t.endObject()}static createStruct_(t){return Yi.startStruct_(t),Yi.endStruct_(t)}};var Bn=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,n){return this.bb_pos=t,this.bb=n,this}static getRootAsTime(t,n){return(n||new Bn).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsTime(t,n){return t.setPosition(t.position()+4),(n||new Bn).__init(t.readInt32(t.position())+t.position(),t)}unit(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt16(this.bb_pos+t):$s.MILLISECOND}bitWidth(){let t=this.bb.__offset(this.bb_pos,6);return t?this.bb.readInt32(this.bb_pos+t):32}static startTime(t){t.startObject(2)}static addUnit(t,n){t.addFieldInt16(0,n,$s.MILLISECOND)}static addBitWidth(t,n){t.addFieldInt32(1,n,32)}static endTime(t){return t.endObject()}static createTime(t,n,r){return Bn.startTime(t),Bn.addUnit(t,n),Bn.addBitWidth(t,r),Bn.endTime(t)}};var Dn=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,n){return this.bb_pos=t,this.bb=n,this}static getRootAsTimestamp(t,n){return(n||new Dn).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsTimestamp(t,n){return t.setPosition(t.position()+4),(n||new Dn).__init(t.readInt32(t.position())+t.position(),t)}unit(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt16(this.bb_pos+t):$s.SECOND}timezone(t){let n=this.bb.__offset(this.bb_pos,6);return n?this.bb.__string(this.bb_pos+n,t):null}static startTimestamp(t){t.startObject(2)}static addUnit(t,n){t.addFieldInt16(0,n,$s.SECOND)}static addTimezone(t,n){t.addFieldOffset(1,n,0)}static endTimestamp(t){return t.endObject()}static createTimestamp(t,n,r){return Dn.startTimestamp(t),Dn.addUnit(t,n),Dn.addTimezone(t,r),Dn.endTimestamp(t)}};var Df;(function(e){e[e.Sparse=0]="Sparse",e[e.Dense=1]="Dense"})(Df||(Df={}));var sn=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,n){return this.bb_pos=t,this.bb=n,this}static getRootAsUnion(t,n){return(n||new sn).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsUnion(t,n){return t.setPosition(t.position()+4),(n||new sn).__init(t.readInt32(t.position())+t.position(),t)}mode(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt16(this.bb_pos+t):Df.Sparse}typeIds(t){let n=this.bb.__offset(this.bb_pos,6);return n?this.bb.readInt32(this.bb.__vector(this.bb_pos+n)+t*4):0}typeIdsLength(){let t=this.bb.__offset(this.bb_pos,6);return t?this.bb.__vector_len(this.bb_pos+t):0}typeIdsArray(){let t=this.bb.__offset(this.bb_pos,6);return t?new Int32Array(this.bb.bytes().buffer,this.bb.bytes().byteOffset+this.bb.__vector(this.bb_pos+t),this.bb.__vector_len(this.bb_pos+t)):null}static startUnion(t){t.startObject(2)}static addMode(t,n){t.addFieldInt16(0,n,Df.Sparse)}static addTypeIds(t,n){t.addFieldOffset(1,n,0)}static createTypeIdsVector(t,n){t.startVector(4,n.length,4);for(let r=n.length-1;r>=0;r--)t.addInt32(n[r]);return t.endVector()}static startTypeIdsVector(t,n){t.startVector(4,n,4)}static endUnion(t){return t.endObject()}static createUnion(t,n,r){return sn.startUnion(t),sn.addMode(t,n),sn.addTypeIds(t,r),sn.endUnion(t)}};var qi=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,n){return this.bb_pos=t,this.bb=n,this}static getRootAsUtf8(t,n){return(n||new qi).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsUtf8(t,n){return t.setPosition(t.position()+4),(n||new qi).__init(t.readInt32(t.position())+t.position(),t)}static startUtf8(t){t.startObject(0)}static endUtf8(t){return t.endObject()}static createUtf8(t){return qi.startUtf8(t),qi.endUtf8(t)}};var he;(function(e){e[e.NONE=0]="NONE",e[e.Null=1]="Null",e[e.Int=2]="Int",e[e.FloatingPoint=3]="FloatingPoint",e[e.Binary=4]="Binary",e[e.Utf8=5]="Utf8",e[e.Bool=6]="Bool",e[e.Decimal=7]="Decimal",e[e.Date=8]="Date",e[e.Time=9]="Time",e[e.Timestamp=10]="Timestamp",e[e.Interval=11]="Interval",e[e.List=12]="List",e[e.Struct_=13]="Struct_",e[e.Union=14]="Union",e[e.FixedSizeBinary=15]="FixedSizeBinary",e[e.FixedSizeList=16]="FixedSizeList",e[e.Map=17]="Map",e[e.Duration=18]="Duration",e[e.LargeBinary=19]="LargeBinary",e[e.LargeUtf8=20]="LargeUtf8",e[e.LargeList=21]="LargeList"})(he||(he={}));var $e=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,n){return this.bb_pos=t,this.bb=n,this}static getRootAsField(t,n){return(n||new $e).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsField(t,n){return t.setPosition(t.position()+4),(n||new $e).__init(t.readInt32(t.position())+t.position(),t)}name(t){let n=this.bb.__offset(this.bb_pos,4);return n?this.bb.__string(this.bb_pos+n,t):null}nullable(){let t=this.bb.__offset(this.bb_pos,6);return t?!!this.bb.readInt8(this.bb_pos+t):!1}typeType(){let t=this.bb.__offset(this.bb_pos,8);return t?this.bb.readUint8(this.bb_pos+t):he.NONE}type(t){let n=this.bb.__offset(this.bb_pos,10);return n?this.bb.__union(t,this.bb_pos+n):null}dictionary(t){let n=this.bb.__offset(this.bb_pos,12);return n?(t||new Nr).__init(this.bb.__indirect(this.bb_pos+n),this.bb):null}children(t,n){let r=this.bb.__offset(this.bb_pos,14);return r?(n||new $e).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos+r)+t*4),this.bb):null}childrenLength(){let t=this.bb.__offset(this.bb_pos,14);return t?this.bb.__vector_len(this.bb_pos+t):0}customMetadata(t,n){let r=this.bb.__offset(this.bb_pos,16);return r?(n||new ce).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos+r)+t*4),this.bb):null}customMetadataLength(){let t=this.bb.__offset(this.bb_pos,16);return t?this.bb.__vector_len(this.bb_pos+t):0}static startField(t){t.startObject(7)}static addName(t,n){t.addFieldOffset(0,n,0)}static addNullable(t,n){t.addFieldInt8(1,+n,0)}static addTypeType(t,n){t.addFieldInt8(2,n,he.NONE)}static addType(t,n){t.addFieldOffset(3,n,0)}static addDictionary(t,n){t.addFieldOffset(4,n,0)}static addChildren(t,n){t.addFieldOffset(5,n,0)}static createChildrenVector(t,n){t.startVector(4,n.length,4);for(let r=n.length-1;r>=0;r--)t.addOffset(n[r]);return t.endVector()}static startChildrenVector(t,n){t.startVector(4,n,4)}static addCustomMetadata(t,n){t.addFieldOffset(6,n,0)}static createCustomMetadataVector(t,n){t.startVector(4,n.length,4);for(let r=n.length-1;r>=0;r--)t.addOffset(n[r]);return t.endVector()}static startCustomMetadataVector(t,n){t.startVector(4,n,4)}static endField(t){return t.endObject()}};var we=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,n){return this.bb_pos=t,this.bb=n,this}static getRootAsSchema(t,n){return(n||new we).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsSchema(t,n){return t.setPosition(t.position()+4),(n||new we).__init(t.readInt32(t.position())+t.position(),t)}endianness(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt16(this.bb_pos+t):Us.Little}fields(t,n){let r=this.bb.__offset(this.bb_pos,6);return r?(n||new $e).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos+r)+t*4),this.bb):null}fieldsLength(){let t=this.bb.__offset(this.bb_pos,6);return t?this.bb.__vector_len(this.bb_pos+t):0}customMetadata(t,n){let r=this.bb.__offset(this.bb_pos,8);return r?(n||new ce).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos+r)+t*4),this.bb):null}customMetadataLength(){let t=this.bb.__offset(this.bb_pos,8);return t?this.bb.__vector_len(this.bb_pos+t):0}features(t){let n=this.bb.__offset(this.bb_pos,10);return n?this.bb.readInt64(this.bb.__vector(this.bb_pos+n)+t*8):this.bb.createLong(0,0)}featuresLength(){let t=this.bb.__offset(this.bb_pos,10);return t?this.bb.__vector_len(this.bb_pos+t):0}static startSchema(t){t.startObject(4)}static addEndianness(t,n){t.addFieldInt16(0,n,Us.Little)}static addFields(t,n){t.addFieldOffset(1,n,0)}static createFieldsVector(t,n){t.startVector(4,n.length,4);for(let r=n.length-1;r>=0;r--)t.addOffset(n[r]);return t.endVector()}static startFieldsVector(t,n){t.startVector(4,n,4)}static addCustomMetadata(t,n){t.addFieldOffset(2,n,0)}static createCustomMetadataVector(t,n){t.startVector(4,n.length,4);for(let r=n.length-1;r>=0;r--)t.addOffset(n[r]);return t.endVector()}static startCustomMetadataVector(t,n){t.startVector(4,n,4)}static addFeatures(t,n){t.addFieldOffset(3,n,0)}static createFeaturesVector(t,n){t.startVector(8,n.length,8);for(let r=n.length-1;r>=0;r--)t.addInt64(n[r]);return t.endVector()}static startFeaturesVector(t,n){t.startVector(8,n,8)}static endSchema(t){return t.endObject()}static finishSchemaBuffer(t,n){t.finish(n)}static finishSizePrefixedSchemaBuffer(t,n){t.finish(n,void 0,!0)}static createSchema(t,n,r,i,o){return we.startSchema(t),we.addEndianness(t,n),we.addFields(t,r),we.addCustomMetadata(t,i),we.addFeatures(t,o),we.endSchema(t)}};var Ln=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,n){return this.bb_pos=t,this.bb=n,this}static getRootAsFooter(t,n){return(n||new Ln).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsFooter(t,n){return t.setPosition(t.position()+4),(n||new Ln).__init(t.readInt32(t.position())+t.position(),t)}version(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt16(this.bb_pos+t):Ps.V1}schema(t){let n=this.bb.__offset(this.bb_pos,6);return n?(t||new we).__init(this.bb.__indirect(this.bb_pos+n),this.bb):null}dictionaries(t,n){let r=this.bb.__offset(this.bb_pos,8);return r?(n||new Wa).__init(this.bb.__vector(this.bb_pos+r)+t*24,this.bb):null}dictionariesLength(){let t=this.bb.__offset(this.bb_pos,8);return t?this.bb.__vector_len(this.bb_pos+t):0}recordBatches(t,n){let r=this.bb.__offset(this.bb_pos,10);return r?(n||new Wa).__init(this.bb.__vector(this.bb_pos+r)+t*24,this.bb):null}recordBatchesLength(){let t=this.bb.__offset(this.bb_pos,10);return t?this.bb.__vector_len(this.bb_pos+t):0}customMetadata(t,n){let r=this.bb.__offset(this.bb_pos,12);return r?(n||new ce).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos+r)+t*4),this.bb):null}customMetadataLength(){let t=this.bb.__offset(this.bb_pos,12);return t?this.bb.__vector_len(this.bb_pos+t):0}static startFooter(t){t.startObject(5)}static addVersion(t,n){t.addFieldInt16(0,n,Ps.V1)}static addSchema(t,n){t.addFieldOffset(1,n,0)}static addDictionaries(t,n){t.addFieldOffset(2,n,0)}static startDictionariesVector(t,n){t.startVector(24,n,8)}static addRecordBatches(t,n){t.addFieldOffset(3,n,0)}static startRecordBatchesVector(t,n){t.startVector(24,n,8)}static addCustomMetadata(t,n){t.addFieldOffset(4,n,0)}static createCustomMetadataVector(t,n){t.startVector(4,n.length,4);for(let r=n.length-1;r>=0;r--)t.addOffset(n[r]);return t.endVector()}static startCustomMetadataVector(t,n){t.startVector(4,n,4)}static endFooter(t){return t.endObject()}static finishFooterBuffer(t,n){t.finish(n)}static finishSizePrefixedFooterBuffer(t,n){t.finish(n,void 0,!0)}};var Rt=class{constructor(t=[],n,r){this.fields=t||[],this.metadata=n||new Map,r||(r=D_(t)),this.dictionaries=r}get[Symbol.toStringTag](){return"Schema"}get names(){return this.fields.map(t=>t.name)}toString(){return`Schema<{ ${this.fields.map((t,n)=>`${n}: ${t}`).join(", ")} }>`}select(t){let n=new Set(t),r=this.fields.filter(i=>n.has(i.name));return new Rt(r,this.metadata)}selectAt(t){let n=t.map(r=>this.fields[r]).filter(Boolean);return new Rt(n,this.metadata)}assign(...t){let n=t[0]instanceof Rt?t[0]:Array.isArray(t[0])?new Rt(t[0]):new Rt(t),r=[...this.fields],i=Lm(Lm(new Map,this.metadata),n.metadata),o=n.fields.filter(a=>{let l=r.findIndex(c=>c.name===a.name);return~l?(r[l]=a.clone({metadata:Lm(Lm(new Map,r[l].metadata),a.metadata)}))&&!1:!0}),s=D_(o,new Map);return new Rt([...r,...o],i,new Map([...this.dictionaries,...s]))}};Rt.prototype.fields=null;Rt.prototype.metadata=null;Rt.prototype.dictionaries=null;var At=class{constructor(t,n,r=!1,i){this.name=t,this.type=n,this.nullable=r,this.metadata=i||new Map}static new(...t){let[n,r,i,o]=t;return t[0]&&typeof t[0]=="object"&&({name:n}=t[0],r===void 0&&(r=t[0].type),i===void 0&&(i=t[0].nullable),o===void 0&&(o=t[0].metadata)),new At(`${n}`,r,i,o)}get typeId(){return this.type.typeId}get[Symbol.toStringTag](){return"Field"}toString(){return`${this.name}: ${this.type}`}clone(...t){let[n,r,i,o]=t;return!t[0]||typeof t[0]!="object"?[n=this.name,r=this.type,i=this.nullable,o=this.metadata]=t:{name:n=this.name,type:r=this.type,nullable:i=this.nullable,metadata:o=this.metadata}=t[0],At.new(n,r,i,o)}};At.prototype.type=null;At.prototype.name=null;At.prototype.nullable=null;At.prototype.metadata=null;function Lm(e,t){return new Map([...e||new Map,...t||new Map])}function D_(e,t=new Map){for(let n=-1,r=e.length;++n<r;){let o=e[n].type;if(tt.isDictionary(o)){if(!t.has(o.id))t.set(o.id,o.dictionary);else if(t.get(o.id)!==o.dictionary)throw new Error("Cannot create Schema containing two different dictionaries with the same Id")}o.children&&o.children.length>0&&D_(o.children,t)}return t}var HI=Ue,$C=Uo,zC=Hn,$o=class{constructor(t,n=en.V4,r,i){this.schema=t,this.version=n,r&&(this._recordBatches=r),i&&(this._dictionaryBatches=i)}static decode(t){t=new zC(xt(t));let n=Ln.getRootAsFooter(t),r=Rt.decode(n.schema());return new L_(r,n)}static encode(t){let n=new $C,r=Rt.encode(n,t.schema);Ln.startRecordBatchesVector(n,t.numRecordBatches);for(let s of[...t.recordBatches()].slice().reverse())bi.encode(n,s);let i=n.endVector();Ln.startDictionariesVector(n,t.numDictionaries);for(let s of[...t.dictionaryBatches()].slice().reverse())bi.encode(n,s);let o=n.endVector();return Ln.startFooter(n),Ln.addSchema(n,r),Ln.addVersion(n,en.V4),Ln.addRecordBatches(n,i),Ln.addDictionaries(n,o),Ln.finishFooterBuffer(n,Ln.endFooter(n)),n.asUint8Array()}get numRecordBatches(){return this._recordBatches.length}get numDictionaries(){return this._dictionaryBatches.length}*recordBatches(){for(let t,n=-1,r=this.numRecordBatches;++n<r;)(t=this.getRecordBatch(n))&&(yield t)}*dictionaryBatches(){for(let t,n=-1,r=this.numDictionaries;++n<r;)(t=this.getDictionaryBatch(n))&&(yield t)}getRecordBatch(t){return t>=0&&t<this.numRecordBatches&&this._recordBatches[t]||null}getDictionaryBatch(t){return t>=0&&t<this.numDictionaries&&this._dictionaryBatches[t]||null}};var L_=class extends $o{constructor(t,n){super(t,n.version()),this._footer=n}get numRecordBatches(){return this._footer.recordBatchesLength()}get numDictionaries(){return this._footer.dictionariesLength()}getRecordBatch(t){if(t>=0&&t<this.numRecordBatches){let n=this._footer.recordBatches(t);if(n)return bi.decode(n)}return null}getDictionaryBatch(t){if(t>=0&&t<this.numDictionaries){let n=this._footer.dictionaries(t);if(n)return bi.decode(n)}return null}},bi=class{constructor(t,n,r){this.metaDataLength=t,this.offset=typeof r=="number"?r:r.low,this.bodyLength=typeof n=="number"?n:n.low}static decode(t){return new bi(t.metaDataLength(),t.bodyLength(),t.offset())}static encode(t,n){let{metaDataLength:r}=n,i=new HI(n.offset,0),o=new HI(n.bodyLength,0);return Wa.createBlock(t,i,r,o)}};var ue=Object.freeze({done:!0,value:void 0}),Lf=class{constructor(t){this._json=t}get schema(){return this._json.schema}get batches(){return this._json.batches||[]}get dictionaries(){return this._json.dictionaries||[]}},Ga=class{tee(){return this._getDOMStream().tee()}pipe(t,n){return this._getNodeStream().pipe(t,n)}pipeTo(t,n){return this._getDOMStream().pipeTo(t,n)}pipeThrough(t,n){return this._getDOMStream().pipeThrough(t,n)}_getDOMStream(){return this._DOMStream||(this._DOMStream=this.toDOMStream())}_getNodeStream(){return this._nodeStream||(this._nodeStream=this.toNodeStream())}},Rm=class extends Ga{constructor(){super(),this._values=[],this.resolvers=[],this._closedPromise=new Promise(t=>this._closedPromiseResolve=t)}get closed(){return this._closedPromise}cancel(t){return q(this,void 0,void 0,function*(){yield this.return(t)})}write(t){this._ensureOpen()&&(this.resolvers.length<=0?this._values.push(t):this.resolvers.shift().resolve({done:!1,value:t}))}abort(t){this._closedPromiseResolve&&(this.resolvers.length<=0?this._error={error:t}:this.resolvers.shift().reject({done:!0,value:t}))}close(){if(this._closedPromiseResolve){let{resolvers:t}=this;for(;t.length>0;)t.shift().resolve(ue);this._closedPromiseResolve(),this._closedPromiseResolve=void 0}}[Symbol.asyncIterator](){return this}toDOMStream(t){return _n.toDOMStream(this._closedPromiseResolve||this._error?this:this._values,t)}toNodeStream(t){return _n.toNodeStream(this._closedPromiseResolve||this._error?this:this._values,t)}throw(t){return q(this,void 0,void 0,function*(){return yield this.abort(t),ue})}return(t){return q(this,void 0,void 0,function*(){return yield this.close(),ue})}read(t){return q(this,void 0,void 0,function*(){return(yield this.next(t,"read")).value})}peek(t){return q(this,void 0,void 0,function*(){return(yield this.next(t,"peek")).value})}next(...t){return this._values.length>0?Promise.resolve({done:!1,value:this._values.shift()}):this._error?Promise.reject({done:!0,value:this._error.error}):this._closedPromiseResolve?new Promise((n,r)=>{this.resolvers.push({resolve:n,reject:r})}):Promise.resolve(ue)}_ensureOpen(){if(this._closedPromiseResolve)return!0;throw new Error("AsyncQueue is closed")}};var Wi=class extends Rm{write(t){if((t=xt(t)).byteLength>0)return super.write(t)}toString(t=!1){return t?xf(this.toUint8Array(!0)):this.toUint8Array(!1).then(xf)}toUint8Array(t=!1){return t?Mr(this._values)[0]:(()=>q(this,void 0,void 0,function*(){var n,r;let i=[],o=0;try{for(var s=zr(this),a;a=yield s.next(),!a.done;){let l=a.value;i.push(l),o+=l.byteLength}}catch(l){n={error:l}}finally{try{a&&!a.done&&(r=s.return)&&(yield r.call(s))}finally{if(n)throw n.error}}return Mr(i,o)[0]}))()}},Gi=class{constructor(t){t&&(this.source=new R_(_n.fromIterable(t)))}[Symbol.iterator](){return this}next(t){return this.source.next(t)}throw(t){return this.source.throw(t)}return(t){return this.source.return(t)}peek(t){return this.source.peek(t)}read(t){return this.source.read(t)}},wr=class{constructor(t){t instanceof wr?this.source=t.source:t instanceof Wi?this.source=new zo(_n.fromAsyncIterable(t)):Jp(t)?this.source=new zo(_n.fromNodeStream(t)):vf(t)?this.source=new zo(_n.fromDOMStream(t)):Kp(t)?this.source=new zo(_n.fromDOMStream(t.body)):ai(t)?this.source=new zo(_n.fromIterable(t)):si(t)?this.source=new zo(_n.fromAsyncIterable(t)):Vr(t)&&(this.source=new zo(_n.fromAsyncIterable(t)))}[Symbol.asyncIterator](){return this}next(t){return this.source.next(t)}throw(t){return this.source.throw(t)}return(t){return this.source.return(t)}get closed(){return this.source.closed}cancel(t){return this.source.cancel(t)}peek(t){return this.source.peek(t)}read(t){return this.source.read(t)}},R_=class{constructor(t){this.source=t}cancel(t){this.return(t)}peek(t){return this.next(t,"peek").value}read(t){return this.next(t,"read").value}next(t,n="read"){return this.source.next({cmd:n,size:t})}throw(t){return Object.create(this.source.throw&&this.source.throw(t)||ue)}return(t){return Object.create(this.source.return&&this.source.return(t)||ue)}},zo=class{constructor(t){this.source=t,this._closedPromise=new Promise(n=>this._closedPromiseResolve=n)}cancel(t){return q(this,void 0,void 0,function*(){yield this.return(t)})}get closed(){return this._closedPromise}read(t){return q(this,void 0,void 0,function*(){return(yield this.next(t,"read")).value})}peek(t){return q(this,void 0,void 0,function*(){return(yield this.next(t,"peek")).value})}next(t,n="read"){return q(this,void 0,void 0,function*(){return yield this.source.next({cmd:n,size:t})})}throw(t){return q(this,void 0,void 0,function*(){let n=this.source.throw&&(yield this.source.throw(t))||ue;return this._closedPromiseResolve&&this._closedPromiseResolve(),this._closedPromiseResolve=void 0,Object.create(n)})}return(t){return q(this,void 0,void 0,function*(){let n=this.source.return&&(yield this.source.return(t))||ue;return this._closedPromiseResolve&&this._closedPromiseResolve(),this._closedPromiseResolve=void 0,Object.create(n)})}};var Rf=class extends Gi{constructor(t,n){super(),this.position=0,this.buffer=xt(t),this.size=typeof n>"u"?this.buffer.byteLength:n}readInt32(t){let{buffer:n,byteOffset:r}=this.readAt(t,4);return new DataView(n,r).getInt32(0,!0)}seek(t){return this.position=Math.min(t,this.size),t<this.size}read(t){let{buffer:n,size:r,position:i}=this;return n&&i<r?(typeof t!="number"&&(t=Number.POSITIVE_INFINITY),this.position=Math.min(r,i+Math.min(r-i,t)),n.subarray(i,this.position)):null}readAt(t,n){let r=this.buffer,i=Math.min(this.size,t+n);return r?r.subarray(t,i):new Uint8Array(n)}close(){this.buffer&&(this.buffer=null)}throw(t){return this.close(),{done:!0,value:t}}return(t){return this.close(),{done:!0,value:t}}},zs=class extends wr{constructor(t,n){super(),this.position=0,this._handle=t,typeof n=="number"?this.size=n:this._pending=(()=>q(this,void 0,void 0,function*(){this.size=(yield t.stat()).size,delete this._pending}))()}readInt32(t){return q(this,void 0,void 0,function*(){let{buffer:n,byteOffset:r}=yield this.readAt(t,4);return new DataView(n,r).getInt32(0,!0)})}seek(t){return q(this,void 0,void 0,function*(){return this._pending&&(yield this._pending),this.position=Math.min(t,this.size),t<this.size})}read(t){return q(this,void 0,void 0,function*(){this._pending&&(yield this._pending);let{_handle:n,size:r,position:i}=this;if(n&&i<r){typeof t!="number"&&(t=Number.POSITIVE_INFINITY);let o=i,s=0,a=0,l=Math.min(r,o+Math.min(r-o,t)),c=new Uint8Array(Math.max(0,(this.position=l)-o));for(;(o+=a)<l&&(s+=a)<c.byteLength;)({bytesRead:a}=yield n.read(c,s,c.byteLength-s,o));return c}return null})}readAt(t,n){return q(this,void 0,void 0,function*(){this._pending&&(yield this._pending);let{_handle:r,size:i}=this;if(r&&t+n<i){let o=Math.min(i,t+n),s=new Uint8Array(o-t);return(yield r.read(s,0,n,t)).buffer}return new Uint8Array(n)})}close(){return q(this,void 0,void 0,function*(){let t=this._handle;this._handle=null,t&&(yield t.close())})}throw(t){return q(this,void 0,void 0,function*(){return yield this.close(),{done:!0,value:t}})}return(t){return q(this,void 0,void 0,function*(){return yield this.close(),{done:!0,value:t}})}};var U_={};Ua(U_,{BaseInt64:()=>Pf,Int128:()=>vr,Int64:()=>an,Uint64:()=>Gt});function gc(e){return e<0&&(e=4294967295+e+1),`0x${e.toString(16)}`}var bc=8,P_=[1,10,100,1e3,1e4,1e5,1e6,1e7,1e8],Pf=class{constructor(t){this.buffer=t}high(){return this.buffer[1]}low(){return this.buffer[0]}_times(t){let n=new Uint32Array([this.buffer[1]>>>16,this.buffer[1]&65535,this.buffer[0]>>>16,this.buffer[0]&65535]),r=new Uint32Array([t.buffer[1]>>>16,t.buffer[1]&65535,t.buffer[0]>>>16,t.buffer[0]&65535]),i=n[3]*r[3];this.buffer[0]=i&65535;let o=i>>>16;return i=n[2]*r[3],o+=i,i=n[3]*r[2]>>>0,o+=i,this.buffer[0]+=o<<16,this.buffer[1]=o>>>0<i?65536:0,this.buffer[1]+=o>>>16,this.buffer[1]+=n[1]*r[3]+n[2]*r[2]+n[3]*r[1],this.buffer[1]+=n[0]*r[3]+n[1]*r[2]+n[2]*r[1]+n[3]*r[0]<<16,this}_plus(t){let n=this.buffer[0]+t.buffer[0]>>>0;this.buffer[1]+=t.buffer[1],n<this.buffer[0]>>>0&&++this.buffer[1],this.buffer[0]=n}lessThan(t){return this.buffer[1]<t.buffer[1]||this.buffer[1]===t.buffer[1]&&this.buffer[0]<t.buffer[0]}equals(t){return this.buffer[1]===t.buffer[1]&&this.buffer[0]==t.buffer[0]}greaterThan(t){return t.lessThan(this)}hex(){return`${gc(this.buffer[1])} ${gc(this.buffer[0])}`}},Gt=class extends Pf{times(t){return this._times(t),this}plus(t){return this._plus(t),this}static from(t,n=new Uint32Array(2)){return Gt.fromString(typeof t=="string"?t:t.toString(),n)}static fromNumber(t,n=new Uint32Array(2)){return Gt.fromString(t.toString(),n)}static fromString(t,n=new Uint32Array(2)){let r=t.length,i=new Gt(n);for(let o=0;o<r;){let s=bc<r-o?bc:r-o,a=new Gt(new Uint32Array([Number.parseInt(t.slice(o,o+s),10),0])),l=new Gt(new Uint32Array([P_[s],0]));i.times(l),i.plus(a),o+=s}return i}static convertArray(t){let n=new Uint32Array(t.length*2);for(let r=-1,i=t.length;++r<i;)Gt.from(t[r],new Uint32Array(n.buffer,n.byteOffset+2*r*4,2));return n}static multiply(t,n){return new Gt(new Uint32Array(t.buffer)).times(n)}static add(t,n){return new Gt(new Uint32Array(t.buffer)).plus(n)}},an=class extends Pf{negate(){return this.buffer[0]=~this.buffer[0]+1,this.buffer[1]=~this.buffer[1],this.buffer[0]==0&&++this.buffer[1],this}times(t){return this._times(t),this}plus(t){return this._plus(t),this}lessThan(t){let n=this.buffer[1]<<0,r=t.buffer[1]<<0;return n<r||n===r&&this.buffer[0]<t.buffer[0]}static from(t,n=new Uint32Array(2)){return an.fromString(typeof t=="string"?t:t.toString(),n)}static fromNumber(t,n=new Uint32Array(2)){return an.fromString(t.toString(),n)}static fromString(t,n=new Uint32Array(2)){let r=t.startsWith("-"),i=t.length,o=new an(n);for(let s=r?1:0;s<i;){let a=bc<i-s?bc:i-s,l=new an(new Uint32Array([Number.parseInt(t.slice(s,s+a),10),0])),c=new an(new Uint32Array([P_[a],0]));o.times(c),o.plus(l),s+=a}return r?o.negate():o}static convertArray(t){let n=new Uint32Array(t.length*2);for(let r=-1,i=t.length;++r<i;)an.from(t[r],new Uint32Array(n.buffer,n.byteOffset+2*r*4,2));return n}static multiply(t,n){return new an(new Uint32Array(t.buffer)).times(n)}static add(t,n){return new an(new Uint32Array(t.buffer)).plus(n)}},vr=class{constructor(t){this.buffer=t}high(){return new an(new Uint32Array(this.buffer.buffer,this.buffer.byteOffset+8,2))}low(){return new an(new Uint32Array(this.buffer.buffer,this.buffer.byteOffset,2))}negate(){return this.buffer[0]=~this.buffer[0]+1,this.buffer[1]=~this.buffer[1],this.buffer[2]=~this.buffer[2],this.buffer[3]=~this.buffer[3],this.buffer[0]==0&&++this.buffer[1],this.buffer[1]==0&&++this.buffer[2],this.buffer[2]==0&&++this.buffer[3],this}times(t){let n=new Gt(new Uint32Array([this.buffer[3],0])),r=new Gt(new Uint32Array([this.buffer[2],0])),i=new Gt(new Uint32Array([this.buffer[1],0])),o=new Gt(new Uint32Array([this.buffer[0],0])),s=new Gt(new Uint32Array([t.buffer[3],0])),a=new Gt(new Uint32Array([t.buffer[2],0])),l=new Gt(new Uint32Array([t.buffer[1],0])),c=new Gt(new Uint32Array([t.buffer[0],0])),u=Gt.multiply(o,c);this.buffer[0]=u.low();let d=new Gt(new Uint32Array([u.high(),0]));return u=Gt.multiply(i,c),d.plus(u),u=Gt.multiply(o,l),d.plus(u),this.buffer[1]=d.low(),this.buffer[3]=d.lessThan(u)?1:0,this.buffer[2]=d.high(),new Gt(new Uint32Array(this.buffer.buffer,this.buffer.byteOffset+8,2)).plus(Gt.multiply(r,c)).plus(Gt.multiply(i,l)).plus(Gt.multiply(o,a)),this.buffer[3]+=Gt.multiply(n,c).plus(Gt.multiply(r,l)).plus(Gt.multiply(i,a)).plus(Gt.multiply(o,s)).low(),this}plus(t){let n=new Uint32Array(4);return n[3]=this.buffer[3]+t.buffer[3]>>>0,n[2]=this.buffer[2]+t.buffer[2]>>>0,n[1]=this.buffer[1]+t.buffer[1]>>>0,n[0]=this.buffer[0]+t.buffer[0]>>>0,n[0]<this.buffer[0]>>>0&&++n[1],n[1]<this.buffer[1]>>>0&&++n[2],n[2]<this.buffer[2]>>>0&&++n[3],this.buffer[3]=n[3],this.buffer[2]=n[2],this.buffer[1]=n[1],this.buffer[0]=n[0],this}hex(){return`${gc(this.buffer[3])} ${gc(this.buffer[2])} ${gc(this.buffer[1])} ${gc(this.buffer[0])}`}static multiply(t,n){return new vr(new Uint32Array(t.buffer)).times(n)}static add(t,n){return new vr(new Uint32Array(t.buffer)).plus(n)}static from(t,n=new Uint32Array(4)){return vr.fromString(typeof t=="string"?t:t.toString(),n)}static fromNumber(t,n=new Uint32Array(4)){return vr.fromString(t.toString(),n)}static fromString(t,n=new Uint32Array(4)){let r=t.startsWith("-"),i=t.length,o=new vr(n);for(let s=r?1:0;s<i;){let a=bc<i-s?bc:i-s,l=new vr(new Uint32Array([Number.parseInt(t.slice(s,s+a),10),0,0,0])),c=new vr(new Uint32Array([P_[a],0,0,0]));o.times(c),o.plus(l),s+=a}return r?o.negate():o}static convertArray(t){let n=new Uint32Array(t.length*4);for(let r=-1,i=t.length;++r<i;)vr.from(t[r],new Uint32Array(n.buffer,n.byteOffset+4*4*r,4));return n}};var Uf=class extends lt{constructor(t,n,r,i){super(),this.nodesIndex=-1,this.buffersIndex=-1,this.bytes=t,this.nodes=n,this.buffers=r,this.dictionaries=i}visit(t){return super.visit(t instanceof At?t.type:t)}visitNull(t,{length:n}=this.nextFieldNode()){return Tt({type:t,length:n})}visitBool(t,{length:n,nullCount:r}=this.nextFieldNode()){return Tt({type:t,length:n,nullCount:r,nullBitmap:this.readNullBitmap(t,r),data:this.readData(t)})}visitInt(t,{length:n,nullCount:r}=this.nextFieldNode()){return Tt({type:t,length:n,nullCount:r,nullBitmap:this.readNullBitmap(t,r),data:this.readData(t)})}visitFloat(t,{length:n,nullCount:r}=this.nextFieldNode()){return Tt({type:t,length:n,nullCount:r,nullBitmap:this.readNullBitmap(t,r),data:this.readData(t)})}visitUtf8(t,{length:n,nullCount:r}=this.nextFieldNode()){return Tt({type:t,length:n,nullCount:r,nullBitmap:this.readNullBitmap(t,r),valueOffsets:this.readOffsets(t),data:this.readData(t)})}visitBinary(t,{length:n,nullCount:r}=this.nextFieldNode()){return Tt({type:t,length:n,nullCount:r,nullBitmap:this.readNullBitmap(t,r),valueOffsets:this.readOffsets(t),data:this.readData(t)})}visitFixedSizeBinary(t,{length:n,nullCount:r}=this.nextFieldNode()){return Tt({type:t,length:n,nullCount:r,nullBitmap:this.readNullBitmap(t,r),data:this.readData(t)})}visitDate(t,{length:n,nullCount:r}=this.nextFieldNode()){return Tt({type:t,length:n,nullCount:r,nullBitmap:this.readNullBitmap(t,r),data:this.readData(t)})}visitTimestamp(t,{length:n,nullCount:r}=this.nextFieldNode()){return Tt({type:t,length:n,nullCount:r,nullBitmap:this.readNullBitmap(t,r),data:this.readData(t)})}visitTime(t,{length:n,nullCount:r}=this.nextFieldNode()){return Tt({type:t,length:n,nullCount:r,nullBitmap:this.readNullBitmap(t,r),data:this.readData(t)})}visitDecimal(t,{length:n,nullCount:r}=this.nextFieldNode()){return Tt({type:t,length:n,nullCount:r,nullBitmap:this.readNullBitmap(t,r),data:this.readData(t)})}visitList(t,{length:n,nullCount:r}=this.nextFieldNode()){return Tt({type:t,length:n,nullCount:r,nullBitmap:this.readNullBitmap(t,r),valueOffsets:this.readOffsets(t),child:this.visit(t.children[0])})}visitStruct(t,{length:n,nullCount:r}=this.nextFieldNode()){return Tt({type:t,length:n,nullCount:r,nullBitmap:this.readNullBitmap(t,r),children:this.visitMany(t.children)})}visitUnion(t){return t.mode===xe.Sparse?this.visitSparseUnion(t):this.visitDenseUnion(t)}visitDenseUnion(t,{length:n,nullCount:r}=this.nextFieldNode()){return Tt({type:t,length:n,nullCount:r,nullBitmap:this.readNullBitmap(t,r),typeIds:this.readTypeIds(t),valueOffsets:this.readOffsets(t),children:this.visitMany(t.children)})}visitSparseUnion(t,{length:n,nullCount:r}=this.nextFieldNode()){return Tt({type:t,length:n,nullCount:r,nullBitmap:this.readNullBitmap(t,r),typeIds:this.readTypeIds(t),children:this.visitMany(t.children)})}visitDictionary(t,{length:n,nullCount:r}=this.nextFieldNode()){return Tt({type:t,length:n,nullCount:r,nullBitmap:this.readNullBitmap(t,r),data:this.readData(t.indices),dictionary:this.readDictionary(t)})}visitInterval(t,{length:n,nullCount:r}=this.nextFieldNode()){return Tt({type:t,length:n,nullCount:r,nullBitmap:this.readNullBitmap(t,r),data:this.readData(t)})}visitFixedSizeList(t,{length:n,nullCount:r}=this.nextFieldNode()){return Tt({type:t,length:n,nullCount:r,nullBitmap:this.readNullBitmap(t,r),child:this.visit(t.children[0])})}visitMap(t,{length:n,nullCount:r}=this.nextFieldNode()){return Tt({type:t,length:n,nullCount:r,nullBitmap:this.readNullBitmap(t,r),valueOffsets:this.readOffsets(t),child:this.visit(t.children[0])})}nextFieldNode(){return this.nodes[++this.nodesIndex]}nextBufferRange(){return this.buffers[++this.buffersIndex]}readNullBitmap(t,n,r=this.nextBufferRange()){return n>0&&this.readData(t,r)||new Uint8Array(0)}readOffsets(t,n){return this.readData(t,n)}readTypeIds(t,n){return this.readData(t,n)}readData(t,{length:n,offset:r}=this.nextBufferRange()){return this.bytes.subarray(r,r+n)}readDictionary(t){return this.dictionaries.get(t.id)}},Pm=class extends Uf{constructor(t,n,r,i){super(new Uint8Array(0),n,r,i),this.sources=t}readNullBitmap(t,n,{offset:r}=this.nextBufferRange()){return n<=0?new Uint8Array(0):ja(this.sources[r])}readOffsets(t,{offset:n}=this.nextBufferRange()){return Ot(Uint8Array,Ot(Int32Array,this.sources[n]))}readTypeIds(t,{offset:n}=this.nextBufferRange()){return Ot(Uint8Array,Ot(t.ArrayType,this.sources[n]))}readData(t,{offset:n}=this.nextBufferRange()){let{sources:r}=this;return tt.isTimestamp(t)?Ot(Uint8Array,an.convertArray(r[n])):(tt.isInt(t)||tt.isTime(t))&&t.bitWidth===64?Ot(Uint8Array,an.convertArray(r[n])):tt.isDate(t)&&t.unit===xn.MILLISECOND?Ot(Uint8Array,an.convertArray(r[n])):tt.isDecimal(t)?Ot(Uint8Array,vr.convertArray(r[n])):tt.isBinary(t)||tt.isFixedSizeBinary(t)?VC(r[n]):tt.isBool(t)?ja(r[n]):tt.isUtf8(t)?Ns(r[n].join("")):Ot(Uint8Array,Ot(t.ArrayType,r[n].map(i=>+i)))}};function VC(e){let t=e.join(""),n=new Uint8Array(t.length/2);for(let r=0;r<t.length;r+=2)n[r>>1]=Number.parseInt(t.slice(r,r+2),16);return n}var _c=class extends Pi{constructor(t){super(t),this._values=new Rs(new Uint8Array(0))}get byteLength(){let t=this._pendingLength+this.length*4;return this._offsets&&(t+=this._offsets.byteLength),this._values&&(t+=this._values.byteLength),this._nulls&&(t+=this._nulls.byteLength),t}setValue(t,n){return super.setValue(t,xt(n))}_flushPending(t,n){let r=this._offsets,i=this._values.reserve(n).buffer,o=0;for(let[s,a]of t)if(a===void 0)r.set(s,0);else{let l=a.length;i.set(a,o),r.set(s,l),o+=l}}};var Um=class extends de{constructor(t){super(t),this._values=new pc}setValue(t,n){this._values.set(t,+n)}};var Ha=class extends nn{};Ha.prototype._setValue=x_;var $f=class extends Ha{};$f.prototype._setValue=hm;var zf=class extends Ha{};zf.prototype._setValue=pm;var Vf=class extends nn{};Vf.prototype._setValue=S_;var $m=class extends de{constructor({type:t,nullValues:n,dictionaryHashFunction:r}){super({type:new Ar(t.dictionary,t.indices,t.id,t.isOrdered)}),this._nulls=null,this._dictionaryOffset=0,this._keysToIndices=Object.create(null),this.indices=Xa({type:this.type.indices,nullValues:n}),this.dictionary=Xa({type:this.type.dictionary,nullValues:null}),typeof r=="function"&&(this.valueToKey=r)}get values(){return this.indices.values}get nullCount(){return this.indices.nullCount}get nullBitmap(){return this.indices.nullBitmap}get byteLength(){return this.indices.byteLength+this.dictionary.byteLength}get reservedLength(){return this.indices.reservedLength+this.dictionary.reservedLength}get reservedByteLength(){return this.indices.reservedByteLength+this.dictionary.reservedByteLength}isValid(t){return this.indices.isValid(t)}setValid(t,n){let r=this.indices;return n=r.setValid(t,n),this.length=r.length,n}setValue(t,n){let r=this._keysToIndices,i=this.valueToKey(n),o=r[i];return o===void 0&&(r[i]=o=this._dictionaryOffset+this.dictionary.append(n).length-1),this.indices.setValue(t,o)}flush(){let t=this.type,n=this._dictionary,r=this.dictionary.toVector(),i=this.indices.flush().clone(t);return i.dictionary=n?n.concat(r):r,this.finished||(this._dictionaryOffset+=r.length),this._dictionary=i.dictionary,this.clear(),i}finish(){return this.indices.finish(),this.dictionary.finish(),this._dictionaryOffset=0,this._keysToIndices=Object.create(null),super.finish()}clear(){return this.indices.clear(),this.dictionary.clear(),super.clear()}valueToKey(t){return typeof t=="string"?t:`${t}`}};var jf=class extends nn{};jf.prototype._setValue=__;var zm=class extends de{setValue(t,n){let[r]=this.children,i=t*this.stride;for(let o=-1,s=n.length;++o<s;)r.set(i+o,n[o])}addChild(t,n="0"){if(this.numChildren>0)throw new Error("FixedSizeListBuilder can only have one child.");let r=this.children.push(t);return this.type=new pi(this.type.listSize,new At(n,t.type,!0)),r}};var Za=class extends nn{setValue(t,n){this._values.set(t,n)}},Vm=class extends Za{setValue(t,n){super.setValue(t,If(n))}},jm=class extends Za{},Ym=class extends Za{};var Ka=class extends nn{};Ka.prototype._setValue=T_;var Yf=class extends Ka{};Yf.prototype._setValue=Sm;var qf=class extends Ka{};qf.prototype._setValue=Tm;var Wr=class extends nn{setValue(t,n){this._values.set(t,n)}},qm=class extends Wr{},Wm=class extends Wr{},Gm=class extends Wr{},Hm=class extends Wr{},Xm=class extends Wr{},Zm=class extends Wr{},Km=class extends Wr{},Qm=class extends Wr{};var Jm=class extends Pi{constructor(t){super(t),this._offsets=new mc}addChild(t,n="0"){if(this.numChildren>0)throw new Error("ListBuilder can only have one child.");return this.children[this.numChildren]=t,this.type=new di(new At(n,t.type,!0)),this.numChildren-1}_flushPending(t){let n=this._offsets,[r]=this.children;for(let[i,o]of t)if(o===void 0)n.set(i,0);else{let s=o.length,a=n.set(i,s).buffer[i];for(let l=-1;++l<s;)r.set(a+l,o[l])}}};var t0=class extends Pi{set(t,n){return super.set(t,n)}setValue(t,n){let r=n instanceof Map?n:new Map(Object.entries(n)),i=this._pending||(this._pending=new Map),o=i.get(t);o&&(this._pendingLength-=o.size),this._pendingLength+=r.size,i.set(t,r)}addChild(t,n=`${this.numChildren}`){if(this.numChildren>0)throw new Error("ListBuilder can only have one child.");return this.children[this.numChildren]=t,this.type=new mi(new At(n,t.type,!0),this.type.keysSorted),this.numChildren-1}_flushPending(t){let n=this._offsets,[r]=this.children;for(let[i,o]of t)if(o===void 0)n.set(i,0);else{let{[i]:s,[i+1]:a}=n.set(i,o.size).buffer;for(let l of o.entries())if(r.set(s,l),++s>=a)break}}};var e0=class extends de{setValue(t,n){}setValid(t,n){return this.length=Math.max(t+1,this.length),n}};var n0=class extends de{setValue(t,n){let{children:r,type:i}=this;switch(Array.isArray(n)||n.constructor){case!0:return i.children.forEach((o,s)=>r[s].set(t,n[s]));case Map:return i.children.forEach((o,s)=>r[s].set(t,n.get(o.name)));default:return i.children.forEach((o,s)=>r[s].set(t,n[o.name]))}}setValid(t,n){return super.setValid(t,n)||this.children.forEach(r=>r.setValid(t,n)),n}addChild(t,n=`${this.numChildren}`){let r=this.children.push(t);return this.type=new le([...this.type.children,new At(n,t.type,!0)]),r}};var Vo=class extends nn{};Vo.prototype._setValue=w_;var Wf=class extends Vo{};Wf.prototype._setValue=mm;var Gf=class extends Vo{};Gf.prototype._setValue=ym;var Hf=class extends Vo{};Hf.prototype._setValue=gm;var Xf=class extends Vo{};Xf.prototype._setValue=bm;var jo=class extends nn{};jo.prototype._setValue=v_;var Zf=class extends jo{};Zf.prototype._setValue=_m;var Kf=class extends jo{};Kf.prototype._setValue=xm;var Qf=class extends jo{};Qf.prototype._setValue=wm;var Jf=class extends jo{};Jf.prototype._setValue=vm;var xc=class extends de{constructor(t){super(t),this._typeIds=new Po(new Int8Array(0),1),typeof t.valueToChildTypeId=="function"&&(this._valueToChildTypeId=t.valueToChildTypeId)}get typeIdToChildIndex(){return this.type.typeIdToChildIndex}append(t,n){return this.set(this.length,t,n)}set(t,n,r){return r===void 0&&(r=this._valueToChildTypeId(this,n,t)),this.setValid(t,this.isValid(n))&&this.setValue(t,n,r),this}setValue(t,n,r){this._typeIds.set(t,r);let i=this.type.typeIdToChildIndex[r],o=this.children[i];o?.set(t,n)}addChild(t,n=`${this.children.length}`){let r=this.children.push(t),{type:{children:i,mode:o,typeIds:s}}=this,a=[...i,new At(n,t.type)];return this.type=new hi(o,[...s,r],a),r}_valueToChildTypeId(t,n,r){throw new Error("Cannot map UnionBuilder value to child typeId. Pass the `childTypeId` as the second argument to unionBuilder.append(), or supply a `valueToChildTypeId` function as part of the UnionBuilder constructor options.")}},r0=class extends xc{},i0=class extends xc{constructor(t){super(t),this._offsets=new Po(new Int32Array(0))}setValue(t,n,r){let i=this._typeIds.set(t,r).buffer[t],o=this.getChildAt(this.type.typeIdToChildIndex[i]),s=this._offsets.set(t,o.length).buffer[t];o?.set(s,n)}};var td=class extends Pi{constructor(t){super(t),this._values=new Rs(new Uint8Array(0))}get byteLength(){let t=this._pendingLength+this.length*4;return this._offsets&&(t+=this._offsets.byteLength),this._values&&(t+=this._values.byteLength),this._nulls&&(t+=this._nulls.byteLength),t}setValue(t,n){return super.setValue(t,Ns(n))}_flushPending(t,n){}};td.prototype._flushPending=_c.prototype._flushPending;var $_=class extends lt{visitNull(){return e0}visitBool(){return Um}visitInt(){return Wr}visitInt8(){return qm}visitInt16(){return Wm}visitInt32(){return Gm}visitInt64(){return Hm}visitUint8(){return Xm}visitUint16(){return Zm}visitUint32(){return Km}visitUint64(){return Qm}visitFloat(){return Za}visitFloat16(){return Vm}visitFloat32(){return jm}visitFloat64(){return Ym}visitUtf8(){return td}visitBinary(){return _c}visitFixedSizeBinary(){return jf}visitDate(){return Ha}visitDateDay(){return $f}visitDateMillisecond(){return zf}visitTimestamp(){return Vo}visitTimestampSecond(){return Wf}visitTimestampMillisecond(){return Gf}visitTimestampMicrosecond(){return Hf}visitTimestampNanosecond(){return Xf}visitTime(){return jo}visitTimeSecond(){return Zf}visitTimeMillisecond(){return Kf}visitTimeMicrosecond(){return Qf}visitTimeNanosecond(){return Jf}visitDecimal(){return Vf}visitList(){return Jm}visitStruct(){return n0}visitUnion(){return xc}visitDenseUnion(){return i0}visitSparseUnion(){return r0}visitDictionary(){return $m}visitInterval(){return Ka}visitIntervalDayTime(){return Yf}visitIntervalYearMonth(){return qf}visitFixedSizeList(){return zm}visitMap(){return t0}},XI=new $_;var gt=class extends lt{compareSchemas(t,n){return t===n||n instanceof t.constructor&&this.compareManyFields(t.fields,n.fields)}compareManyFields(t,n){return t===n||Array.isArray(t)&&Array.isArray(n)&&t.length===n.length&&t.every((r,i)=>this.compareFields(r,n[i]))}compareFields(t,n){return t===n||n instanceof t.constructor&&t.name===n.name&&t.nullable===n.nullable&&this.visit(t.type,n.type)}};function Sr(e,t){return t instanceof e.constructor}function ed(e,t){return e===t||Sr(e,t)}function Yo(e,t){return e===t||Sr(e,t)&&e.bitWidth===t.bitWidth&&e.isSigned===t.isSigned}function o0(e,t){return e===t||Sr(e,t)&&e.precision===t.precision}function jC(e,t){return e===t||Sr(e,t)&&e.byteWidth===t.byteWidth}function z_(e,t){return e===t||Sr(e,t)&&e.unit===t.unit}function nd(e,t){return e===t||Sr(e,t)&&e.unit===t.unit&&e.timezone===t.timezone}function rd(e,t){return e===t||Sr(e,t)&&e.unit===t.unit&&e.bitWidth===t.bitWidth}function YC(e,t){return e===t||Sr(e,t)&&e.children.length===t.children.length&&Hi.compareManyFields(e.children,t.children)}function qC(e,t){return e===t||Sr(e,t)&&e.children.length===t.children.length&&Hi.compareManyFields(e.children,t.children)}function V_(e,t){return e===t||Sr(e,t)&&e.mode===t.mode&&e.typeIds.every((n,r)=>n===t.typeIds[r])&&Hi.compareManyFields(e.children,t.children)}function WC(e,t){return e===t||Sr(e,t)&&e.id===t.id&&e.isOrdered===t.isOrdered&&Hi.visit(e.indices,t.indices)&&Hi.visit(e.dictionary,t.dictionary)}function j_(e,t){return e===t||Sr(e,t)&&e.unit===t.unit}function GC(e,t){return e===t||Sr(e,t)&&e.listSize===t.listSize&&e.children.length===t.children.length&&Hi.compareManyFields(e.children,t.children)}function HC(e,t){return e===t||Sr(e,t)&&e.keysSorted===t.keysSorted&&e.children.length===t.children.length&&Hi.compareManyFields(e.children,t.children)}gt.prototype.visitNull=ed;gt.prototype.visitBool=ed;gt.prototype.visitInt=Yo;gt.prototype.visitInt8=Yo;gt.prototype.visitInt16=Yo;gt.prototype.visitInt32=Yo;gt.prototype.visitInt64=Yo;gt.prototype.visitUint8=Yo;gt.prototype.visitUint16=Yo;gt.prototype.visitUint32=Yo;gt.prototype.visitUint64=Yo;gt.prototype.visitFloat=o0;gt.prototype.visitFloat16=o0;gt.prototype.visitFloat32=o0;gt.prototype.visitFloat64=o0;gt.prototype.visitUtf8=ed;gt.prototype.visitBinary=ed;gt.prototype.visitFixedSizeBinary=jC;gt.prototype.visitDate=z_;gt.prototype.visitDateDay=z_;gt.prototype.visitDateMillisecond=z_;gt.prototype.visitTimestamp=nd;gt.prototype.visitTimestampSecond=nd;gt.prototype.visitTimestampMillisecond=nd;gt.prototype.visitTimestampMicrosecond=nd;gt.prototype.visitTimestampNanosecond=nd;gt.prototype.visitTime=rd;gt.prototype.visitTimeSecond=rd;gt.prototype.visitTimeMillisecond=rd;gt.prototype.visitTimeMicrosecond=rd;gt.prototype.visitTimeNanosecond=rd;gt.prototype.visitDecimal=ed;gt.prototype.visitList=YC;gt.prototype.visitStruct=qC;gt.prototype.visitUnion=V_;gt.prototype.visitDenseUnion=V_;gt.prototype.visitSparseUnion=V_;gt.prototype.visitDictionary=WC;gt.prototype.visitInterval=j_;gt.prototype.visitIntervalDayTime=j_;gt.prototype.visitIntervalYearMonth=j_;gt.prototype.visitFixedSizeList=GC;gt.prototype.visitMap=HC;var Hi=new gt;function Qa(e,t){return Hi.compareSchemas(e,t)}function ZI(e,t){return Hi.compareFields(e,t)}function KI(e,t){return Hi.visit(e,t)}function Xa(e){let t=e.type,n=new(XI.getVisitFn(t)())(e);if(t.children&&t.children.length>0){let r=e.children||[],i={nullValues:e.nullValues},o=Array.isArray(r)?(s,a)=>r[a]||i:({name:s})=>r[s]||i;for(let[s,a]of t.children.entries()){let{type:l}=a,c=o(a,s);n.children.push(Xa(Object.assign(Object.assign({},c),{type:l})))}}return n}function s0(e,t){return XC(e,t.map(n=>n.data.concat()))}function XC(e,t){let n=[...e.fields],r=[],i={numBatches:t.reduce((d,f)=>Math.max(d,f.length),0)},o=0,s=0,a=-1,l=t.length,c,u=[];for(;i.numBatches-- >0;){for(s=Number.POSITIVE_INFINITY,a=-1;++a<l;)u[a]=c=t[a].shift(),s=Math.min(s,c?c.length:s);Number.isFinite(s)&&(u=ZC(n,s,u,t,i),s>0&&(r[o++]=Tt({type:new le(n),length:s,nullCount:0,children:u.slice()})))}return[e=e.assign(n),r.map(d=>new se(e,d))]}function ZC(e,t,n,r,i){var o;let s=(t+63&-64)>>3;for(let a=-1,l=r.length;++a<l;){let c=n[a],u=c?.length;if(u>=t)u===t?n[a]=c:(n[a]=c.slice(0,t),i.numBatches=Math.max(i.numBatches,r[a].unshift(c.slice(t,u-t))));else{let d=e[a];e[a]=d.clone({nullable:!0}),n[a]=(o=c?._changeLengthAndBackfillNullBitmap(t))!==null&&o!==void 0?o:Tt({type:d.type,length:t,nullCount:t,nullBitmap:new Uint8Array(s)})}}return n}var QI,Ie=class{constructor(...t){var n,r;if(t.length===0)return this.batches=[],this.schema=new Rt([]),this._offsets=[0],this;let i,o;t[0]instanceof Rt&&(i=t.shift()),t[t.length-1]instanceof Uint32Array&&(o=t.pop());let s=l=>{if(l){if(l instanceof se)return[l];if(l instanceof Ie)return l.batches;if(l instanceof Wt){if(l.type instanceof le)return[new se(new Rt(l.type.children),l)]}else{if(Array.isArray(l))return l.flatMap(c=>s(c));if(typeof l[Symbol.iterator]=="function")return[...l].flatMap(c=>s(c));if(typeof l=="object"){let c=Object.keys(l),u=c.map(h=>new vt([l[h]])),d=new Rt(c.map((h,p)=>new At(String(h),u[p].type))),[,f]=s0(d,u);return f.length===0?[new se(l)]:f}}}return[]},a=t.flatMap(l=>s(l));if(i=(r=i??((n=a[0])===null||n===void 0?void 0:n.schema))!==null&&r!==void 0?r:new Rt([]),!(i instanceof Rt))throw new TypeError("Table constructor expects a [Schema, RecordBatch[]] pair.");for(let l of a){if(!(l instanceof se))throw new TypeError("Table constructor expects a [Schema, RecordBatch[]] pair.");if(!Qa(i,l.schema))throw new TypeError("Table and inner RecordBatch schemas must be equivalent.")}this.schema=i,this.batches=a,this._offsets=o??Fm(this.data)}get data(){return this.batches.map(({data:t})=>t)}get numCols(){return this.schema.fields.length}get numRows(){return this.data.reduce((t,n)=>t+n.length,0)}get nullCount(){return this._nullCount===-1&&(this._nullCount=Am(this.data)),this._nullCount}isValid(t){return!1}get(t){return null}set(t,n){}indexOf(t,n){return-1}getByteLength(t){return 0}[Symbol.iterator](){return this.batches.length>0?dc.visit(new vt(this.data)):new Array(0)[Symbol.iterator]()}toArray(){return[...this]}toString(){return`[
  ${this.toArray().join(`,
  `)}
]`}concat(...t){let n=this.schema,r=this.data.concat(t.flatMap(({data:i})=>i));return new Ie(n,r.map(i=>new se(n,i)))}slice(t,n){let r=this.schema;[t,n]=Ef({length:this.numRows},t,n);let i=km(this.data,this._offsets,t,n);return new Ie(r,i.map(o=>new se(r,o)))}getChild(t){return this.getChildAt(this.schema.fields.findIndex(n=>n.name===t))}getChildAt(t){if(t>-1&&t<this.schema.fields.length){let n=this.data.map(r=>r.children[t]);if(n.length===0){let{type:r}=this.schema.fields[t],i=Tt({type:r,length:0,nullCount:0});n.push(i._changeLengthAndBackfillNullBitmap(this.numRows))}return new vt(n)}return null}setChild(t,n){var r;return this.setChildAt((r=this.schema.fields)===null||r===void 0?void 0:r.findIndex(i=>i.name===t),n)}setChildAt(t,n){let r=this.schema,i=[...this.batches];if(t>-1&&t<this.numCols){n||(n=new vt([Tt({type:new Gn,length:this.numRows})]));let o=r.fields.slice(),s=o[t].clone({type:n.type}),a=this.schema.fields.map((l,c)=>this.getChildAt(c));[o[t],a[t]]=[s,n],[r,i]=s0(r,a)}return new Ie(r,i)}select(t){let n=this.schema.fields.reduce((r,i,o)=>r.set(i.name,o),new Map);return this.selectAt(t.map(r=>n.get(r)).filter(r=>r>-1))}selectAt(t){let n=this.schema.selectAt(t),r=this.batches.map(i=>i.selectAt(t));return new Ie(n,r)}assign(t){let n=this.schema.fields,[r,i]=t.schema.fields.reduce((a,l,c)=>{let[u,d]=a,f=n.findIndex(h=>h.name===l.name);return~f?d[f]=c:u.push(c),a},[[],[]]),o=this.schema.assign(t.schema),s=[...n.map((a,l)=>[l,i[l]]).map(([a,l])=>l===void 0?this.getChildAt(a):t.getChildAt(l)),...r.map(a=>t.getChildAt(a))].filter(Boolean);return new Ie(...s0(o,s))}};QI=Symbol.toStringTag;Ie[QI]=(e=>(e.schema=null,e.batches=[],e._offsets=new Uint32Array([0]),e._nullCount=-1,e[Symbol.isConcatSpreadable]=!0,e.isValid=Ls(Ff),e.get=Ls(Pe.getVisitFn(E.Struct)),e.set=Nm(wn.getVisitFn(E.Struct)),e.indexOf=Om(qa.getVisitFn(E.Struct)),e.getByteLength=Ls(kr.getVisitFn(E.Struct)),"Table"))(Ie.prototype);var t3,se=class{constructor(...t){switch(t.length){case 2:{if([this.schema]=t,!(this.schema instanceof Rt))throw new TypeError("RecordBatch constructor expects a [Schema, Data] pair.");if([,this.data=Tt({nullCount:0,type:new le(this.schema.fields),children:this.schema.fields.map(n=>Tt({type:n.type,nullCount:0}))})]=t,!(this.data instanceof Wt))throw new TypeError("RecordBatch constructor expects a [Schema, Data] pair.");[this.schema,this.data]=JI(this.schema,this.data.children);break}case 1:{let[n]=t,{fields:r,children:i,length:o}=Object.keys(n).reduce((l,c,u)=>(l.children[u]=n[c],l.length=Math.max(l.length,n[c].length),l.fields[u]=At.new({name:c,type:n[c].type,nullable:!0}),l),{length:0,fields:new Array,children:new Array}),s=new Rt(r),a=Tt({type:new le(r),length:o,children:i,nullCount:0});[this.schema,this.data]=JI(s,a.children,o);break}default:throw new TypeError("RecordBatch constructor expects an Object mapping names to child Data, or a [Schema, Data] pair.")}}get dictionaries(){return this._dictionaries||(this._dictionaries=e3(this.schema.fields,this.data.children))}get numCols(){return this.schema.fields.length}get numRows(){return this.data.length}get nullCount(){return this.data.nullCount}isValid(t){return this.data.getValid(t)}get(t){return Pe.visit(this.data,t)}set(t,n){return wn.visit(this.data,t,n)}indexOf(t,n){return qa.visit(this.data,t,n)}getByteLength(t){return kr.visit(this.data,t)}[Symbol.iterator](){return dc.visit(new vt([this.data]))}toArray(){return[...this]}concat(...t){return new Ie(this.schema,[this,...t])}slice(t,n){let[r]=new vt([this.data]).slice(t,n).data;return new se(this.schema,r)}getChild(t){var n;return this.getChildAt((n=this.schema.fields)===null||n===void 0?void 0:n.findIndex(r=>r.name===t))}getChildAt(t){return t>-1&&t<this.schema.fields.length?new vt([this.data.children[t]]):null}setChild(t,n){var r;return this.setChildAt((r=this.schema.fields)===null||r===void 0?void 0:r.findIndex(i=>i.name===t),n)}setChildAt(t,n){let r=this.schema,i=this.data;if(t>-1&&t<this.numCols){n||(n=new vt([Tt({type:new Gn,length:this.numRows})]));let o=r.fields.slice(),s=i.children.slice(),a=o[t].clone({type:n.type});[o[t],s[t]]=[a,n.data[0]],r=new Rt(o,new Map(this.schema.metadata)),i=Tt({type:new le(o),children:s})}return new se(r,i)}select(t){let n=this.schema.select(t),r=new le(n.fields),i=[];for(let o of t){let s=this.schema.fields.findIndex(a=>a.name===o);~s&&(i[s]=this.data.children[s])}return new se(n,Tt({type:r,length:this.numRows,children:i}))}selectAt(t){let n=this.schema.selectAt(t),r=t.map(o=>this.data.children[o]).filter(Boolean),i=Tt({type:new le(n.fields),length:this.numRows,children:r});return new se(n,i)}};t3=Symbol.toStringTag;se[t3]=(e=>(e._nullCount=-1,e[Symbol.isConcatSpreadable]=!0,"RecordBatch"))(se.prototype);function JI(e,t,n=t.reduce((r,i)=>Math.max(r,i.length),0)){var r;let i=[...e.fields],o=[...t],s=(n+63&-64)>>3;for(let[a,l]of e.fields.entries()){let c=t[a];(!c||c.length!==n)&&(i[a]=l.clone({nullable:!0}),o[a]=(r=c?._changeLengthAndBackfillNullBitmap(n))!==null&&r!==void 0?r:Tt({type:l.type,length:n,nullCount:n,nullBitmap:new Uint8Array(s)}))}return[e.assign(i),Tt({type:new le(i),length:n,children:o})]}function e3(e,t,n=new Map){for(let r=-1,i=e.length;++r<i;){let s=e[r].type,a=t[r];if(tt.isDictionary(s)){if(!n.has(s.id))a.dictionary&&n.set(s.id,a.dictionary);else if(n.get(s.id)!==a.dictionary)throw new Error("Cannot create Schema containing two different dictionaries with the same Id")}s.children&&s.children.length>0&&e3(s.children,a.children,n)}return n}var Ja=class extends se{constructor(t){let n=t.fields.map(i=>Tt({type:i.type})),r=Tt({type:new le(t.fields),nullCount:0,children:n});super(t,r)}};var id;(function(e){e[e.BUFFER=0]="BUFFER"})(id||(id={}));var od;(function(e){e[e.LZ4_FRAME=0]="LZ4_FRAME",e[e.ZSTD=1]="ZSTD"})(od||(od={}));var _i=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,n){return this.bb_pos=t,this.bb=n,this}static getRootAsBodyCompression(t,n){return(n||new _i).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsBodyCompression(t,n){return t.setPosition(t.position()+4),(n||new _i).__init(t.readInt32(t.position())+t.position(),t)}codec(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt8(this.bb_pos+t):od.LZ4_FRAME}method(){let t=this.bb.__offset(this.bb_pos,6);return t?this.bb.readInt8(this.bb_pos+t):id.BUFFER}static startBodyCompression(t){t.startObject(2)}static addCodec(t,n){t.addFieldInt8(0,n,od.LZ4_FRAME)}static addMethod(t,n){t.addFieldInt8(1,n,id.BUFFER)}static endBodyCompression(t){return t.endObject()}static createBodyCompression(t,n,r){return _i.startBodyCompression(t),_i.addCodec(t,n),_i.addMethod(t,r),_i.endBodyCompression(t)}};var wc=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,n){return this.bb_pos=t,this.bb=n,this}offset(){return this.bb.readInt64(this.bb_pos)}length(){return this.bb.readInt64(this.bb_pos+8)}static sizeOf(){return 16}static createBuffer(t,n,r){return t.prep(8,16),t.writeInt64(r),t.writeInt64(n),t.offset()}};var vc=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,n){return this.bb_pos=t,this.bb=n,this}length(){return this.bb.readInt64(this.bb_pos)}nullCount(){return this.bb.readInt64(this.bb_pos+8)}static sizeOf(){return 16}static createFieldNode(t,n,r){return t.prep(8,16),t.writeInt64(r),t.writeInt64(n),t.offset()}};var Rn=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,n){return this.bb_pos=t,this.bb=n,this}static getRootAsRecordBatch(t,n){return(n||new Rn).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsRecordBatch(t,n){return t.setPosition(t.position()+4),(n||new Rn).__init(t.readInt32(t.position())+t.position(),t)}length(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt64(this.bb_pos+t):this.bb.createLong(0,0)}nodes(t,n){let r=this.bb.__offset(this.bb_pos,6);return r?(n||new vc).__init(this.bb.__vector(this.bb_pos+r)+t*16,this.bb):null}nodesLength(){let t=this.bb.__offset(this.bb_pos,6);return t?this.bb.__vector_len(this.bb_pos+t):0}buffers(t,n){let r=this.bb.__offset(this.bb_pos,8);return r?(n||new wc).__init(this.bb.__vector(this.bb_pos+r)+t*16,this.bb):null}buffersLength(){let t=this.bb.__offset(this.bb_pos,8);return t?this.bb.__vector_len(this.bb_pos+t):0}compression(t){let n=this.bb.__offset(this.bb_pos,10);return n?(t||new _i).__init(this.bb.__indirect(this.bb_pos+n),this.bb):null}static startRecordBatch(t){t.startObject(4)}static addLength(t,n){t.addFieldInt64(0,n,t.createLong(0,0))}static addNodes(t,n){t.addFieldOffset(1,n,0)}static startNodesVector(t,n){t.startVector(16,n,8)}static addBuffers(t,n){t.addFieldOffset(2,n,0)}static startBuffersVector(t,n){t.startVector(16,n,8)}static addCompression(t,n){t.addFieldOffset(3,n,0)}static endRecordBatch(t){return t.endObject()}};var Gr=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,n){return this.bb_pos=t,this.bb=n,this}static getRootAsDictionaryBatch(t,n){return(n||new Gr).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsDictionaryBatch(t,n){return t.setPosition(t.position()+4),(n||new Gr).__init(t.readInt32(t.position())+t.position(),t)}id(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt64(this.bb_pos+t):this.bb.createLong(0,0)}data(t){let n=this.bb.__offset(this.bb_pos,6);return n?(t||new Rn).__init(this.bb.__indirect(this.bb_pos+n),this.bb):null}isDelta(){let t=this.bb.__offset(this.bb_pos,8);return t?!!this.bb.readInt8(this.bb_pos+t):!1}static startDictionaryBatch(t){t.startObject(3)}static addId(t,n){t.addFieldInt64(0,n,t.createLong(0,0))}static addData(t,n){t.addFieldOffset(1,n,0)}static addIsDelta(t,n){t.addFieldInt8(2,+n,0)}static endDictionaryBatch(t){return t.endObject()}};var Sc;(function(e){e[e.NONE=0]="NONE",e[e.Schema=1]="Schema",e[e.DictionaryBatch=2]="DictionaryBatch",e[e.RecordBatch=3]="RecordBatch",e[e.Tensor=4]="Tensor",e[e.SparseTensor=5]="SparseTensor"})(Sc||(Sc={}));var Ne=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,n){return this.bb_pos=t,this.bb=n,this}static getRootAsMessage(t,n){return(n||new Ne).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsMessage(t,n){return t.setPosition(t.position()+4),(n||new Ne).__init(t.readInt32(t.position())+t.position(),t)}version(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt16(this.bb_pos+t):Ps.V1}headerType(){let t=this.bb.__offset(this.bb_pos,6);return t?this.bb.readUint8(this.bb_pos+t):Sc.NONE}header(t){let n=this.bb.__offset(this.bb_pos,8);return n?this.bb.__union(t,this.bb_pos+n):null}bodyLength(){let t=this.bb.__offset(this.bb_pos,10);return t?this.bb.readInt64(this.bb_pos+t):this.bb.createLong(0,0)}customMetadata(t,n){let r=this.bb.__offset(this.bb_pos,12);return r?(n||new ce).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos+r)+t*4),this.bb):null}customMetadataLength(){let t=this.bb.__offset(this.bb_pos,12);return t?this.bb.__vector_len(this.bb_pos+t):0}static startMessage(t){t.startObject(5)}static addVersion(t,n){t.addFieldInt16(0,n,Ps.V1)}static addHeaderType(t,n){t.addFieldInt8(1,n,Sc.NONE)}static addHeader(t,n){t.addFieldOffset(2,n,0)}static addBodyLength(t,n){t.addFieldInt64(3,n,t.createLong(0,0))}static addCustomMetadata(t,n){t.addFieldOffset(4,n,0)}static createCustomMetadataVector(t,n){t.startVector(4,n.length,4);for(let r=n.length-1;r>=0;r--)t.addOffset(n[r]);return t.endVector()}static startCustomMetadataVector(t,n){t.startVector(4,n,4)}static endMessage(t){return t.endObject()}static finishMessageBuffer(t,n){t.finish(n)}static finishSizePrefixedMessageBuffer(t,n){t.finish(n,void 0,!0)}static createMessage(t,n,r,i,o,s){return Ne.startMessage(t),Ne.addVersion(t,n),Ne.addHeaderType(t,r),Ne.addHeader(t,i),Ne.addBodyLength(t,o),Ne.addCustomMetadata(t,s),Ne.endMessage(t)}};var QC=Ue,Y_=class extends lt{visit(t,n){return t==null||n==null?void 0:super.visit(t,n)}visitNull(t,n){return ji.startNull(n),ji.endNull(n)}visitInt(t,n){return rn.startInt(n),rn.addBitWidth(n,t.bitWidth),rn.addIsSigned(n,t.isSigned),rn.endInt(n)}visitFloat(t,n){return br.startFloatingPoint(n),br.addPrecision(n,t.precision),br.endFloatingPoint(n)}visitBinary(t,n){return $i.startBinary(n),$i.endBinary(n)}visitBool(t,n){return zi.startBool(n),zi.endBool(n)}visitUtf8(t,n){return qi.startUtf8(n),qi.endUtf8(n)}visitDecimal(t,n){return on.startDecimal(n),on.addScale(n,t.scale),on.addPrecision(n,t.precision),on.addBitWidth(n,t.bitWidth),on.endDecimal(n)}visitDate(t,n){return mr.startDate(n),mr.addUnit(n,t.unit),mr.endDate(n)}visitTime(t,n){return Bn.startTime(n),Bn.addUnit(n,t.unit),Bn.addBitWidth(n,t.bitWidth),Bn.endTime(n)}visitTimestamp(t,n){let r=t.timezone&&n.createString(t.timezone)||void 0;return Dn.startTimestamp(n),Dn.addUnit(n,t.unit),r!==void 0&&Dn.addTimezone(n,r),Dn.endTimestamp(n)}visitInterval(t,n){return _r.startInterval(n),_r.addUnit(n,t.unit),_r.endInterval(n)}visitList(t,n){return Vi.startList(n),Vi.endList(n)}visitStruct(t,n){return Yi.startStruct_(n),Yi.endStruct_(n)}visitUnion(t,n){sn.startTypeIdsVector(n,t.typeIds.length);let r=sn.createTypeIdsVector(n,t.typeIds);return sn.startUnion(n),sn.addMode(n,t.mode),sn.addTypeIds(n,r),sn.endUnion(n)}visitDictionary(t,n){let r=this.visit(t.indices,n);return Nr.startDictionaryEncoding(n),Nr.addId(n,new QC(t.id,0)),Nr.addIsOrdered(n,t.isOrdered),r!==void 0&&Nr.addIndexType(n,r),Nr.endDictionaryEncoding(n)}visitFixedSizeBinary(t,n){return yr.startFixedSizeBinary(n),yr.addByteWidth(n,t.byteWidth),yr.endFixedSizeBinary(n)}visitFixedSizeList(t,n){return gr.startFixedSizeList(n),gr.addListSize(n,t.listSize),gr.endFixedSizeList(n)}visitMap(t,n){return xr.startMap(n),xr.addKeysSorted(n,t.keysSorted),xr.endMap(n)}},a0=new Y_;function o3(e,t=new Map){return new Rt(JC(e,t),l0(e.customMetadata),t)}function q_(e){return new vn(e.count,a3(e.columns),l3(e.columns))}function s3(e){return new Ir(q_(e.data),e.id,e.isDelta)}function JC(e,t){return(e.fields||[]).filter(Boolean).map(n=>At.fromJSON(n,t))}function n3(e,t){return(e.children||[]).filter(Boolean).map(n=>At.fromJSON(n,t))}function a3(e){return(e||[]).reduce((t,n)=>[...t,new xi(n.count,tB(n.VALIDITY)),...a3(n.children)],[])}function l3(e,t=[]){for(let n=-1,r=(e||[]).length;++n<r;){let i=e[n];i.VALIDITY&&t.push(new Tr(t.length,i.VALIDITY.length)),i.TYPE&&t.push(new Tr(t.length,i.TYPE.length)),i.OFFSET&&t.push(new Tr(t.length,i.OFFSET.length)),i.DATA&&t.push(new Tr(t.length,i.DATA.length)),t=l3(i.children,t)}return t}function tB(e){return(e||[]).reduce((t,n)=>t+ +(n===0),0)}function c3(e,t){let n,r,i,o,s,a;return!t||!(o=e.dictionary)?(s=i3(e,n3(e,t)),i=new At(e.name,s,e.nullable,l0(e.customMetadata))):t.has(n=o.id)?(r=(r=o.indexType)?r3(r):new Di,a=new Ar(t.get(n),r,n,o.isOrdered),i=new At(e.name,a,e.nullable,l0(e.customMetadata))):(r=(r=o.indexType)?r3(r):new Di,t.set(n,s=i3(e,n3(e,t))),a=new Ar(s,r,n,o.isOrdered),i=new At(e.name,a,e.nullable,l0(e.customMetadata))),i||null}function l0(e){return new Map(Object.entries(e||{}))}function r3(e){return new ke(e.isSigned,e.bitWidth)}function i3(e,t){let n=e.type.name;switch(n){case"NONE":return new Gn;case"null":return new Gn;case"binary":return new Fo;case"utf8":return new ko;case"bool":return new No;case"list":return new di((t||[])[0]);case"struct":return new le(t||[]);case"struct_":return new le(t||[])}switch(n){case"int":{let r=e.type;return new ke(r.isSigned,r.bitWidth)}case"floatingpoint":{let r=e.type;return new pr(fe[r.precision])}case"decimal":{let r=e.type;return new Oo(r.scale,r.precision,r.bitWidth)}case"date":{let r=e.type;return new Co(xn[r.unit])}case"time":{let r=e.type;return new fi(Dt[r.unit],r.bitWidth)}case"timestamp":{let r=e.type;return new Bo(Dt[r.unit],r.timezone)}case"interval":{let r=e.type;return new Do(Wn[r.unit])}case"union":{let r=e.type;return new hi(xe[r.mode],r.typeIds||[],t||[])}case"fixedsizebinary":{let r=e.type;return new Lo(r.byteWidth)}case"fixedsizelist":{let r=e.type;return new pi(r.listSize,(t||[])[0])}case"map":{let r=e.type;return new mi((t||[])[0],r.keysSorted)}}throw new Error(`Unrecognized type: "${n}"`)}var tl=Ue,eB=Uo,nB=Hn,ze=class{constructor(t,n,r,i){this._version=n,this._headerType=r,this.body=new Uint8Array(0),i&&(this._createHeader=()=>i),this._bodyLength=typeof t=="number"?t:t.low}static fromJSON(t,n){let r=new ze(0,en.V4,n);return r._createHeader=rB(t,n),r}static decode(t){t=new nB(xt(t));let n=Ne.getRootAsMessage(t),r=n.bodyLength(),i=n.version(),o=n.headerType(),s=new ze(r,i,o);return s._createHeader=iB(n,o),s}static encode(t){let n=new eB,r=-1;return t.isSchema()?r=Rt.encode(n,t.header()):t.isRecordBatch()?r=vn.encode(n,t.header()):t.isDictionaryBatch()&&(r=Ir.encode(n,t.header())),Ne.startMessage(n),Ne.addVersion(n,en.V4),Ne.addHeader(n,r),Ne.addHeaderType(n,t.headerType),Ne.addBodyLength(n,new tl(t.bodyLength,0)),Ne.finishMessageBuffer(n,Ne.endMessage(n)),n.asUint8Array()}static from(t,n=0){if(t instanceof Rt)return new ze(0,en.V4,Vt.Schema,t);if(t instanceof vn)return new ze(n,en.V4,Vt.RecordBatch,t);if(t instanceof Ir)return new ze(n,en.V4,Vt.DictionaryBatch,t);throw new Error(`Unrecognized Message header: ${t}`)}get type(){return this.headerType}get version(){return this._version}get headerType(){return this._headerType}get bodyLength(){return this._bodyLength}header(){return this._createHeader()}isSchema(){return this.headerType===Vt.Schema}isRecordBatch(){return this.headerType===Vt.RecordBatch}isDictionaryBatch(){return this.headerType===Vt.DictionaryBatch}},vn=class{constructor(t,n,r){this._nodes=n,this._buffers=r,this._length=typeof t=="number"?t:t.low}get nodes(){return this._nodes}get length(){return this._length}get buffers(){return this._buffers}},Ir=class{constructor(t,n,r=!1){this._data=t,this._isDelta=r,this._id=typeof n=="number"?n:n.low}get id(){return this._id}get data(){return this._data}get isDelta(){return this._isDelta}get length(){return this.data.length}get nodes(){return this.data.nodes}get buffers(){return this.data.buffers}},Tr=class{constructor(t,n){this.offset=typeof t=="number"?t:t.low,this.length=typeof n=="number"?n:n.low}},xi=class{constructor(t,n){this.length=typeof t=="number"?t:t.low,this.nullCount=typeof n=="number"?n:n.low}};function rB(e,t){return()=>{switch(t){case Vt.Schema:return Rt.fromJSON(e);case Vt.RecordBatch:return vn.fromJSON(e);case Vt.DictionaryBatch:return Ir.fromJSON(e)}throw new Error(`Unrecognized Message type: { name: ${Vt[t]}, type: ${t} }`)}}function iB(e,t){return()=>{switch(t){case Vt.Schema:return Rt.decode(e.header(new we));case Vt.RecordBatch:return vn.decode(e.header(new Rn),e.version());case Vt.DictionaryBatch:return Ir.decode(e.header(new Gr),e.version())}throw new Error(`Unrecognized Message type: { name: ${Vt[t]}, type: ${t} }`)}}At.encode=mB;At.decode=hB;At.fromJSON=c3;Rt.encode=pB;Rt.decode=oB;Rt.fromJSON=o3;vn.encode=yB;vn.decode=sB;vn.fromJSON=q_;Ir.encode=gB;Ir.decode=aB;Ir.fromJSON=s3;xi.encode=bB;xi.decode=cB;Tr.encode=_B;Tr.decode=lB;function oB(e,t=new Map){let n=dB(e,t);return new Rt(n,c0(e),t)}function sB(e,t=en.V4){if(e.compression()!==null)throw new Error("Record batch compression not implemented");return new vn(e.length(),uB(e),fB(e,t))}function aB(e,t=en.V4){return new Ir(vn.decode(e.data(),t),e.id(),e.isDelta())}function lB(e){return new Tr(e.offset(),e.length())}function cB(e){return new xi(e.length(),e.nullCount())}function uB(e){let t=[];for(let n,r=-1,i=-1,o=e.nodesLength();++r<o;)(n=e.nodes(r))&&(t[++i]=xi.decode(n));return t}function fB(e,t){let n=[];for(let r,i=-1,o=-1,s=e.buffersLength();++i<s;)(r=e.buffers(i))&&(t<en.V4&&(r.bb_pos+=8*(i+1)),n[++o]=Tr.decode(r));return n}function dB(e,t){let n=[];for(let r,i=-1,o=-1,s=e.fieldsLength();++i<s;)(r=e.fields(i))&&(n[++o]=At.decode(r,t));return n}function u3(e,t){let n=[];for(let r,i=-1,o=-1,s=e.childrenLength();++i<s;)(r=e.children(i))&&(n[++o]=At.decode(r,t));return n}function hB(e,t){let n,r,i,o,s,a;return!t||!(a=e.dictionary())?(i=d3(e,u3(e,t)),r=new At(e.name(),i,e.nullable(),c0(e))):t.has(n=a.id().low)?(o=(o=a.indexType())?f3(o):new Di,s=new Ar(t.get(n),o,n,a.isOrdered()),r=new At(e.name(),s,e.nullable(),c0(e))):(o=(o=a.indexType())?f3(o):new Di,t.set(n,i=d3(e,u3(e,t))),s=new Ar(i,o,n,a.isOrdered()),r=new At(e.name(),s,e.nullable(),c0(e))),r||null}function c0(e){let t=new Map;if(e)for(let n,r,i=-1,o=Math.trunc(e.customMetadataLength());++i<o;)(n=e.customMetadata(i))&&(r=n.key())!=null&&t.set(r,n.value());return t}function f3(e){return new ke(e.isSigned(),e.bitWidth())}function d3(e,t){let n=e.typeType();switch(n){case he.NONE:return new Gn;case he.Null:return new Gn;case he.Binary:return new Fo;case he.Utf8:return new ko;case he.Bool:return new No;case he.List:return new di((t||[])[0]);case he.Struct_:return new le(t||[])}switch(n){case he.Int:{let r=e.type(new rn);return new ke(r.isSigned(),r.bitWidth())}case he.FloatingPoint:{let r=e.type(new br);return new pr(r.precision())}case he.Decimal:{let r=e.type(new on);return new Oo(r.scale(),r.precision(),r.bitWidth())}case he.Date:{let r=e.type(new mr);return new Co(r.unit())}case he.Time:{let r=e.type(new Bn);return new fi(r.unit(),r.bitWidth())}case he.Timestamp:{let r=e.type(new Dn);return new Bo(r.unit(),r.timezone())}case he.Interval:{let r=e.type(new _r);return new Do(r.unit())}case he.Union:{let r=e.type(new sn);return new hi(r.mode(),r.typeIdsArray()||[],t||[])}case he.FixedSizeBinary:{let r=e.type(new yr);return new Lo(r.byteWidth())}case he.FixedSizeList:{let r=e.type(new gr);return new pi(r.listSize(),(t||[])[0])}case he.Map:{let r=e.type(new xr);return new mi((t||[])[0],r.keysSorted())}}throw new Error(`Unrecognized type: "${he[n]}" (${n})`)}function pB(e,t){let n=t.fields.map(o=>At.encode(e,o));we.startFieldsVector(e,n.length);let r=we.createFieldsVector(e,n),i=t.metadata&&t.metadata.size>0?we.createCustomMetadataVector(e,[...t.metadata].map(([o,s])=>{let a=e.createString(`${o}`),l=e.createString(`${s}`);return ce.startKeyValue(e),ce.addKey(e,a),ce.addValue(e,l),ce.endKeyValue(e)})):-1;return we.startSchema(e),we.addFields(e,r),we.addEndianness(e,xB?Us.Little:Us.Big),i!==-1&&we.addCustomMetadata(e,i),we.endSchema(e)}function mB(e,t){let n=-1,r=-1,i=-1,o=t.type,s=t.typeId;tt.isDictionary(o)?(s=o.dictionary.typeId,i=a0.visit(o,e),r=a0.visit(o.dictionary,e)):r=a0.visit(o,e);let a=(o.children||[]).map(u=>At.encode(e,u)),l=$e.createChildrenVector(e,a),c=t.metadata&&t.metadata.size>0?$e.createCustomMetadataVector(e,[...t.metadata].map(([u,d])=>{let f=e.createString(`${u}`),h=e.createString(`${d}`);return ce.startKeyValue(e),ce.addKey(e,f),ce.addValue(e,h),ce.endKeyValue(e)})):-1;return t.name&&(n=e.createString(t.name)),$e.startField(e),$e.addType(e,r),$e.addTypeType(e,s),$e.addChildren(e,l),$e.addNullable(e,!!t.nullable),n!==-1&&$e.addName(e,n),i!==-1&&$e.addDictionary(e,i),c!==-1&&$e.addCustomMetadata(e,c),$e.endField(e)}function yB(e,t){let n=t.nodes||[],r=t.buffers||[];Rn.startNodesVector(e,n.length);for(let s of n.slice().reverse())xi.encode(e,s);let i=e.endVector();Rn.startBuffersVector(e,r.length);for(let s of r.slice().reverse())Tr.encode(e,s);let o=e.endVector();return Rn.startRecordBatch(e),Rn.addLength(e,new tl(t.length,0)),Rn.addNodes(e,i),Rn.addBuffers(e,o),Rn.endRecordBatch(e)}function gB(e,t){let n=vn.encode(e,t.data);return Gr.startDictionaryBatch(e),Gr.addId(e,new tl(t.id,0)),Gr.addIsDelta(e,t.isDelta),Gr.addData(e,n),Gr.endDictionaryBatch(e)}function bB(e,t){return vc.createFieldNode(e,new tl(t.length,0),new tl(t.nullCount,0))}function _B(e,t){return wc.createBuffer(e,new tl(t.offset,0),new tl(t.length,0))}var xB=(()=>{let e=new ArrayBuffer(2);return new DataView(e).setInt16(0,256,!0),new Int16Array(e)[0]===256})();var G_=e=>`Expected ${Vt[e]} Message in stream, but was null or length 0.`,H_=e=>`Header pointer of flatbuffer-encoded ${Vt[e]} Message is null or length 0.`,h3=(e,t)=>`Expected to read ${e} metadata bytes, but only read ${t}.`,p3=(e,t)=>`Expected to read ${e} bytes for message body, but only read ${t}.`,Tc=class{constructor(t){this.source=t instanceof Gi?t:new Gi(t)}[Symbol.iterator](){return this}next(){let t;return(t=this.readMetadataLength()).done?ue:t.value===-1&&(t=this.readMetadataLength()).done?ue:(t=this.readMetadata(t.value)).done?ue:t}throw(t){return this.source.throw(t)}return(t){return this.source.return(t)}readMessage(t){let n;if((n=this.next()).done)return null;if(t!=null&&n.value.headerType!==t)throw new Error(G_(t));return n.value}readMessageBody(t){if(t<=0)return new Uint8Array(0);let n=xt(this.source.read(t));if(n.byteLength<t)throw new Error(p3(t,n.byteLength));return n.byteOffset%8===0&&n.byteOffset+n.byteLength<=n.buffer.byteLength?n:n.slice()}readSchema(t=!1){let n=Vt.Schema,r=this.readMessage(n),i=r?.header();if(t&&!i)throw new Error(H_(n));return i}readMetadataLength(){let t=this.source.read(u0),n=t&&new Hn(t),r=n?.readInt32(0)||0;return{done:r===0,value:r}}readMetadata(t){let n=this.source.read(t);if(!n)return ue;if(n.byteLength<t)throw new Error(h3(t,n.byteLength));return{done:!1,value:ze.decode(n)}}},sd=class{constructor(t,n){this.source=t instanceof wr?t:Zp(t)?new zs(t,n):new wr(t)}[Symbol.asyncIterator](){return this}next(){return q(this,void 0,void 0,function*(){let t;return(t=yield this.readMetadataLength()).done?ue:t.value===-1&&(t=yield this.readMetadataLength()).done?ue:(t=yield this.readMetadata(t.value)).done?ue:t})}throw(t){return q(this,void 0,void 0,function*(){return yield this.source.throw(t)})}return(t){return q(this,void 0,void 0,function*(){return yield this.source.return(t)})}readMessage(t){return q(this,void 0,void 0,function*(){let n;if((n=yield this.next()).done)return null;if(t!=null&&n.value.headerType!==t)throw new Error(G_(t));return n.value})}readMessageBody(t){return q(this,void 0,void 0,function*(){if(t<=0)return new Uint8Array(0);let n=xt(yield this.source.read(t));if(n.byteLength<t)throw new Error(p3(t,n.byteLength));return n.byteOffset%8===0&&n.byteOffset+n.byteLength<=n.buffer.byteLength?n:n.slice()})}readSchema(t=!1){return q(this,void 0,void 0,function*(){let n=Vt.Schema,r=yield this.readMessage(n),i=r?.header();if(t&&!i)throw new Error(H_(n));return i})}readMetadataLength(){return q(this,void 0,void 0,function*(){let t=yield this.source.read(u0),n=t&&new Hn(t),r=n?.readInt32(0)||0;return{done:r===0,value:r}})}readMetadata(t){return q(this,void 0,void 0,function*(){let n=yield this.source.read(t);if(!n)return ue;if(n.byteLength<t)throw new Error(h3(t,n.byteLength));return{done:!1,value:ze.decode(n)}})}},ad=class extends Tc{constructor(t){super(new Uint8Array(0)),this._schema=!1,this._body=[],this._batchIndex=0,this._dictionaryIndex=0,this._json=t instanceof Lf?t:new Lf(t)}next(){let{_json:t}=this;if(!this._schema){this._schema=!0;let n=ze.fromJSON(t.schema,Vt.Schema);return{done:!1,value:n}}if(this._dictionaryIndex<t.dictionaries.length){let n=t.dictionaries[this._dictionaryIndex++];this._body=n.data.columns;let r=ze.fromJSON(n,Vt.DictionaryBatch);return{done:!1,value:r}}if(this._batchIndex<t.batches.length){let n=t.batches[this._batchIndex++];this._body=n.columns;let r=ze.fromJSON(n,Vt.RecordBatch);return{done:!1,value:r}}return this._body=[],ue}readMessageBody(t){return n(this._body);function n(r){return(r||[]).reduce((i,o)=>[...i,...o.VALIDITY&&[o.VALIDITY]||[],...o.TYPE&&[o.TYPE]||[],...o.OFFSET&&[o.OFFSET]||[],...o.DATA&&[o.DATA]||[],...n(o.children)],[])}}readMessage(t){let n;if((n=this.next()).done)return null;if(t!=null&&n.value.headerType!==t)throw new Error(G_(t));return n.value}readSchema(){let t=Vt.Schema,n=this.readMessage(t),r=n?.header();if(!n||!r)throw new Error(H_(t));return r}},u0=4,W_="ARROW1",Ic=new Uint8Array(W_.length);for(let e=0;e<W_.length;e+=1)Ic[e]=W_.codePointAt(e);function f0(e,t=0){for(let n=-1,r=Ic.length;++n<r;)if(Ic[n]!==e[t+n])return!1;return!0}var Ec=Ic.length,X_=Ec+u0,m3=Ec*2+u0;var Oe=class extends Ga{constructor(t){super(),this._impl=t}get closed(){return this._impl.closed}get schema(){return this._impl.schema}get autoDestroy(){return this._impl.autoDestroy}get dictionaries(){return this._impl.dictionaries}get numDictionaries(){return this._impl.numDictionaries}get numRecordBatches(){return this._impl.numRecordBatches}get footer(){return this._impl.isFile()?this._impl.footer:null}isSync(){return this._impl.isSync()}isAsync(){return this._impl.isAsync()}isFile(){return this._impl.isFile()}isStream(){return this._impl.isStream()}next(){return this._impl.next()}throw(t){return this._impl.throw(t)}return(t){return this._impl.return(t)}cancel(){return this._impl.cancel()}reset(t){return this._impl.reset(t),this._DOMStream=void 0,this._nodeStream=void 0,this}open(t){let n=this._impl.open(t);return si(n)?n.then(()=>this):this}readRecordBatch(t){return this._impl.isFile()?this._impl.readRecordBatch(t):null}[Symbol.iterator](){return this._impl[Symbol.iterator]()}[Symbol.asyncIterator](){return this._impl[Symbol.asyncIterator]()}toDOMStream(){return _n.toDOMStream(this.isSync()?{[Symbol.iterator]:()=>this}:{[Symbol.asyncIterator]:()=>this})}toNodeStream(){return _n.toNodeStream(this.isSync()?{[Symbol.iterator]:()=>this}:{[Symbol.asyncIterator]:()=>this},{objectMode:!0})}static throughNode(t){throw new Error('"throughNode" not available in this environment')}static throughDOM(t,n){throw new Error('"throughDOM" not available in this environment')}static from(t){return t instanceof Oe?t:Hp(t)?vB(t):Zp(t)?IB(t):si(t)?(()=>q(this,void 0,void 0,function*(){return yield Oe.from(yield t)}))():Kp(t)||vf(t)||Jp(t)||Vr(t)?TB(new wr(t)):SB(new Gi(t))}static readAll(t){return t instanceof Oe?t.isSync()?y3(t):g3(t):Hp(t)||ArrayBuffer.isView(t)||ai(t)||Xp(t)?y3(t):g3(t)}},Xi=class extends Oe{constructor(t){super(t),this._impl=t}readAll(){return[...this]}[Symbol.iterator](){return this._impl[Symbol.iterator]()}[Symbol.asyncIterator](){return hr(this,arguments,function*(){yield Nt(yield*nc(zr(this[Symbol.iterator]())))})}},Vs=class extends Oe{constructor(t){super(t),this._impl=t}readAll(){var t,n;return q(this,void 0,void 0,function*(){let r=new Array;try{for(var i=zr(this),o;o=yield i.next(),!o.done;){let s=o.value;r.push(s)}}catch(s){t={error:s}}finally{try{o&&!o.done&&(n=i.return)&&(yield n.call(i))}finally{if(t)throw t.error}}return r})}[Symbol.iterator](){throw new Error("AsyncRecordBatchStreamReader is not Iterable")}[Symbol.asyncIterator](){return this._impl[Symbol.asyncIterator]()}},js=class extends Xi{constructor(t){super(t),this._impl=t}},ld=class extends Vs{constructor(t){super(t),this._impl=t}},d0=class{constructor(t=new Map){this.closed=!1,this.autoDestroy=!0,this._dictionaryIndex=0,this._recordBatchIndex=0,this.dictionaries=t}get numDictionaries(){return this._dictionaryIndex}get numRecordBatches(){return this._recordBatchIndex}isSync(){return!1}isAsync(){return!1}isFile(){return!1}isStream(){return!1}reset(t){return this._dictionaryIndex=0,this._recordBatchIndex=0,this.schema=t,this.dictionaries=new Map,this}_loadRecordBatch(t,n){let r=this._loadVectors(t,n,this.schema.fields),i=Tt({type:new le(this.schema.fields),length:t.length,children:r});return new se(this.schema,i)}_loadDictionaryBatch(t,n){let{id:r,isDelta:i}=t,{dictionaries:o,schema:s}=this,a=o.get(r);if(i||!a){let l=s.dictionaries.get(r),c=this._loadVectors(t.data,n,[l]);return(a&&i?a.concat(new vt(c)):new vt(c)).memoize()}return a.memoize()}_loadVectors(t,n,r){return new Uf(n,t.nodes,t.buffers,this.dictionaries).visitMany(r)}},Mc=class extends d0{constructor(t,n){super(n),this._reader=Hp(t)?new ad(this._handle=t):new Tc(this._handle=t)}isSync(){return!0}isStream(){return!0}[Symbol.iterator](){return this}cancel(){!this.closed&&(this.closed=!0)&&(this.reset()._reader.return(),this._reader=null,this.dictionaries=null)}open(t){return this.closed||(this.autoDestroy=b3(this,t),this.schema||(this.schema=this._reader.readSchema())||this.cancel()),this}throw(t){return!this.closed&&this.autoDestroy&&(this.closed=!0)?this.reset()._reader.throw(t):ue}return(t){return!this.closed&&this.autoDestroy&&(this.closed=!0)?this.reset()._reader.return(t):ue}next(){if(this.closed)return ue;let t,{_reader:n}=this;for(;t=this._readNextMessageAndValidate();)if(t.isSchema())this.reset(t.header());else if(t.isRecordBatch()){this._recordBatchIndex++;let r=t.header(),i=n.readMessageBody(t.bodyLength),o=this._loadRecordBatch(r,i);return{done:!1,value:o}}else if(t.isDictionaryBatch()){this._dictionaryIndex++;let r=t.header(),i=n.readMessageBody(t.bodyLength),o=this._loadDictionaryBatch(r,i);this.dictionaries.set(r.id,o)}return this.schema&&this._recordBatchIndex===0?(this._recordBatchIndex++,{done:!1,value:new Ja(this.schema)}):this.return()}_readNextMessageAndValidate(t){return this._reader.readMessage(t)}},Ac=class extends d0{constructor(t,n){super(n),this._reader=new sd(this._handle=t)}isAsync(){return!0}isStream(){return!0}[Symbol.asyncIterator](){return this}cancel(){return q(this,void 0,void 0,function*(){!this.closed&&(this.closed=!0)&&(yield this.reset()._reader.return(),this._reader=null,this.dictionaries=null)})}open(t){return q(this,void 0,void 0,function*(){return this.closed||(this.autoDestroy=b3(this,t),this.schema||(this.schema=yield this._reader.readSchema())||(yield this.cancel())),this})}throw(t){return q(this,void 0,void 0,function*(){return!this.closed&&this.autoDestroy&&(this.closed=!0)?yield this.reset()._reader.throw(t):ue})}return(t){return q(this,void 0,void 0,function*(){return!this.closed&&this.autoDestroy&&(this.closed=!0)?yield this.reset()._reader.return(t):ue})}next(){return q(this,void 0,void 0,function*(){if(this.closed)return ue;let t,{_reader:n}=this;for(;t=yield this._readNextMessageAndValidate();)if(t.isSchema())yield this.reset(t.header());else if(t.isRecordBatch()){this._recordBatchIndex++;let r=t.header(),i=yield n.readMessageBody(t.bodyLength),o=this._loadRecordBatch(r,i);return{done:!1,value:o}}else if(t.isDictionaryBatch()){this._dictionaryIndex++;let r=t.header(),i=yield n.readMessageBody(t.bodyLength),o=this._loadDictionaryBatch(r,i);this.dictionaries.set(r.id,o)}return this.schema&&this._recordBatchIndex===0?(this._recordBatchIndex++,{done:!1,value:new Ja(this.schema)}):yield this.return()})}_readNextMessageAndValidate(t){return q(this,void 0,void 0,function*(){return yield this._reader.readMessage(t)})}},h0=class extends Mc{constructor(t,n){super(t instanceof Rf?t:new Rf(t),n)}get footer(){return this._footer}get numDictionaries(){return this._footer?this._footer.numDictionaries:0}get numRecordBatches(){return this._footer?this._footer.numRecordBatches:0}isSync(){return!0}isFile(){return!0}open(t){if(!this.closed&&!this._footer){this.schema=(this._footer=this._readFooter()).schema;for(let n of this._footer.dictionaryBatches())n&&this._readDictionaryBatch(this._dictionaryIndex++)}return super.open(t)}readRecordBatch(t){var n;if(this.closed)return null;this._footer||this.open();let r=(n=this._footer)===null||n===void 0?void 0:n.getRecordBatch(t);if(r&&this._handle.seek(r.offset)){let i=this._reader.readMessage(Vt.RecordBatch);if(i?.isRecordBatch()){let o=i.header(),s=this._reader.readMessageBody(i.bodyLength);return this._loadRecordBatch(o,s)}}return null}_readDictionaryBatch(t){var n;let r=(n=this._footer)===null||n===void 0?void 0:n.getDictionaryBatch(t);if(r&&this._handle.seek(r.offset)){let i=this._reader.readMessage(Vt.DictionaryBatch);if(i?.isDictionaryBatch()){let o=i.header(),s=this._reader.readMessageBody(i.bodyLength),a=this._loadDictionaryBatch(o,s);this.dictionaries.set(o.id,a)}}}_readFooter(){let{_handle:t}=this,n=t.size-X_,r=t.readInt32(n),i=t.readAt(n-r,r);return $o.decode(i)}_readNextMessageAndValidate(t){var n;if(this._footer||this.open(),this._footer&&this._recordBatchIndex<this.numRecordBatches){let r=(n=this._footer)===null||n===void 0?void 0:n.getRecordBatch(this._recordBatchIndex);if(r&&this._handle.seek(r.offset))return this._reader.readMessage(t)}return null}},Z_=class extends Ac{constructor(t,...n){let r=typeof n[0]!="number"?n.shift():void 0,i=n[0]instanceof Map?n.shift():void 0;super(t instanceof zs?t:new zs(t,r),i)}get footer(){return this._footer}get numDictionaries(){return this._footer?this._footer.numDictionaries:0}get numRecordBatches(){return this._footer?this._footer.numRecordBatches:0}isFile(){return!0}isAsync(){return!0}open(t){let n=Object.create(null,{open:{get:()=>super.open}});return q(this,void 0,void 0,function*(){if(!this.closed&&!this._footer){this.schema=(this._footer=yield this._readFooter()).schema;for(let r of this._footer.dictionaryBatches())r&&(yield this._readDictionaryBatch(this._dictionaryIndex++))}return yield n.open.call(this,t)})}readRecordBatch(t){var n;return q(this,void 0,void 0,function*(){if(this.closed)return null;this._footer||(yield this.open());let r=(n=this._footer)===null||n===void 0?void 0:n.getRecordBatch(t);if(r&&(yield this._handle.seek(r.offset))){let i=yield this._reader.readMessage(Vt.RecordBatch);if(i?.isRecordBatch()){let o=i.header(),s=yield this._reader.readMessageBody(i.bodyLength);return this._loadRecordBatch(o,s)}}return null})}_readDictionaryBatch(t){var n;return q(this,void 0,void 0,function*(){let r=(n=this._footer)===null||n===void 0?void 0:n.getDictionaryBatch(t);if(r&&(yield this._handle.seek(r.offset))){let i=yield this._reader.readMessage(Vt.DictionaryBatch);if(i?.isDictionaryBatch()){let o=i.header(),s=yield this._reader.readMessageBody(i.bodyLength),a=this._loadDictionaryBatch(o,s);this.dictionaries.set(o.id,a)}}})}_readFooter(){return q(this,void 0,void 0,function*(){let{_handle:t}=this;t._pending&&(yield t._pending);let n=t.size-X_,r=yield t.readInt32(n),i=yield t.readAt(n-r,r);return $o.decode(i)})}_readNextMessageAndValidate(t){return q(this,void 0,void 0,function*(){if(this._footer||(yield this.open()),this._footer&&this._recordBatchIndex<this.numRecordBatches){let n=this._footer.getRecordBatch(this._recordBatchIndex);if(n&&(yield this._handle.seek(n.offset)))return yield this._reader.readMessage(t)}return null})}},K_=class extends Mc{constructor(t,n){super(t,n)}_loadVectors(t,n,r){return new Pm(n,t.nodes,t.buffers,this.dictionaries).visitMany(r)}};function b3(e,t){return t&&typeof t.autoDestroy=="boolean"?t.autoDestroy:e.autoDestroy}function*y3(e){let t=Oe.from(e);try{if(!t.open({autoDestroy:!1}).closed)do yield t;while(!t.reset().open().closed)}finally{t.cancel()}}function g3(e){return hr(this,arguments,function*(){let n=yield Nt(Oe.from(e));try{if(!(yield Nt(n.open({autoDestroy:!1}))).closed)do yield yield Nt(n);while(!(yield Nt(n.reset().open())).closed)}finally{yield Nt(n.cancel())}})}function vB(e){return new Xi(new K_(e))}function SB(e){let t=e.peek(Ec+7&-8);return t&&t.byteLength>=4?f0(t)?new js(new h0(e.read())):new Xi(new Mc(e)):new Xi(new Mc(function*(){}()))}function TB(e){return q(this,void 0,void 0,function*(){let t=yield e.peek(Ec+7&-8);return t&&t.byteLength>=4?f0(t)?new js(new h0(yield e.read())):new Vs(new Ac(e)):new Vs(new Ac(function(){return hr(this,arguments,function*(){})}()))})}function IB(e){return q(this,void 0,void 0,function*(){let{size:t}=yield e.stat(),n=new zs(e,t);return t>=m3&&f0(yield n.readAt(0,Ec+7&-8))?new ld(new Z_(n)):new Vs(new Ac(n))})}var ve=class extends lt{constructor(){super(),this._byteLength=0,this._nodes=[],this._buffers=[],this._bufferRegions=[]}static assemble(...t){let n=i=>i.flatMap(o=>Array.isArray(o)?n(o):o instanceof se?o.data.children:o.data),r=new ve;return r.visitMany(n(t)),r}visit(t){if(t instanceof vt)return this.visitMany(t.data),this;let{type:n}=t;if(!tt.isDictionary(n)){let{length:r,nullCount:i}=t;if(r>2147483647)throw new RangeError("Cannot write arrays larger than 2^31 - 1 in length");tt.isNull(n)||wi.call(this,i<=0?new Uint8Array(0):fc(t.offset,r,t.nullBitmap)),this.nodes.push(new xi(r,i))}return super.visit(t)}visitNull(t){return this}visitDictionary(t){return this.visit(t.clone(t.type.indices))}get nodes(){return this._nodes}get buffers(){return this._buffers}get byteLength(){return this._byteLength}get bufferRegions(){return this._bufferRegions}};function wi(e){let t=e.byteLength+7&-8;return this.buffers.push(e),this.bufferRegions.push(new Tr(this._byteLength,t)),this._byteLength+=t,this}function EB(e){let{type:t,length:n,typeIds:r,valueOffsets:i}=e;if(wi.call(this,r),t.mode===xe.Sparse)return Q_.call(this,e);if(t.mode===xe.Dense){if(e.offset<=0)return wi.call(this,i),Q_.call(this,e);{let o=r.reduce((u,d)=>Math.max(u,d),r[0]),s=new Int32Array(o+1),a=new Int32Array(o+1).fill(-1),l=new Int32Array(n),c=Sf(-i[0],n,i);for(let u,d,f=-1;++f<n;)(d=a[u=r[f]])===-1&&(d=a[u]=c[u]),l[f]=c[f]-d,++s[u];wi.call(this,l);for(let u,d=-1,f=t.children.length;++d<f;)if(u=e.children[d]){let h=t.typeIds[d],p=Math.min(n,s[h]);this.visit(u.slice(a[h],p))}}}return this}function MB(e){let t;return e.nullCount>=e.length?wi.call(this,new Uint8Array(0)):(t=e.values)instanceof Uint8Array?wi.call(this,fc(e.offset,e.length,t)):wi.call(this,ja(e.values))}function Ys(e){return wi.call(this,e.values.subarray(0,e.length*e.stride))}function _3(e){let{length:t,values:n,valueOffsets:r}=e,i=r[0],o=r[t],s=Math.min(o-i,n.byteLength-i);return wi.call(this,Sf(-r[0],t,r)),wi.call(this,n.subarray(i,i+s)),this}function J_(e){let{length:t,valueOffsets:n}=e;return n&&wi.call(this,Sf(n[0],t,n)),this.visit(e.children[0])}function Q_(e){return this.visitMany(e.type.children.map((t,n)=>e.children[n]).filter(Boolean))[0]}ve.prototype.visitBool=MB;ve.prototype.visitInt=Ys;ve.prototype.visitFloat=Ys;ve.prototype.visitUtf8=_3;ve.prototype.visitBinary=_3;ve.prototype.visitFixedSizeBinary=Ys;ve.prototype.visitDate=Ys;ve.prototype.visitTimestamp=Ys;ve.prototype.visitTime=Ys;ve.prototype.visitDecimal=Ys;ve.prototype.visitList=J_;ve.prototype.visitStruct=Q_;ve.prototype.visitUnion=EB;ve.prototype.visitInterval=Ys;ve.prototype.visitFixedSizeList=J_;ve.prototype.visitMap=J_;var el=class extends Ga{constructor(t){super(),this._position=0,this._started=!1,this._sink=new Wi,this._schema=null,this._dictionaryBlocks=[],this._recordBatchBlocks=[],this._dictionaryDeltaOffsets=new Map,qn(t)||(t={autoDestroy:!0,writeLegacyIpcFormat:!1}),this._autoDestroy=typeof t.autoDestroy=="boolean"?t.autoDestroy:!0,this._writeLegacyIpcFormat=typeof t.writeLegacyIpcFormat=="boolean"?t.writeLegacyIpcFormat:!1}static throughNode(t){throw new Error('"throughNode" not available in this environment')}static throughDOM(t,n){throw new Error('"throughDOM" not available in this environment')}toString(t=!1){return this._sink.toString(t)}toUint8Array(t=!1){return this._sink.toUint8Array(t)}writeAll(t){return si(t)?t.then(n=>this.writeAll(n)):Vr(t)?ex(this,t):tx(this,t)}get closed(){return this._sink.closed}[Symbol.asyncIterator](){return this._sink[Symbol.asyncIterator]()}toDOMStream(t){return this._sink.toDOMStream(t)}toNodeStream(t){return this._sink.toNodeStream(t)}close(){return this.reset()._sink.close()}abort(t){return this.reset()._sink.abort(t)}finish(){return this._autoDestroy?this.close():this.reset(this._sink,this._schema),this}reset(t=this._sink,n=null){return t===this._sink||t instanceof Wi?this._sink=t:(this._sink=new Wi,t&&jT(t)?this.toDOMStream({type:"bytes"}).pipeTo(t):t&&YT(t)&&this.toNodeStream({objectMode:!1}).pipe(t)),this._started&&this._schema&&this._writeFooter(this._schema),this._started=!1,this._dictionaryBlocks=[],this._recordBatchBlocks=[],this._dictionaryDeltaOffsets=new Map,(!n||!Qa(n,this._schema))&&(n==null?(this._position=0,this._schema=null):(this._started=!0,this._schema=n,this._writeSchema(n))),this}write(t){let n=null;if(this._sink){if(t==null)return this.finish()&&void 0;if(t instanceof Ie&&!(n=t.schema))return this.finish()&&void 0;if(t instanceof se&&!(n=t.schema))return this.finish()&&void 0}else throw new Error("RecordBatchWriter is closed");if(n&&!Qa(n,this._schema)){if(this._started&&this._autoDestroy)return this.close();this.reset(this._sink,n)}t instanceof se?t instanceof Ja||this._writeRecordBatch(t):t instanceof Ie?this.writeAll(t.batches):ai(t)&&this.writeAll(t)}_writeMessage(t,n=8){let r=n-1,i=ze.encode(t),o=i.byteLength,s=this._writeLegacyIpcFormat?4:8,a=o+s+r&~r,l=a-o-s;return t.headerType===Vt.RecordBatch?this._recordBatchBlocks.push(new bi(a,t.bodyLength,this._position)):t.headerType===Vt.DictionaryBatch&&this._dictionaryBlocks.push(new bi(a,t.bodyLength,this._position)),this._writeLegacyIpcFormat||this._write(Int32Array.of(-1)),this._write(Int32Array.of(a-s)),o>0&&this._write(i),this._writePadding(l)}_write(t){if(this._started){let n=xt(t);n&&n.byteLength>0&&(this._sink.write(n),this._position+=n.byteLength)}return this}_writeSchema(t){return this._writeMessage(ze.from(t))}_writeFooter(t){return this._writeLegacyIpcFormat?this._write(Int32Array.of(0)):this._write(Int32Array.of(-1,0))}_writeMagic(){return this._write(Ic)}_writePadding(t){return t>0?this._write(new Uint8Array(t)):this}_writeRecordBatch(t){let{byteLength:n,nodes:r,bufferRegions:i,buffers:o}=ve.assemble(t),s=new vn(t.numRows,r,i),a=ze.from(s,n);return this._writeDictionaries(t)._writeMessage(a)._writeBodyBuffers(o)}_writeDictionaryBatch(t,n,r=!1){this._dictionaryDeltaOffsets.set(n,t.length+(this._dictionaryDeltaOffsets.get(n)||0));let{byteLength:i,nodes:o,bufferRegions:s,buffers:a}=ve.assemble(new vt([t])),l=new vn(t.length,o,s),c=new Ir(l,n,r),u=ze.from(c,i);return this._writeMessage(u)._writeBodyBuffers(a)}_writeBodyBuffers(t){let n,r,i;for(let o=-1,s=t.length;++o<s;)(n=t[o])&&(r=n.byteLength)>0&&(this._write(n),(i=(r+7&-8)-r)>0&&this._writePadding(i));return this}_writeDictionaries(t){for(let[n,r]of t.dictionaries){let i=this._dictionaryDeltaOffsets.get(n)||0;if(i===0||(r=r?.slice(i)).length>0)for(let o of r.data)this._writeDictionaryBatch(o,n,i>0),i+=o.length}return this}},qo=class extends el{static writeAll(t,n){let r=new qo(n);return si(t)?t.then(i=>r.writeAll(i)):Vr(t)?ex(r,t):tx(r,t)}},Wo=class extends el{static writeAll(t){let n=new Wo;return si(t)?t.then(r=>n.writeAll(r)):Vr(t)?ex(n,t):tx(n,t)}constructor(){super(),this._autoDestroy=!0}_writeSchema(t){return this._writeMagic()._writePadding(2)}_writeFooter(t){let n=$o.encode(new $o(t,en.V4,this._recordBatchBlocks,this._dictionaryBlocks));return super._writeFooter(t)._write(n)._write(Int32Array.of(n.byteLength))._writeMagic()}};function tx(e,t){let n=t;t instanceof Ie&&(n=t.batches,e.reset(void 0,t.schema));for(let r of n)e.write(r);return e.finish()}function ex(e,t){var n,r,i,o;return q(this,void 0,void 0,function*(){try{for(n=zr(t);r=yield n.next(),!r.done;){let s=r.value;e.write(s)}}catch(s){i={error:s}}finally{try{r&&!r.done&&(o=n.return)&&(yield o.call(n))}finally{if(i)throw i.error}}return e.finish()})}function x3(e,t){if(Vr(e))return FB(e,t);if(ai(e))return AB(e,t);throw new Error("toDOMStream() must be called with an Iterable or AsyncIterable")}function AB(e,t){let n=null,r=t?.type==="bytes"||!1,i=t?.highWaterMark||Math.pow(2,24);return new ReadableStream(Object.assign(Object.assign({},t),{start(s){o(s,n||(n=e[Symbol.iterator]()))},pull(s){n?o(s,n):s.close()},cancel(){(n?.return&&n.return()||!0)&&(n=null)}}),Object.assign({highWaterMark:r?i:void 0},t));function o(s,a){let l,c=null,u=s.desiredSize||null;for(;!(c=a.next(r?u:null)).done;)if(ArrayBuffer.isView(c.value)&&(l=xt(c.value))&&(u!=null&&r&&(u=u-l.byteLength+1),c.value=l),s.enqueue(c.value),u!=null&&--u<=0)return;s.close()}}function FB(e,t){let n=null,r=t?.type==="bytes"||!1,i=t?.highWaterMark||Math.pow(2,24);return new ReadableStream(Object.assign(Object.assign({},t),{start(s){return q(this,void 0,void 0,function*(){yield o(s,n||(n=e[Symbol.asyncIterator]()))})},pull(s){return q(this,void 0,void 0,function*(){n?yield o(s,n):s.close()})},cancel(){return q(this,void 0,void 0,function*(){(n?.return&&(yield n.return())||!0)&&(n=null)})}}),Object.assign({highWaterMark:r?i:void 0},t));function o(s,a){return q(this,void 0,void 0,function*(){let l,c=null,u=s.desiredSize||null;for(;!(c=yield a.next(r?u:null)).done;)if(ArrayBuffer.isView(c.value)&&(l=xt(c.value))&&(u!=null&&r&&(u=u-l.byteLength+1),c.value=l),s.enqueue(c.value),u!=null&&--u<=0)return;s.close()})}}function S3(e){return new nx(e)}var nx=class{constructor(t){this._numChunks=0,this._finished=!1,this._bufferedSize=0;let{["readableStrategy"]:n,["writableStrategy"]:r,["queueingStrategy"]:i="count"}=t,o=zT(t,["readableStrategy","writableStrategy","queueingStrategy"]);this._controller=null,this._builder=Xa(o),this._getSize=i!=="bytes"?w3:v3;let{["highWaterMark"]:s=i==="bytes"?Math.pow(2,14):1e3}=Object.assign({},n),{["highWaterMark"]:a=i==="bytes"?Math.pow(2,14):1e3}=Object.assign({},r);this.readable=new ReadableStream({cancel:()=>{this._builder.clear()},pull:l=>{this._maybeFlush(this._builder,this._controller=l)},start:l=>{this._maybeFlush(this._builder,this._controller=l)}},{highWaterMark:s,size:i!=="bytes"?w3:v3}),this.writable=new WritableStream({abort:()=>{this._builder.clear()},write:()=>{this._maybeFlush(this._builder,this._controller)},close:()=>{this._maybeFlush(this._builder.finish(),this._controller)}},{highWaterMark:a,size:l=>this._writeValueAndReturnChunkSize(l)})}_writeValueAndReturnChunkSize(t){let n=this._bufferedSize;return this._bufferedSize=this._getSize(this._builder.append(t)),this._bufferedSize-n}_maybeFlush(t,n){n!=null&&(this._bufferedSize>=n.desiredSize&&++this._numChunks&&this._enqueue(n,t.toVector()),t.finished&&((t.length>0||this._numChunks===0)&&++this._numChunks&&this._enqueue(n,t.toVector()),!this._finished&&(this._finished=!0)&&this._enqueue(n,null)))}_enqueue(t,n){this._bufferedSize=0,this._controller=null,n==null?t.close():t.enqueue(n)}},w3=e=>{var t;return(t=e?.length)!==null&&t!==void 0?t:0},v3=e=>{var t;return(t=e?.byteLength)!==null&&t!==void 0?t:0};function p0(e,t){let n=new Wi,r=null,i=new ReadableStream({cancel(){return q(this,void 0,void 0,function*(){yield n.close()})},start(a){return q(this,void 0,void 0,function*(){yield s(a,r||(r=yield o()))})},pull(a){return q(this,void 0,void 0,function*(){r?yield s(a,r):a.close()})}});return{writable:new WritableStream(n,Object.assign({highWaterMark:Math.pow(2,14)},e)),readable:i};function o(){return q(this,void 0,void 0,function*(){return yield(yield Oe.from(n)).open(t)})}function s(a,l){return q(this,void 0,void 0,function*(){let c=a.desiredSize,u=null;for(;!(u=yield l.next()).done;)if(a.enqueue(u.value),c!=null&&--c<=0)return;a.close()})}}function m0(e,t){let n=new this(e),r=new wr(n),i=new ReadableStream({cancel(){return q(this,void 0,void 0,function*(){yield r.cancel()})},pull(s){return q(this,void 0,void 0,function*(){yield o(s)})},start(s){return q(this,void 0,void 0,function*(){yield o(s)})}},Object.assign({highWaterMark:Math.pow(2,14)},t));return{writable:new WritableStream(n,e),readable:i};function o(s){return q(this,void 0,void 0,function*(){let a=null,l=s.desiredSize;for(;a=yield r.read(l||null);)if(s.enqueue(a),l!=null&&(l-=a.byteLength)<=0)return;s.close()})}}function y0(e,t="stream"){return(t==="stream"?qo:Wo).writeAll(e).toUint8Array(!0)}var CB=Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({},m_),U_),N_),y_),f_),k_),{compareSchemas:Qa,compareFields:ZI,compareTypes:KI});_n.toDOMStream=x3;de.throughDOM=S3;Oe.throughDOM=p0;js.throughDOM=p0;Xi.throughDOM=p0;el.throughDOM=m0;Wo.throughDOM=m0;qo.throughDOM=m0;var BB=Object.create,I3=Object.defineProperty,DB=Object.getOwnPropertyDescriptor,LB=Object.getOwnPropertyNames,RB=Object.getPrototypeOf,PB=Object.prototype.hasOwnProperty,UB=(e,t)=>()=>(t||e((t={exports:{}}).exports,t),t.exports),$B=(e,t,n,r)=>{if(t&&typeof t=="object"||typeof t=="function")for(let i of LB(t))!PB.call(e,i)&&i!==n&&I3(e,i,{get:()=>t[i],enumerable:!(r=DB(t,i))||r.enumerable});return e},zB=(e,t,n)=>(n=e!=null?BB(RB(e)):{},$B(t||!e||!e.__esModule?I3(n,"default",{value:e,enumerable:!0}):n,e)),VB=UB((e,t)=>{t.exports=Worker}),jB=(e=>(e[e.NONE=0]="NONE",e[e.DEBUG=1]="DEBUG",e[e.INFO=2]="INFO",e[e.WARNING=3]="WARNING",e[e.ERROR=4]="ERROR",e))(jB||{}),YB=(e=>(e[e.NONE=0]="NONE",e[e.CONNECT=1]="CONNECT",e[e.DISCONNECT=2]="DISCONNECT",e[e.OPEN=3]="OPEN",e[e.QUERY=4]="QUERY",e[e.INSTANTIATE=5]="INSTANTIATE",e))(YB||{}),qB=(e=>(e[e.NONE=0]="NONE",e[e.OK=1]="OK",e[e.ERROR=2]="ERROR",e[e.START=3]="START",e[e.RUN=4]="RUN",e[e.CAPTURE=5]="CAPTURE",e))(qB||{}),WB=(e=>(e[e.NONE=0]="NONE",e[e.WEB_WORKER=1]="WEB_WORKER",e[e.NODE_WORKER=2]="NODE_WORKER",e[e.BINDINGS=3]="BINDINGS",e[e.ASYNC_DUCKDB=4]="ASYNC_DUCKDB",e))(WB||{});var E3=class{constructor(e=2){this.level=e}log(e){e.level>=this.level&&console.log(e)}};var GB=(e=>(e[e.SUCCESS=0]="SUCCESS",e))(GB||{}),HB=class{constructor(e,t){this._bindings=e,this._conn=t}get bindings(){return this._bindings}async close(){return this._bindings.disconnect(this._conn)}useUnsafe(e){return e(this._bindings,this._conn)}async query(e){this._bindings.logger.log({timestamp:new Date,level:2,origin:4,topic:4,event:4,value:e});let t=await this._bindings.runQuery(this._conn,e),n=Oe.from(t);return console.assert(n.isSync()),console.assert(n.isFile()),new Ie(n)}async send(e){this._bindings.logger.log({timestamp:new Date,level:2,origin:4,topic:4,event:4,value:e});let t=await this._bindings.startPendingQuery(this._conn,e);for(;t==null;)t=await this._bindings.pollPendingQuery(this._conn);let n=new M3(this._bindings,this._conn,t),r=await Oe.from(n);return console.assert(r.isAsync()),console.assert(r.isStream()),r}async cancelSent(){return await this._bindings.cancelPendingQuery(this._conn)}async getTableNames(e){return await this._bindings.getTableNames(this._conn,e)}async prepare(e){let t=await this._bindings.createPrepared(this._conn,e);return new XB(this._bindings,this._conn,t)}async insertArrowTable(e,t){let n=y0(e,"stream");await this.insertArrowFromIPCStream(n,t)}async insertArrowFromIPCStream(e,t){await this._bindings.insertArrowFromIPCStream(this._conn,e,t)}async insertCSVFromPath(e,t){await this._bindings.insertCSVFromPath(this._conn,e,t)}async insertJSONFromPath(e,t){await this._bindings.insertJSONFromPath(this._conn,e,t)}},M3=class{constructor(e,t,n){this.db=e,this.conn=t,this.header=n,this._first=!0,this._depleted=!1,this._inFlight=null}async next(){if(this._first)return this._first=!1,{done:!1,value:this.header};if(this._depleted)return{done:!0,value:null};let e;return this._inFlight!=null?(e=await this._inFlight,this._inFlight=null):e=await this.db.fetchQueryResults(this.conn),this._depleted=e.length==0,this._depleted||(this._inFlight=this.db.fetchQueryResults(this.conn)),{done:this._depleted,value:e}}[Symbol.asyncIterator](){return this}},XB=class{constructor(e,t,n){this.bindings=e,this.connectionId=t,this.statementId=n}async close(){await this.bindings.closePrepared(this.connectionId,this.statementId)}async query(...e){let t=await this.bindings.runPrepared(this.connectionId,this.statementId,e),n=Oe.from(t);return console.assert(n.isSync()),console.assert(n.isFile()),new Ie(n)}async send(...e){let t=await this.bindings.sendPrepared(this.connectionId,this.statementId,e),n=new M3(this.bindings,this.connectionId,t),r=await Oe.from(n);return console.assert(r.isAsync()),console.assert(r.isStream()),r}},ZB=(e=>(e.CANCEL_PENDING_QUERY="CANCEL_PENDING_QUERY",e.CLOSE_PREPARED="CLOSE_PREPARED",e.COLLECT_FILE_STATISTICS="COLLECT_FILE_STATISTICS",e.CONNECT="CONNECT",e.COPY_FILE_TO_BUFFER="COPY_FILE_TO_BUFFER",e.COPY_FILE_TO_PATH="COPY_FILE_TO_PATH",e.CREATE_PREPARED="CREATE_PREPARED",e.DISCONNECT="DISCONNECT",e.DROP_FILE="DROP_FILE",e.DROP_FILES="DROP_FILES",e.EXPORT_FILE_STATISTICS="EXPORT_FILE_STATISTICS",e.FETCH_QUERY_RESULTS="FETCH_QUERY_RESULTS",e.FLUSH_FILES="FLUSH_FILES",e.GET_FEATURE_FLAGS="GET_FEATURE_FLAGS",e.GET_TABLE_NAMES="GET_TABLE_NAMES",e.GET_VERSION="GET_VERSION",e.GLOB_FILE_INFOS="GLOB_FILE_INFOS",e.INSERT_ARROW_FROM_IPC_STREAM="INSERT_ARROW_FROM_IPC_STREAM",e.INSERT_CSV_FROM_PATH="IMPORT_CSV_FROM_PATH",e.INSERT_JSON_FROM_PATH="IMPORT_JSON_FROM_PATH",e.INSTANTIATE="INSTANTIATE",e.OPEN="OPEN",e.PING="PING",e.POLL_PENDING_QUERY="POLL_PENDING_QUERY",e.REGISTER_FILE_BUFFER="REGISTER_FILE_BUFFER",e.REGISTER_FILE_HANDLE="REGISTER_FILE_HANDLE",e.REGISTER_FILE_URL="REGISTER_FILE_URL",e.RESET="RESET",e.RUN_PREPARED="RUN_PREPARED",e.RUN_QUERY="RUN_QUERY",e.SEND_PREPARED="SEND_PREPARED",e.START_PENDING_QUERY="START_PENDING_QUERY",e.TOKENIZE="TOKENIZE",e))(ZB||{}),KB=(e=>(e.CONNECTION_INFO="CONNECTION_INFO",e.ERROR="ERROR",e.FEATURE_FLAGS="FEATURE_FLAGS",e.FILE_BUFFER="FILE_BUFFER",e.FILE_INFOS="FILE_INFOS",e.FILE_SIZE="FILE_SIZE",e.FILE_STATISTICS="FILE_STATISTICS",e.INSTANTIATE_PROGRESS="INSTANTIATE_PROGRESS",e.LOG="LOG",e.OK="OK",e.PREPARED_STATEMENT_ID="PREPARED_STATEMENT_ID",e.QUERY_PLAN="QUERY_PLAN",e.QUERY_RESULT="QUERY_RESULT",e.QUERY_RESULT_CHUNK="QUERY_RESULT_CHUNK",e.QUERY_RESULT_HEADER="QUERY_RESULT_HEADER",e.QUERY_RESULT_HEADER_OR_NULL="QUERY_RESULT_HEADER_OR_NULL",e.REGISTERED_FILE="REGISTERED_FILE",e.SCRIPT_TOKENS="SCRIPT_TOKENS",e.SUCCESS="SUCCESS",e.TABLE_NAMES="TABLE_NAMES",e.VERSION_STRING="VERSION_STRING",e))(KB||{}),jt=class{constructor(e,t){this.promiseResolver=()=>{},this.promiseRejecter=()=>{},this.type=e,this.data=t,this.promise=new Promise((n,r)=>{this.promiseResolver=n,this.promiseRejecter=r})}};function g0(e){switch(e.typeId){case E.Binary:return{sqlType:"binary"};case E.Bool:return{sqlType:"bool"};case E.Date:return{sqlType:"date"};case E.DateDay:return{sqlType:"date32[d]"};case E.DateMillisecond:return{sqlType:"date64[ms]"};case E.Decimal:{let t=e;return{sqlType:"decimal",precision:t.precision,scale:t.scale}}case E.Float:return{sqlType:"float"};case E.Float16:return{sqlType:"float16"};case E.Float32:return{sqlType:"float32"};case E.Float64:return{sqlType:"float64"};case E.Int:return{sqlType:"int32"};case E.Int16:return{sqlType:"int16"};case E.Int32:return{sqlType:"int32"};case E.Int64:return{sqlType:"int64"};case E.Uint16:return{sqlType:"uint16"};case E.Uint32:return{sqlType:"uint32"};case E.Uint64:return{sqlType:"uint64"};case E.Uint8:return{sqlType:"uint8"};case E.IntervalDayTime:return{sqlType:"interval[dt]"};case E.IntervalYearMonth:return{sqlType:"interval[m]"};case E.List:return{sqlType:"list",valueType:g0(e.valueType)};case E.FixedSizeBinary:return{sqlType:"fixedsizebinary",byteWidth:e.byteWidth};case E.Null:return{sqlType:"null"};case E.Utf8:return{sqlType:"utf8"};case E.Struct:return{sqlType:"struct",fields:e.children.map(t=>lx(t.name,t.type))};case E.Map:{let t=e;return{sqlType:"map",keyType:g0(t.keyType),valueType:g0(t.valueType)}}case E.Time:return{sqlType:"time[s]"};case E.TimeMicrosecond:return{sqlType:"time[us]"};case E.TimeMillisecond:return{sqlType:"time[ms]"};case E.TimeNanosecond:return{sqlType:"time[ns]"};case E.TimeSecond:return{sqlType:"time[s]"};case E.Timestamp:return{sqlType:"timestamp",timezone:e.timezone||void 0};case E.TimestampSecond:return{sqlType:"timestamp[s]",timezone:e.timezone||void 0};case E.TimestampMicrosecond:return{sqlType:"timestamp[us]",timezone:e.timezone||void 0};case E.TimestampNanosecond:return{sqlType:"timestamp[ns]",timezone:e.timezone||void 0};case E.TimestampMillisecond:return{sqlType:"timestamp[ms]",timezone:e.timezone||void 0}}throw new Error(`unsupported arrow type: ${e.toString()}`)}function lx(e,t){let n=g0(t);return n.name=e,n}var QB=new TextEncoder,A3=class{constructor(e,t=null){this._onInstantiationProgress=[],this._worker=null,this._workerShutdownPromise=null,this._workerShutdownResolver=()=>{},this._nextMessageId=0,this._pendingRequests=new Map,this._logger=e,this._onMessageHandler=this.onMessage.bind(this),this._onErrorHandler=this.onError.bind(this),this._onCloseHandler=this.onClose.bind(this),t!=null&&this.attach(t)}get logger(){return this._logger}attach(e){this._worker=e,this._worker.addEventListener("message",this._onMessageHandler),this._worker.addEventListener("error",this._onErrorHandler),this._worker.addEventListener("close",this._onCloseHandler),this._workerShutdownPromise=new Promise((t,n)=>{this._workerShutdownResolver=t})}detach(){!this._worker||(this._worker.removeEventListener("message",this._onMessageHandler),this._worker.removeEventListener("error",this._onErrorHandler),this._worker.removeEventListener("close",this._onCloseHandler),this._worker=null,this._workerShutdownResolver(null),this._workerShutdownPromise=null,this._workerShutdownResolver=()=>{})}async terminate(){!this._worker||(this._worker.terminate(),this._worker=null,this._workerShutdownPromise=null,this._workerShutdownResolver=()=>{})}async postTask(e,t=[]){if(!this._worker){console.error("cannot send a message since the worker is not set!");return}let n=this._nextMessageId++;return this._pendingRequests.set(n,e),this._worker.postMessage({messageId:n,type:e.type,data:e.data},t),await e.promise}onMessage(e){let t=e.data;switch(t.type){case"LOG":{this._logger.log(t.data);return}case"INSTANTIATE_PROGRESS":{for(let r of this._onInstantiationProgress)r(t.data);return}}let n=this._pendingRequests.get(t.requestId);if(!n){console.warn(`unassociated response: [${t.requestId}, ${t.type.toString()}]`);return}if(this._pendingRequests.delete(t.requestId),t.type=="ERROR"){let r=new Error(t.data.message);r.name=t.data.name,r.stack=t.data.stack,n.promiseRejecter(r);return}switch(n.type){case"CLOSE_PREPARED":case"COLLECT_FILE_STATISTICS":case"COPY_FILE_TO_PATH":case"DISCONNECT":case"DROP_FILE":case"DROP_FILES":case"FLUSH_FILES":case"INSERT_ARROW_FROM_IPC_STREAM":case"IMPORT_CSV_FROM_PATH":case"IMPORT_JSON_FROM_PATH":case"OPEN":case"PING":case"REGISTER_FILE_BUFFER":case"REGISTER_FILE_HANDLE":case"REGISTER_FILE_URL":case"RESET":if(t.type=="OK"){n.promiseResolver(t.data);return}break;case"INSTANTIATE":if(this._onInstantiationProgress=[],t.type=="OK"){n.promiseResolver(t.data);return}break;case"GLOB_FILE_INFOS":if(t.type=="FILE_INFOS"){n.promiseResolver(t.data);return}break;case"GET_VERSION":if(t.type=="VERSION_STRING"){n.promiseResolver(t.data);return}break;case"GET_FEATURE_FLAGS":if(t.type=="FEATURE_FLAGS"){n.promiseResolver(t.data);return}break;case"GET_TABLE_NAMES":if(t.type=="TABLE_NAMES"){n.promiseResolver(t.data);return}break;case"TOKENIZE":if(t.type=="SCRIPT_TOKENS"){n.promiseResolver(t.data);return}break;case"COPY_FILE_TO_BUFFER":if(t.type=="FILE_BUFFER"){n.promiseResolver(t.data);return}break;case"EXPORT_FILE_STATISTICS":if(t.type=="FILE_STATISTICS"){n.promiseResolver(t.data);return}break;case"CONNECT":if(t.type=="CONNECTION_INFO"){n.promiseResolver(t.data);return}break;case"RUN_PREPARED":case"RUN_QUERY":if(t.type=="QUERY_RESULT"){n.promiseResolver(t.data);return}break;case"SEND_PREPARED":if(t.type=="QUERY_RESULT_HEADER"){n.promiseResolver(t.data);return}break;case"START_PENDING_QUERY":if(t.type=="QUERY_RESULT_HEADER_OR_NULL"){n.promiseResolver(t.data);return}break;case"POLL_PENDING_QUERY":if(t.type=="QUERY_RESULT_HEADER_OR_NULL"){n.promiseResolver(t.data);return}break;case"CANCEL_PENDING_QUERY":if(this._onInstantiationProgress=[],t.type=="SUCCESS"){n.promiseResolver(t.data);return}break;case"FETCH_QUERY_RESULTS":if(t.type=="QUERY_RESULT_CHUNK"){n.promiseResolver(t.data);return}break;case"CREATE_PREPARED":if(t.type=="PREPARED_STATEMENT_ID"){n.promiseResolver(t.data);return}break}n.promiseRejecter(new Error(`unexpected response type: ${t.type.toString()}`))}onError(e){console.error(e),console.error(`error in duckdb worker: ${e.message}`),this._pendingRequests.clear()}onClose(){if(this._workerShutdownResolver(null),this._pendingRequests.size!=0){console.warn(`worker terminated with ${this._pendingRequests.size} pending requests`);return}this._pendingRequests.clear()}async reset(){let e=new jt("RESET",null);return await this.postTask(e)}async ping(){let e=new jt("PING",null);await this.postTask(e)}async dropFile(e){let t=new jt("DROP_FILE",e);return await this.postTask(t)}async dropFiles(){let e=new jt("DROP_FILES",null);return await this.postTask(e)}async flushFiles(){let e=new jt("FLUSH_FILES",null);return await this.postTask(e)}async instantiate(e,t=null,n=r=>{}){this._onInstantiationProgress.push(n);let r=new jt("INSTANTIATE",[e,t]);return await this.postTask(r)}async getVersion(){let e=new jt("GET_VERSION",null);return await this.postTask(e)}async getFeatureFlags(){let e=new jt("GET_FEATURE_FLAGS",null);return await this.postTask(e)}async open(e){let t=new jt("OPEN",e);await this.postTask(t)}async tokenize(e){let t=new jt("TOKENIZE",e);return await this.postTask(t)}async connectInternal(){let e=new jt("CONNECT",null);return await this.postTask(e)}async connect(){let e=await this.connectInternal();return new HB(this,e)}async disconnect(e){let t=new jt("DISCONNECT",e);await this.postTask(t)}async runQuery(e,t){let n=new jt("RUN_QUERY",[e,t]);return await this.postTask(n)}async startPendingQuery(e,t){let n=new jt("START_PENDING_QUERY",[e,t]);return await this.postTask(n)}async pollPendingQuery(e){let t=new jt("POLL_PENDING_QUERY",e);return await this.postTask(t)}async cancelPendingQuery(e){let t=new jt("CANCEL_PENDING_QUERY",e);return await this.postTask(t)}async fetchQueryResults(e){let t=new jt("FETCH_QUERY_RESULTS",e);return await this.postTask(t)}async getTableNames(e,t){let n=new jt("GET_TABLE_NAMES",[e,t]);return await this.postTask(n)}async createPrepared(e,t){let n=new jt("CREATE_PREPARED",[e,t]);return await this.postTask(n)}async closePrepared(e,t){let n=new jt("CLOSE_PREPARED",[e,t]);await this.postTask(n)}async runPrepared(e,t,n){let r=new jt("RUN_PREPARED",[e,t,n]);return await this.postTask(r)}async sendPrepared(e,t,n){let r=new jt("SEND_PREPARED",[e,t,n]);return await this.postTask(r)}async globFiles(e){let t=new jt("GLOB_FILE_INFOS",e);return await this.postTask(t)}async registerFileText(e,t){let n=QB.encode(t);await this.registerFileBuffer(e,n)}async registerFileURL(e,t){t===void 0&&(t=e);let n=new jt("REGISTER_FILE_URL",[e,t]);await this.postTask(n)}async registerEmptyFileBuffer(e){let t=new jt("REGISTER_FILE_BUFFER",[e,new Uint8Array]);await this.postTask(t)}async registerFileBuffer(e,t){let n=new jt("REGISTER_FILE_BUFFER",[e,t]);await this.postTask(n,[t.buffer])}async registerFileHandle(e,t){let n=new jt("REGISTER_FILE_HANDLE",[e,t]);await this.postTask(n,[])}async collectFileStatistics(e,t){let n=new jt("COLLECT_FILE_STATISTICS",[e,t]);await this.postTask(n,[])}async exportFileStatistics(e){let t=new jt("EXPORT_FILE_STATISTICS",e);return await this.postTask(t,[])}async copyFileToBuffer(e){let t=new jt("COPY_FILE_TO_BUFFER",e);return await this.postTask(t)}async copyFileToPath(e,t){let n=new jt("COPY_FILE_TO_PATH",[e,t]);await this.postTask(n)}async insertArrowFromIPCStream(e,t,n){if(t.length==0)return;let r=new jt("INSERT_ARROW_FROM_IPC_STREAM",[e,t,n]);await this.postTask(r,[t.buffer])}async insertCSVFromPath(e,t,n){if(n.columns!==void 0){let i=[];for(let o in n.columns){let s=n.columns[o];i.push(lx(o,s))}n.columnsFlat=i,delete n.columns}let r=new jt("IMPORT_CSV_FROM_PATH",[e,t,n]);await this.postTask(r)}async insertJSONFromPath(e,t,n){if(n.columns!==void 0){let i=[];for(let o in n.columns){let s=n.columns[o];i.push(lx(o,s))}n.columnsFlat=i,delete n.columns}let r=new jt("IMPORT_JSON_FROM_PATH",[e,t,n]);await this.postTask(r)}};var JB=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,3,1,0,1,10,14,1,12,0,65,0,65,0,65,0,252,10,0,0,11])),tD=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,8,1,6,0,6,64,25,11,11])),eD=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,5,1,96,0,1,123,3,2,1,0,10,10,1,8,0,65,0,253,15,253,98,11])),nD=()=>(async e=>{try{return typeof MessageChannel<"u"&&new MessageChannel().port1.postMessage(new SharedArrayBuffer(1)),WebAssembly.validate(e)}catch{return!1}})(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,4,1,3,1,1,10,11,1,9,0,65,0,254,16,2,0,26,11])),cx={name:"@duckdb/duckdb-wasm",version:"1.17.0",description:"DuckDB powered by WebAssembly",license:"MPL-2.0",repository:{type:"git",url:"https://github.com/duckdb/duckdb-wasm.git"},keywords:["sql","duckdb","relational","database","data","query","wasm","analytics","olap","arrow","parquet","json","csv"],dependencies:{"apache-arrow":"^9.0.0"},devDependencies:{"@types/emscripten":"^1.39.6","@types/jasmine":"^4.3.0","@typescript-eslint/eslint-plugin":"^5.36.1","@typescript-eslint/parser":"^5.36.1",esbuild:"^0.15.6",eslint:"^8.23.0","eslint-plugin-jasmine":"^4.1.3","eslint-plugin-react":"^7.31.1","fast-glob":"^3.2.11",jasmine:"^4.4.0","jasmine-core":"^4.3.0","jasmine-spec-reporter":"^7.0.0","js-sha256":"^0.9.0",karma:"^6.4.0","karma-chrome-launcher":"^3.1.1","karma-coverage":"^2.2.0","karma-firefox-launcher":"^2.1.2","karma-jasmine":"^5.1.0","karma-jasmine-html-reporter":"^2.0.0","karma-sourcemap-loader":"^0.3.8","karma-spec-reporter":"^0.0.34","make-dir":"^3.1.0",nyc:"^15.1.0",prettier:"^2.7.1",puppeteer:"^17.1.3",rimraf:"^3.0.2",s3rver:"^3.7.1",typedoc:"^0.23.14",typescript:"^4.7.4","wasm-feature-detect":"^1.2.11","web-worker":"^1.2.0"},scripts:{"build:debug":"node bundle.mjs debug && tsc --emitDeclarationOnly","build:release":"node bundle.mjs release && tsc --emitDeclarationOnly",docs:"typedoc",report:"node ./coverage.mjs","test:node":"node --enable-source-maps --experimental-wasm-eh ../../node_modules/jasmine/bin/jasmine ./dist/tests-node.cjs","test:node:debug":"node --inspect-brk --enable-source-maps --experimental-wasm-eh ../../node_modules/jasmine/bin/jasmine ./dist/tests-node.cjs","test:node:coverage":"nyc -r json --report-dir ./coverage/node node --experimental-wasm-eh ../../node_modules/jasmine/bin/jasmine ./dist/tests-node.cjs","test:firefox":"karma start ./karma/tests-firefox.cjs","test:chrome":"karma start ./karma/tests-chrome.cjs","test:chrome:eh":"karma start ./karma/tests-chrome-eh.cjs","test:chrome:coverage":"karma start ./karma/tests-chrome-coverage.cjs","test:browser":"karma start ./karma/tests-all.cjs","test:browser:debug":"karma start ./karma/tests-debug.cjs",test:"npm run test:chrome && npm run test:node","test:coverage":"npm run test:chrome:coverage && npm run test:node:coverage && npm run report",lint:"eslint src test"},files:["dist","!dist/types/test"],main:"dist/duckdb-browser.cjs",module:"dist/duckdb-browser.mjs",types:"dist/duckdb-browser.d.ts",jsdelivr:"dist/duckdb-browser.cjs",unpkg:"dist/duckdb-browser.mjs",sideEffects:!1,browser:{fs:!1,path:!1,perf_hooks:!1,os:!1,worker_threads:!1},exports:{"./dist/duckdb-mvp.wasm":"./dist/duckdb-mvp.wasm","./dist/duckdb-eh.wasm":"./dist/duckdb-eh.wasm","./dist/duckdb-coi.wasm":"./dist/duckdb-coi.wasm","./dist/duckdb-browser":"./dist/duckdb-browser.mjs","./dist/duckdb-browser.cjs":"./dist/duckdb-browser.cjs","./dist/duckdb-browser.mjs":"./dist/duckdb-browser.mjs","./dist/duckdb-browser-blocking":"./dist/duckdb-browser-blocking.mjs","./dist/duckdb-browser-blocking.mjs":"./dist/duckdb-browser-blocking.mjs","./dist/duckdb-browser-blocking.cjs":"./dist/duckdb-browser-blocking.cjs","./dist/duckdb-browser-coi.pthread.worker.js":"./dist/duckdb-browser-coi.pthread.worker.js","./dist/duckdb-browser-coi.worker.js":"./dist/duckdb-browser-coi.worker.js","./dist/duckdb-browser-eh.worker.js":"./dist/duckdb-browser-eh.worker.js","./dist/duckdb-browser-mvp.worker.js":"./dist/duckdb-browser-mvp.worker.js","./dist/duckdb-node":"./dist/duckdb-node.cjs","./dist/duckdb-node.cjs":"./dist/duckdb-node.cjs","./dist/duckdb-node-blocking":"./dist/duckdb-node-blocking.cjs","./dist/duckdb-node-blocking.cjs":"./dist/duckdb-node-blocking.cjs","./dist/duckdb-node-eh.worker.cjs":"./dist/duckdb-node-eh.worker.cjs","./dist/duckdb-node-mvp.worker.cjs":"./dist/duckdb-node-mvp.worker.cjs","./blocking":{browser:{types:"./dist/duckdb-browser-blocking.d.ts",import:"./dist/duckdb-browser-blocking.mjs",require:"./dist/duckdb-browser-blocking.cjs"},node:{types:"./dist/duckdb-node-blocking.d.ts",require:"./dist/duckdb-node-blocking.cjs",import:"./dist/duckdb-node-blocking.cjs"},types:"./dist/duckdb-browser-blocking.d.ts",import:"./dist/duckdb-browser-blocking.mjs",require:"./dist/duckdb-browser-blocking.cjs"},".":{browser:{types:"./dist/duckdb-browser.d.ts",import:"./dist/duckdb-browser.mjs",require:"./dist/duckdb-browser.cjs"},node:{types:"./dist/duckdb-node.d.ts",import:"./dist/duckdb-node.cjs",require:"./dist/duckdb-node.cjs"},types:"./dist/duckdb-browser.d.ts",import:"./dist/duckdb-browser.mjs",require:"./dist/duckdb-browser.cjs"}}},MJ=cx.name,AJ=cx.version,ux=cx.version.split("."),FJ=ux[0],kJ=ux[1],NJ=ux[2],rD=()=>typeof navigator>"u";var rx=null,ix=null,ox=null,sx=null,ax=null;async function iD(){return rx==null&&(rx=typeof BigInt64Array<"u"),ix==null&&(ix=await tD()),ox==null&&(ox=await nD()),sx==null&&(sx=await eD()),ax==null&&(ax=await JB()),{bigInt64Array:rx,crossOriginIsolated:rD()||globalThis.crossOriginIsolated||!1,wasmExceptions:ix,wasmSIMD:sx,wasmThreads:ox,wasmBulkMemory:ax}}async function F3(e){let t=await iD();if(t.wasmExceptions){if(t.wasmSIMD&&t.wasmThreads&&t.crossOriginIsolated&&e.coi)return{mainModule:e.coi.mainModule,mainWorker:e.coi.mainWorker,pthreadWorker:e.coi.pthreadWorker};if(e.eh)return{mainModule:e.eh.mainModule,mainWorker:e.eh.mainWorker,pthreadWorker:null}}return{mainModule:e.mvp.mainModule,mainWorker:e.mvp.mainWorker,pthreadWorker:null}}var OJ=zB(VB());var rT={};Ua(rT,{Area:()=>Gl,Arrow:()=>pp,BarX:()=>mp,BarY:()=>yp,Cell:()=>Hl,Contour:()=>Ep,Density:()=>Fp,Dot:()=>Xl,Frame:()=>ap,Geo:()=>kp,Hexgrid:()=>Np,Image:()=>Op,Line:()=>Zl,Link:()=>dp,Mark:()=>at,Raster:()=>Ip,Rect:()=>Kl,RuleX:()=>np,RuleY:()=>rp,Text:()=>Yl,TickX:()=>wp,TickY:()=>vp,Tip:()=>lp,Vector:()=>Wl,area:()=>p5,areaX:()=>Ma,areaY:()=>Is,arrow:()=>y5,auto:()=>M5,autoSpec:()=>TS,axisFx:()=>f1,axisFy:()=>u1,axisX:()=>op,axisY:()=>ip,barX:()=>Io,barY:()=>Eo,bin:()=>Ts,binX:()=>So,binY:()=>To,bollinger:()=>Na,bollingerX:()=>C5,bollingerY:()=>B5,boxX:()=>D5,boxY:()=>L5,cell:()=>Aa,cellX:()=>b5,cellY:()=>_5,centroid:()=>Fk,circle:()=>v5,cluster:()=>Ak,column:()=>pn,contour:()=>q5,crosshair:()=>H5,crosshairX:()=>X5,crosshairY:()=>Z5,delaunayLink:()=>J5,delaunayMesh:()=>tk,density:()=>ok,dodgeX:()=>jk,dodgeY:()=>Yk,dot:()=>Nn,dotX:()=>x5,dotY:()=>w5,filter:()=>N4,formatIsoDate:()=>C2,formatMonth:()=>z4,formatWeekday:()=>V4,frame:()=>ju,geo:()=>B1,geoCentroid:()=>kk,graticule:()=>ak,gridFx:()=>m1,gridFy:()=>h1,gridX:()=>p1,gridY:()=>d1,group:()=>Gh,groupX:()=>ba,groupY:()=>_a,groupZ:()=>Wh,hexagon:()=>S5,hexbin:()=>lk,hexgrid:()=>ck,hull:()=>ek,identity:()=>Y,image:()=>fk,indexOf:()=>Ae,initializer:()=>ye,interpolateNearest:()=>NS,interpolateNone:()=>C1,interpolatorBarycentric:()=>kS,interpolatorRandomWalk:()=>OS,legend:()=>RF,line:()=>bp,lineX:()=>Fa,lineY:()=>ka,linearRegressionX:()=>pk,linearRegressionY:()=>mk,link:()=>T1,map:()=>oi,mapX:()=>rf,mapY:()=>of,marks:()=>bn,normalize:()=>j1,normalizeX:()=>Hk,normalizeY:()=>Xk,plot:()=>up,pointer:()=>Sa,pointerX:()=>Pu,pointerY:()=>Uu,raster:()=>z5,rect:()=>_p,rectX:()=>tf,rectY:()=>ef,reverse:()=>O4,ruleX:()=>Pr,ruleY:()=>Ur,scale:()=>P8,select:()=>Zk,selectFirst:()=>JS,selectLast:()=>tT,selectMaxX:()=>Jk,selectMaxY:()=>tN,selectMinX:()=>Kk,selectMinY:()=>Qk,shuffle:()=>C4,sort:()=>kb,sphere:()=>sk,spike:()=>gF,stackX:()=>wS,stackX1:()=>s5,stackX2:()=>a5,stackY:()=>vS,stackY1:()=>l5,stackY2:()=>c5,text:()=>$r,textX:()=>r1,textY:()=>i1,tickX:()=>k1,tickY:()=>N1,tip:()=>Yu,transform:()=>mn,tree:()=>GS,treeLink:()=>U1,treeNode:()=>Cp,valueof:()=>st,vector:()=>uS,vectorX:()=>a1,vectorY:()=>l1,voronoi:()=>nk,voronoiMesh:()=>rk,window:()=>sf,windowX:()=>A5,windowY:()=>F5});function Ut(e,t){return e==null||t==null?NaN:e<t?-1:e>t?1:e>=t?0:NaN}function Xn(e,t){return e==null||t==null?NaN:t<e?-1:t>e?1:t>=e?0:NaN}function Go(e){let t,n,r;e.length!==2?(t=Ut,n=(a,l)=>Ut(e(a),l),r=(a,l)=>e(a)-l):(t=e===Ut||e===Xn?e:sD,n=e,r=e);function i(a,l,c=0,u=a.length){if(c<u){if(t(l,l)!==0)return u;do{let d=c+u>>>1;n(a[d],l)<0?c=d+1:u=d}while(c<u)}return c}function o(a,l,c=0,u=a.length){if(c<u){if(t(l,l)!==0)return u;do{let d=c+u>>>1;n(a[d],l)<=0?c=d+1:u=d}while(c<u)}return c}function s(a,l,c=0,u=a.length){let d=i(a,l,c,u-1);return d>c&&r(a[d-1],l)>-r(a[d],l)?d-1:d}return{left:i,center:s,right:o}}function sD(){return 0}function cd(e){return e===null?NaN:+e}function*k3(e,t){if(t===void 0)for(let n of e)n!=null&&(n=+n)>=n&&(yield n);else{let n=-1;for(let r of e)(r=t(r,++n,e))!=null&&(r=+r)>=r&&(yield r)}}var N3=Go(Ut),O3=N3.right,aD=N3.left,lD=Go(cd).center,Ho=O3;var ud=C3(B3),fx=C3(cD);function C3(e){return function(t,n,r=n){if(!((n=+n)>=0))throw new RangeError("invalid rx");if(!((r=+r)>=0))throw new RangeError("invalid ry");let{data:i,width:o,height:s}=t;if(!((o=Math.floor(o))>=0))throw new RangeError("invalid width");if(!((s=Math.floor(s!==void 0?s:i.length/o))>=0))throw new RangeError("invalid height");if(!o||!s||!n&&!r)return t;let a=n&&e(n),l=r&&e(r),c=i.slice();return a&&l?(Fc(a,c,i,o,s),Fc(a,i,c,o,s),Fc(a,c,i,o,s),kc(l,i,c,o,s),kc(l,c,i,o,s),kc(l,i,c,o,s)):a?(Fc(a,i,c,o,s),Fc(a,c,i,o,s),Fc(a,i,c,o,s)):l&&(kc(l,i,c,o,s),kc(l,c,i,o,s),kc(l,i,c,o,s)),t}}function Fc(e,t,n,r,i){for(let o=0,s=r*i;o<s;)e(t,n,o,o+=r,1)}function kc(e,t,n,r,i){for(let o=0,s=r*i;o<r;++o)e(t,n,o,o+s,r)}function cD(e){let t=B3(e);return(n,r,i,o,s)=>{i<<=2,o<<=2,s<<=2,t(n,r,i+0,o+0,s),t(n,r,i+1,o+1,s),t(n,r,i+2,o+2,s),t(n,r,i+3,o+3,s)}}function B3(e){let t=Math.floor(e);if(t===e)return uD(e);let n=e-t,r=2*e+1;return(i,o,s,a,l)=>{if(!((a-=l)>=s))return;let c=t*o[s],u=l*t,d=u+l;for(let f=s,h=s+u;f<h;f+=l)c+=o[Math.min(a,f)];for(let f=s,h=a;f<=h;f+=l)c+=o[Math.min(a,f+u)],i[f]=(c+n*(o[Math.max(s,f-d)]+o[Math.min(a,f+d)]))/r,c-=o[Math.max(s,f-u)]}}function uD(e){let t=2*e+1;return(n,r,i,o,s)=>{if(!((o-=s)>=i))return;let a=e*r[i],l=s*e;for(let c=i,u=i+l;c<u;c+=s)a+=r[Math.min(o,c)];for(let c=i,u=o;c<=u;c+=s)a+=r[Math.min(o,c+l)],n[c]=a/t,a-=r[Math.max(i,c-l)]}}function Zi(e,t){let n=0;if(t===void 0)for(let r of e)r!=null&&(r=+r)>=r&&++n;else{let r=-1;for(let i of e)(i=t(i,++r,e))!=null&&(i=+i)>=i&&++n}return n}function fD(e){return e.length|0}function dD(e){return!(e>0)}function hD(e){return typeof e!="object"||"length"in e?e:Array.from(e)}function pD(e){return t=>e(...t)}function b0(...e){let t=typeof e[e.length-1]=="function"&&pD(e.pop());e=e.map(hD);let n=e.map(fD),r=e.length-1,i=new Array(r+1).fill(0),o=[];if(r<0||n.some(dD))return o;for(;;){o.push(i.map((a,l)=>e[l][a]));let s=r;for(;++i[s]===n[s];){if(s===0)return t?o.map(t):o;i[s--]=0}}}function _0(e,t){var n=0,r=0;return Float64Array.from(e,t===void 0?i=>n+=+i||0:i=>n+=+t(i,r++,e)||0)}function qs(e,t){let n=0,r,i=0,o=0;if(t===void 0)for(let s of e)s!=null&&(s=+s)>=s&&(r=s-i,i+=r/++n,o+=r*(s-i));else{let s=-1;for(let a of e)(a=t(a,++s,e))!=null&&(a=+a)>=a&&(r=a-i,i+=r/++n,o+=r*(a-i))}if(n>1)return o/(n-1)}function Hr(e,t){let n=qs(e,t);return n&&Math.sqrt(n)}function Qt(e,t){let n,r;if(t===void 0)for(let i of e)i!=null&&(n===void 0?i>=i&&(n=r=i):(n>i&&(n=i),r<i&&(r=i)));else{let i=-1;for(let o of e)(o=t(o,++i,e))!=null&&(n===void 0?o>=o&&(n=r=o):(n>o&&(n=o),r<o&&(r=o)))}return[n,r]}var Sn=class{constructor(){this._partials=new Float64Array(32),this._n=0}add(t){let n=this._partials,r=0;for(let i=0;i<this._n&&i<32;i++){let o=n[i],s=t+o,a=Math.abs(t)<Math.abs(o)?t-(s-o):o-(s-t);a&&(n[r++]=a),t=s}return n[r]=t,this._n=r+1,this}valueOf(){let t=this._partials,n=this._n,r,i,o,s=0;if(n>0){for(s=t[--n];n>0&&(r=s,i=t[--n],s=r+i,o=i-(s-r),!o););n>0&&(o<0&&t[n-1]<0||o>0&&t[n-1]>0)&&(i=o*2,r=s+i,i==r-s&&(s=r))}return s}};var Zn=class extends Map{constructor(t,n=R3){if(super(),Object.defineProperties(this,{_intern:{value:new Map},_key:{value:n}}),t!=null)for(let[r,i]of t)this.set(r,i)}get(t){return super.get(dx(this,t))}has(t){return super.has(dx(this,t))}set(t,n){return super.set(D3(this,t),n)}delete(t){return super.delete(L3(this,t))}},Or=class extends Set{constructor(t,n=R3){if(super(),Object.defineProperties(this,{_intern:{value:new Map},_key:{value:n}}),t!=null)for(let r of t)this.add(r)}has(t){return super.has(dx(this,t))}add(t){return super.add(D3(this,t))}delete(t){return super.delete(L3(this,t))}};function dx({_intern:e,_key:t},n){let r=t(n);return e.has(r)?e.get(r):n}function D3({_intern:e,_key:t},n){let r=t(n);return e.has(r)?e.get(r):(e.set(r,n),n)}function L3({_intern:e,_key:t},n){let r=t(n);return e.has(r)&&(n=e.get(r),e.delete(r)),n}function R3(e){return e!==null&&typeof e=="object"?e.valueOf():e}function fd(e){return e}function ln(e,...t){return px(e,fd,fd,t)}function vi(e,t,...n){return px(e,fd,t,n)}function hx(e,t,...n){return px(e,Array.from,t,n)}function px(e,t,n,r){return function i(o,s){if(s>=r.length)return n(o);let a=new Zn,l=r[s++],c=-1;for(let u of o){let d=l(u,++c,o),f=a.get(d);f?f.push(u):a.set(d,[u])}for(let[u,d]of a)a.set(u,i(d,s));return t(a)}(e,0)}function mx(e,t){return Array.from(t,n=>e[n])}function Ki(e,...t){if(typeof e[Symbol.iterator]!="function")throw new TypeError("values is not iterable");e=Array.from(e);let[n]=t;if(n&&n.length!==2||t.length>1){let r=Uint32Array.from(e,(i,o)=>o);return t.length>1?(t=t.map(i=>e.map(i)),r.sort((i,o)=>{for(let s of t){let a=nl(s[i],s[o]);if(a)return a}})):(n=e.map(n),r.sort((i,o)=>nl(n[i],n[o]))),mx(e,r)}return e.sort(dd(n))}function dd(e=Ut){if(e===Ut)return nl;if(typeof e!="function")throw new TypeError("compare is not a function");return(t,n)=>{let r=e(t,n);return r||r===0?r:(e(n,n)===0)-(e(t,t)===0)}}function nl(e,t){return(e==null||!(e>=e))-(t==null||!(t>=t))||(e<t?-1:e>t?1:0)}function Nc(e,t,n){return(t.length!==2?Ki(vi(e,t,n),([r,i],[o,s])=>Ut(i,s)||Ut(r,o)):Ki(ln(e,n),([r,i],[o,s])=>t(i,s)||Ut(r,o))).map(([r])=>r)}var mD=Math.sqrt(50),yD=Math.sqrt(10),gD=Math.sqrt(2);function x0(e,t,n){let r=(t-e)/Math.max(0,n),i=Math.floor(Math.log10(r)),o=r/Math.pow(10,i),s=o>=mD?10:o>=yD?5:o>=gD?2:1,a,l,c;return i<0?(c=Math.pow(10,-i)/s,a=Math.round(e*c),l=Math.round(t*c),a/c<e&&++a,l/c>t&&--l,c=-c):(c=Math.pow(10,i)*s,a=Math.round(e/c),l=Math.round(t/c),a*c<e&&++a,l*c>t&&--l),l<a&&.5<=n&&n<2?x0(e,t,n*2):[a,l,c]}function Tn(e,t,n){if(t=+t,e=+e,n=+n,!(n>0))return[];if(e===t)return[e];let r=t<e,[i,o,s]=r?x0(t,e,n):x0(e,t,n);if(!(o>=i))return[];let a=o-i+1,l=new Array(a);if(r)if(s<0)for(let c=0;c<a;++c)l[c]=(o-c)/-s;else for(let c=0;c<a;++c)l[c]=(o-c)*s;else if(s<0)for(let c=0;c<a;++c)l[c]=(i+c)/-s;else for(let c=0;c<a;++c)l[c]=(i+c)*s;return l}function Xo(e,t,n){return t=+t,e=+e,n=+n,x0(e,t,n)[2]}function Oc(e,t,n){t=+t,e=+e,n=+n;let r=t<e,i=r?Xo(t,e,n):Xo(e,t,n);return(r?-1:1)*(i<0?1/-i:i)}function Cc(e,t,n){let r;for(;;){let i=Xo(e,t,n);if(i===r||i===0||!isFinite(i))return[e,t];i>0?(e=Math.floor(e/i)*i,t=Math.ceil(t/i)*i):i<0&&(e=Math.ceil(e*i)/i,t=Math.floor(t*i)/i),r=i}}function Ws(e){return Math.max(1,Math.ceil(Math.log(Zi(e))/Math.LN2)+1)}function Jt(e,t){let n;if(t===void 0)for(let r of e)r!=null&&(n<r||n===void 0&&r>=r)&&(n=r);else{let r=-1;for(let i of e)(i=t(i,++r,e))!=null&&(n<i||n===void 0&&i>=i)&&(n=i)}return n}function w0(e,t){let n,r=-1,i=-1;if(t===void 0)for(let o of e)++i,o!=null&&(n<o||n===void 0&&o>=o)&&(n=o,r=i);else for(let o of e)(o=t(o,++i,e))!=null&&(n<o||n===void 0&&o>=o)&&(n=o,r=i);return r}function ge(e,t){let n;if(t===void 0)for(let r of e)r!=null&&(n>r||n===void 0&&r>=r)&&(n=r);else{let r=-1;for(let i of e)(i=t(i,++r,e))!=null&&(n>i||n===void 0&&i>=i)&&(n=i)}return n}function v0(e,t){let n,r=-1,i=-1;if(t===void 0)for(let o of e)++i,o!=null&&(n>o||n===void 0&&o>=o)&&(n=o,r=i);else for(let o of e)(o=t(o,++i,e))!=null&&(n>o||n===void 0&&o>=o)&&(n=o,r=i);return r}function S0(e,t,n=0,r=1/0,i){if(t=Math.floor(t),n=Math.floor(Math.max(0,n)),r=Math.floor(Math.min(e.length-1,r)),!(n<=t&&t<=r))return e;for(i=i===void 0?nl:dd(i);r>n;){if(r-n>600){let l=r-n+1,c=t-n+1,u=Math.log(l),d=.5*Math.exp(2*u/3),f=.5*Math.sqrt(u*d*(l-d)/l)*(c-l/2<0?-1:1),h=Math.max(n,Math.floor(t-c*d/l+f)),p=Math.min(r,Math.floor(t+(l-c)*d/l+f));S0(e,t,h,p,i)}let o=e[t],s=n,a=r;for(hd(e,n,t),i(e[r],o)>0&&hd(e,n,r);s<a;){for(hd(e,s,a),++s,--a;i(e[s],o)<0;)++s;for(;i(e[a],o)>0;)--a}i(e[n],o)===0?hd(e,n,a):(++a,hd(e,a,r)),a<=t&&(n=a+1),t<=a&&(r=a-1)}return e}function hd(e,t,n){let r=e[t];e[t]=e[n],e[n]=r}function rl(e,t=Ut){let n,r=!1;if(t.length===1){let i;for(let o of e){let s=t(o);(r?Ut(s,i)>0:Ut(s,s)===0)&&(n=o,i=s,r=!0)}}else for(let i of e)(r?t(i,n)>0:t(i,i)===0)&&(n=i,r=!0);return n}function Kn(e,t,n){if(e=Float64Array.from(k3(e,n)),!(!(r=e.length)||isNaN(t=+t))){if(t<=0||r<2)return ge(e);if(t>=1)return Jt(e);var r,i=(r-1)*t,o=Math.floor(i),s=Jt(S0(e,o).subarray(0,o+1)),a=ge(e.subarray(o+1));return s+(a-s)*(i-o)}}function yx(e,t,n=cd){if(!(!(r=e.length)||isNaN(t=+t))){if(t<=0||r<2)return+n(e[0],0,e);if(t>=1)return+n(e[r-1],r-1,e);var r,i=(r-1)*t,o=Math.floor(i),s=+n(e[o],o,e),a=+n(e[o+1],o+1,e);return s+(a-s)*(i-o)}}function T0(e,t,n){let r=Zi(e),i=Kn(e,.75)-Kn(e,.25);return r&&i?Math.ceil((n-t)/(2*i*Math.pow(r,-1/3))):1}function pd(e,t,n){let r=Zi(e),i=Hr(e);return r&&i?Math.ceil((n-t)*Math.cbrt(r)/(3.49*i)):1}function Zo(e,t){let n=0,r=0;if(t===void 0)for(let i of e)i!=null&&(i=+i)>=i&&(++n,r+=i);else{let i=-1;for(let o of e)(o=t(o,++i,e))!=null&&(o=+o)>=o&&(++n,r+=o)}if(n)return r/n}function Si(e,t){return Kn(e,.5,t)}function*_D(e){for(let t of e)yield*t}function Bc(e){return Array.from(_D(e))}function Dc(e,t){let n=new Zn;if(t===void 0)for(let o of e)o!=null&&o>=o&&n.set(o,(n.get(o)||0)+1);else{let o=-1;for(let s of e)(s=t(s,++o,e))!=null&&s>=s&&n.set(s,(n.get(s)||0)+1)}let r,i=0;for(let[o,s]of n)s>i&&(i=s,r=o);return r}function I0(e,t=xD){let n=[],r,i=!1;for(let o of e)i&&n.push(t(r,o)),r=o,i=!0;return n}function xD(e,t){return[e,t]}function Ke(e,t,n){e=+e,t=+t,n=(i=arguments.length)<2?(t=e,e=0,1):i<3?1:+n;for(var r=-1,i=Math.max(0,Math.ceil((t-e)/n))|0,o=new Array(i);++r<i;)o[r]=e+r*n;return o}function md(e,t=Ut){if(typeof e[Symbol.iterator]!="function")throw new TypeError("values is not iterable");let n=Array.from(e),r=new Float64Array(n.length);t.length!==2&&(n=n.map(t),t=Ut);let i=(a,l)=>t(n[a],n[l]),o,s;return e=Uint32Array.from(n,(a,l)=>l),e.sort(t===Ut?(a,l)=>nl(n[a],n[l]):dd(i)),e.forEach((a,l)=>{let c=i(a,o===void 0?a:o);c>=0?((o===void 0||c>0)&&(o=a,s=l),r[a]=s):r[a]=NaN}),r}function E0(e,t=Ut){let n,r=!1;if(t.length===1){let i;for(let o of e){let s=t(o);(r?Ut(s,i)<0:Ut(s,s)===0)&&(n=o,i=s,r=!0)}}else for(let i of e)(r?t(i,n)<0:t(i,i)===0)&&(n=i,r=!0);return n}function In(e,t){let n=0;if(t===void 0)for(let r of e)(r=+r)&&(n+=r);else{let r=-1;for(let i of e)(i=+t(i,++r,e))&&(n+=i)}return n}function Gs(e){if(typeof e[Symbol.iterator]!="function")throw new TypeError("values is not iterable");return Array.from(e).reverse()}function P3(e){return e}var gx=1,bx=2,_x=3,M0=4,U3=1e-6;function wD(e){return"translate("+e+",0)"}function vD(e){return"translate(0,"+e+")"}function SD(e){return t=>+e(t)}function TD(e,t){return t=Math.max(0,e.bandwidth()-t*2)/2,e.round()&&(t=Math.round(t)),n=>+e(n)+t}function ID(){return!this.__axis}function ED(e,t){var n=[],r=null,i=null,o=6,s=6,a=3,l=typeof window<"u"&&window.devicePixelRatio>1?0:.5,c=e===gx||e===M0?-1:1,u=e===M0||e===bx?"x":"y",d=e===gx||e===_x?wD:vD;function f(h){var p=r??(t.ticks?t.ticks.apply(t,n):t.domain()),m=i??(t.tickFormat?t.tickFormat.apply(t,n):P3),g=Math.max(o,0)+a,b=t.range(),y=+b[0]+l,x=+b[b.length-1]+l,_=(t.bandwidth?TD:SD)(t.copy(),l),v=h.selection?h.selection():h,w=v.selectAll(".domain").data([null]),T=v.selectAll(".tick").data(p,t).order(),M=T.exit(),F=T.enter().append("g").attr("class","tick"),S=T.select("line"),I=T.select("text");w=w.merge(w.enter().insert("path",".tick").attr("class","domain").attr("stroke","currentColor")),T=T.merge(F),S=S.merge(F.append("line").attr("stroke","currentColor").attr(u+"2",c*o)),I=I.merge(F.append("text").attr("fill","currentColor").attr(u,c*g).attr("dy",e===gx?"0em":e===_x?"0.71em":"0.32em")),h!==v&&(w=w.transition(h),T=T.transition(h),S=S.transition(h),I=I.transition(h),M=M.transition(h).attr("opacity",U3).attr("transform",function(k){return isFinite(k=_(k))?d(k+l):this.getAttribute("transform")}),F.attr("opacity",U3).attr("transform",function(k){var O=this.parentNode.__axis;return d((O&&isFinite(O=O(k))?O:_(k))+l)})),M.remove(),w.attr("d",e===M0||e===bx?s?"M"+c*s+","+y+"H"+l+"V"+x+"H"+c*s:"M"+l+","+y+"V"+x:s?"M"+y+","+c*s+"V"+l+"H"+x+"V"+c*s:"M"+y+","+l+"H"+x),T.attr("opacity",1).attr("transform",function(k){return d(_(k)+l)}),S.attr(u+"2",c*o),I.attr(u,c*g).text(m),v.filter(ID).attr("fill","none").attr("font-size",10).attr("font-family","sans-serif").attr("text-anchor",e===bx?"start":e===M0?"end":"middle"),v.each(function(){this.__axis=_})}return f.scale=function(h){return arguments.length?(t=h,f):t},f.ticks=function(){return n=Array.from(arguments),f},f.tickArguments=function(h){return arguments.length?(n=h==null?[]:Array.from(h),f):n.slice()},f.tickValues=function(h){return arguments.length?(r=h==null?null:Array.from(h),f):r&&r.slice()},f.tickFormat=function(h){return arguments.length?(i=h,f):i},f.tickSize=function(h){return arguments.length?(o=s=+h,f):o},f.tickSizeInner=function(h){return arguments.length?(o=+h,f):o},f.tickSizeOuter=function(h){return arguments.length?(s=+h,f):s},f.tickPadding=function(h){return arguments.length?(a=+h,f):a},f.offset=function(h){return arguments.length?(l=+h,f):l},f}function xx(e){return ED(_x,e)}var MD={value:()=>{}};function z3(){for(var e=0,t=arguments.length,n={},r;e<t;++e){if(!(r=arguments[e]+"")||r in n||/[\s.]/.test(r))throw new Error("illegal type: "+r);n[r]=[]}return new A0(n)}function A0(e){this._=e}function AD(e,t){return e.trim().split(/^|\s+/).map(function(n){var r="",i=n.indexOf(".");if(i>=0&&(r=n.slice(i+1),n=n.slice(0,i)),n&&!t.hasOwnProperty(n))throw new Error("unknown type: "+n);return{type:n,name:r}})}A0.prototype=z3.prototype={constructor:A0,on:function(e,t){var n=this._,r=AD(e+"",n),i,o=-1,s=r.length;if(arguments.length<2){for(;++o<s;)if((i=(e=r[o]).type)&&(i=FD(n[i],e.name)))return i;return}if(t!=null&&typeof t!="function")throw new Error("invalid callback: "+t);for(;++o<s;)if(i=(e=r[o]).type)n[i]=$3(n[i],e.name,t);else if(t==null)for(i in n)n[i]=$3(n[i],e.name,null);return this},copy:function(){var e={},t=this._;for(var n in t)e[n]=t[n].slice();return new A0(e)},call:function(e,t){if((i=arguments.length-2)>0)for(var n=new Array(i),r=0,i,o;r<i;++r)n[r]=arguments[r+2];if(!this._.hasOwnProperty(e))throw new Error("unknown type: "+e);for(o=this._[e],r=0,i=o.length;r<i;++r)o[r].value.apply(t,n)},apply:function(e,t,n){if(!this._.hasOwnProperty(e))throw new Error("unknown type: "+e);for(var r=this._[e],i=0,o=r.length;i<o;++i)r[i].value.apply(t,n)}};function FD(e,t){for(var n=0,r=e.length,i;n<r;++n)if((i=e[n]).name===t)return i.value}function $3(e,t,n){for(var r=0,i=e.length;r<i;++r)if(e[r].name===t){e[r]=MD,e=e.slice(0,r).concat(e.slice(r+1));break}return n!=null&&e.push({name:t,value:n}),e}var wx=z3;var F0="http://www.w3.org/1999/xhtml",Xr={svg:"http://www.w3.org/2000/svg",xhtml:F0,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"};function Ko(e){var t=e+="",n=t.indexOf(":");return n>=0&&(t=e.slice(0,n))!=="xmlns"&&(e=e.slice(n+1)),Xr.hasOwnProperty(t)?{space:Xr[t],local:e}:e}function kD(e){return function(){var t=this.ownerDocument,n=this.namespaceURI;return n===F0&&t.documentElement.namespaceURI===F0?t.createElement(e):t.createElementNS(n,e)}}function ND(e){return function(){return this.ownerDocument.createElementNS(e.space,e.local)}}function Ti(e){var t=Ko(e);return(t.local?ND:kD)(t)}function OD(){}function il(e){return e==null?OD:function(){return this.querySelector(e)}}function V3(e){typeof e!="function"&&(e=il(e));for(var t=this._groups,n=t.length,r=new Array(n),i=0;i<n;++i)for(var o=t[i],s=o.length,a=r[i]=new Array(s),l,c,u=0;u<s;++u)(l=o[u])&&(c=e.call(l,l.__data__,u,o))&&("__data__"in l&&(c.__data__=l.__data__),a[u]=c);return new Ee(r,this._parents)}function vx(e){return e==null?[]:Array.isArray(e)?e:Array.from(e)}function CD(){return[]}function yd(e){return e==null?CD:function(){return this.querySelectorAll(e)}}function BD(e){return function(){return vx(e.apply(this,arguments))}}function j3(e){typeof e=="function"?e=BD(e):e=yd(e);for(var t=this._groups,n=t.length,r=[],i=[],o=0;o<n;++o)for(var s=t[o],a=s.length,l,c=0;c<a;++c)(l=s[c])&&(r.push(e.call(l,l.__data__,c,s)),i.push(l));return new Ee(r,i)}function gd(e){return function(){return this.matches(e)}}function k0(e){return function(t){return t.matches(e)}}var DD=Array.prototype.find;function LD(e){return function(){return DD.call(this.children,e)}}function RD(){return this.firstElementChild}function Y3(e){return this.select(e==null?RD:LD(typeof e=="function"?e:k0(e)))}var PD=Array.prototype.filter;function UD(){return Array.from(this.children)}function $D(e){return function(){return PD.call(this.children,e)}}function q3(e){return this.selectAll(e==null?UD:$D(typeof e=="function"?e:k0(e)))}function W3(e){typeof e!="function"&&(e=gd(e));for(var t=this._groups,n=t.length,r=new Array(n),i=0;i<n;++i)for(var o=t[i],s=o.length,a=r[i]=[],l,c=0;c<s;++c)(l=o[c])&&e.call(l,l.__data__,c,o)&&a.push(l);return new Ee(r,this._parents)}function N0(e){return new Array(e.length)}function G3(){return new Ee(this._enter||this._groups.map(N0),this._parents)}function bd(e,t){this.ownerDocument=e.ownerDocument,this.namespaceURI=e.namespaceURI,this._next=null,this._parent=e,this.__data__=t}bd.prototype={constructor:bd,appendChild:function(e){return this._parent.insertBefore(e,this._next)},insertBefore:function(e,t){return this._parent.insertBefore(e,t)},querySelector:function(e){return this._parent.querySelector(e)},querySelectorAll:function(e){return this._parent.querySelectorAll(e)}};function H3(e){return function(){return e}}function zD(e,t,n,r,i,o){for(var s=0,a,l=t.length,c=o.length;s<c;++s)(a=t[s])?(a.__data__=o[s],r[s]=a):n[s]=new bd(e,o[s]);for(;s<l;++s)(a=t[s])&&(i[s]=a)}function VD(e,t,n,r,i,o,s){var a,l,c=new Map,u=t.length,d=o.length,f=new Array(u),h;for(a=0;a<u;++a)(l=t[a])&&(f[a]=h=s.call(l,l.__data__,a,t)+"",c.has(h)?i[a]=l:c.set(h,l));for(a=0;a<d;++a)h=s.call(e,o[a],a,o)+"",(l=c.get(h))?(r[a]=l,l.__data__=o[a],c.delete(h)):n[a]=new bd(e,o[a]);for(a=0;a<u;++a)(l=t[a])&&c.get(f[a])===l&&(i[a]=l)}function jD(e){return e.__data__}function X3(e,t){if(!arguments.length)return Array.from(this,jD);var n=t?VD:zD,r=this._parents,i=this._groups;typeof e!="function"&&(e=H3(e));for(var o=i.length,s=new Array(o),a=new Array(o),l=new Array(o),c=0;c<o;++c){var u=r[c],d=i[c],f=d.length,h=YD(e.call(u,u&&u.__data__,c,r)),p=h.length,m=a[c]=new Array(p),g=s[c]=new Array(p),b=l[c]=new Array(f);n(u,d,m,g,b,h,t);for(var y=0,x=0,_,v;y<p;++y)if(_=m[y]){for(y>=x&&(x=y+1);!(v=g[x])&&++x<p;);_._next=v||null}}return s=new Ee(s,r),s._enter=a,s._exit=l,s}function YD(e){return typeof e=="object"&&"length"in e?e:Array.from(e)}function Z3(){return new Ee(this._exit||this._groups.map(N0),this._parents)}function K3(e,t,n){var r=this.enter(),i=this,o=this.exit();return typeof e=="function"?(r=e(r),r&&(r=r.selection())):r=r.append(e+""),t!=null&&(i=t(i),i&&(i=i.selection())),n==null?o.remove():n(o),r&&i?r.merge(i).order():i}function Q3(e){for(var t=e.selection?e.selection():e,n=this._groups,r=t._groups,i=n.length,o=r.length,s=Math.min(i,o),a=new Array(i),l=0;l<s;++l)for(var c=n[l],u=r[l],d=c.length,f=a[l]=new Array(d),h,p=0;p<d;++p)(h=c[p]||u[p])&&(f[p]=h);for(;l<i;++l)a[l]=n[l];return new Ee(a,this._parents)}function J3(){for(var e=this._groups,t=-1,n=e.length;++t<n;)for(var r=e[t],i=r.length-1,o=r[i],s;--i>=0;)(s=r[i])&&(o&&s.compareDocumentPosition(o)^4&&o.parentNode.insertBefore(s,o),o=s);return this}function t6(e){e||(e=qD);function t(d,f){return d&&f?e(d.__data__,f.__data__):!d-!f}for(var n=this._groups,r=n.length,i=new Array(r),o=0;o<r;++o){for(var s=n[o],a=s.length,l=i[o]=new Array(a),c,u=0;u<a;++u)(c=s[u])&&(l[u]=c);l.sort(t)}return new Ee(i,this._parents).order()}function qD(e,t){return e<t?-1:e>t?1:e>=t?0:NaN}function e6(){var e=arguments[0];return arguments[0]=this,e.apply(null,arguments),this}function n6(){return Array.from(this)}function r6(){for(var e=this._groups,t=0,n=e.length;t<n;++t)for(var r=e[t],i=0,o=r.length;i<o;++i){var s=r[i];if(s)return s}return null}function i6(){let e=0;for(let t of this)++e;return e}function o6(){return!this.node()}function s6(e){for(var t=this._groups,n=0,r=t.length;n<r;++n)for(var i=t[n],o=0,s=i.length,a;o<s;++o)(a=i[o])&&e.call(a,a.__data__,o,i);return this}function WD(e){return function(){this.removeAttribute(e)}}function GD(e){return function(){this.removeAttributeNS(e.space,e.local)}}function HD(e,t){return function(){this.setAttribute(e,t)}}function XD(e,t){return function(){this.setAttributeNS(e.space,e.local,t)}}function ZD(e,t){return function(){var n=t.apply(this,arguments);n==null?this.removeAttribute(e):this.setAttribute(e,n)}}function KD(e,t){return function(){var n=t.apply(this,arguments);n==null?this.removeAttributeNS(e.space,e.local):this.setAttributeNS(e.space,e.local,n)}}function a6(e,t){var n=Ko(e);if(arguments.length<2){var r=this.node();return n.local?r.getAttributeNS(n.space,n.local):r.getAttribute(n)}return this.each((t==null?n.local?GD:WD:typeof t=="function"?n.local?KD:ZD:n.local?XD:HD)(n,t))}function O0(e){return e.ownerDocument&&e.ownerDocument.defaultView||e.document&&e||e.defaultView}function QD(e){return function(){this.style.removeProperty(e)}}function JD(e,t,n){return function(){this.style.setProperty(e,t,n)}}function tL(e,t,n){return function(){var r=t.apply(this,arguments);r==null?this.style.removeProperty(e):this.style.setProperty(e,r,n)}}function l6(e,t,n){return arguments.length>1?this.each((t==null?QD:typeof t=="function"?tL:JD)(e,t,n??"")):Hs(this.node(),e)}function Hs(e,t){return e.style.getPropertyValue(t)||O0(e).getComputedStyle(e,null).getPropertyValue(t)}function eL(e){return function(){delete this[e]}}function nL(e,t){return function(){this[e]=t}}function rL(e,t){return function(){var n=t.apply(this,arguments);n==null?delete this[e]:this[e]=n}}function c6(e,t){return arguments.length>1?this.each((t==null?eL:typeof t=="function"?rL:nL)(e,t)):this.node()[e]}function u6(e){return e.trim().split(/^|\s+/)}function Sx(e){return e.classList||new f6(e)}function f6(e){this._node=e,this._names=u6(e.getAttribute("class")||"")}f6.prototype={add:function(e){var t=this._names.indexOf(e);t<0&&(this._names.push(e),this._node.setAttribute("class",this._names.join(" ")))},remove:function(e){var t=this._names.indexOf(e);t>=0&&(this._names.splice(t,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(e){return this._names.indexOf(e)>=0}};function d6(e,t){for(var n=Sx(e),r=-1,i=t.length;++r<i;)n.add(t[r])}function h6(e,t){for(var n=Sx(e),r=-1,i=t.length;++r<i;)n.remove(t[r])}function iL(e){return function(){d6(this,e)}}function oL(e){return function(){h6(this,e)}}function sL(e,t){return function(){(t.apply(this,arguments)?d6:h6)(this,e)}}function p6(e,t){var n=u6(e+"");if(arguments.length<2){for(var r=Sx(this.node()),i=-1,o=n.length;++i<o;)if(!r.contains(n[i]))return!1;return!0}return this.each((typeof t=="function"?sL:t?iL:oL)(n,t))}function aL(){this.textContent=""}function lL(e){return function(){this.textContent=e}}function cL(e){return function(){var t=e.apply(this,arguments);this.textContent=t??""}}function m6(e){return arguments.length?this.each(e==null?aL:(typeof e=="function"?cL:lL)(e)):this.node().textContent}function uL(){this.innerHTML=""}function fL(e){return function(){this.innerHTML=e}}function dL(e){return function(){var t=e.apply(this,arguments);this.innerHTML=t??""}}function y6(e){return arguments.length?this.each(e==null?uL:(typeof e=="function"?dL:fL)(e)):this.node().innerHTML}function hL(){this.nextSibling&&this.parentNode.appendChild(this)}function g6(){return this.each(hL)}function pL(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function b6(){return this.each(pL)}function _6(e){var t=typeof e=="function"?e:Ti(e);return this.select(function(){return this.appendChild(t.apply(this,arguments))})}function mL(){return null}function x6(e,t){var n=typeof e=="function"?e:Ti(e),r=t==null?mL:typeof t=="function"?t:il(t);return this.select(function(){return this.insertBefore(n.apply(this,arguments),r.apply(this,arguments)||null)})}function yL(){var e=this.parentNode;e&&e.removeChild(this)}function w6(){return this.each(yL)}function gL(){var e=this.cloneNode(!1),t=this.parentNode;return t?t.insertBefore(e,this.nextSibling):e}function bL(){var e=this.cloneNode(!0),t=this.parentNode;return t?t.insertBefore(e,this.nextSibling):e}function v6(e){return this.select(e?bL:gL)}function S6(e){return arguments.length?this.property("__data__",e):this.node().__data__}function _L(e){return function(t){e.call(this,t,this.__data__)}}function xL(e){return e.trim().split(/^|\s+/).map(function(t){var n="",r=t.indexOf(".");return r>=0&&(n=t.slice(r+1),t=t.slice(0,r)),{type:t,name:n}})}function wL(e){return function(){var t=this.__on;if(!!t){for(var n=0,r=-1,i=t.length,o;n<i;++n)o=t[n],(!e.type||o.type===e.type)&&o.name===e.name?this.removeEventListener(o.type,o.listener,o.options):t[++r]=o;++r?t.length=r:delete this.__on}}}function vL(e,t,n){return function(){var r=this.__on,i,o=_L(t);if(r){for(var s=0,a=r.length;s<a;++s)if((i=r[s]).type===e.type&&i.name===e.name){this.removeEventListener(i.type,i.listener,i.options),this.addEventListener(i.type,i.listener=o,i.options=n),i.value=t;return}}this.addEventListener(e.type,o,n),i={type:e.type,name:e.name,value:t,listener:o,options:n},r?r.push(i):this.__on=[i]}}function T6(e,t,n){var r=xL(e+""),i,o=r.length,s;if(arguments.length<2){var a=this.node().__on;if(a){for(var l=0,c=a.length,u;l<c;++l)for(i=0,u=a[l];i<o;++i)if((s=r[i]).type===u.type&&s.name===u.name)return u.value}return}for(a=t?vL:wL,i=0;i<o;++i)this.each(a(r[i],t,n));return this}function I6(e,t,n){var r=O0(e),i=r.CustomEvent;typeof i=="function"?i=new i(t,n):(i=r.document.createEvent("Event"),n?(i.initEvent(t,n.bubbles,n.cancelable),i.detail=n.detail):i.initEvent(t,!1,!1)),e.dispatchEvent(i)}function SL(e,t){return function(){return I6(this,e,t)}}function TL(e,t){return function(){return I6(this,e,t.apply(this,arguments))}}function E6(e,t){return this.each((typeof t=="function"?TL:SL)(e,t))}function*M6(){for(var e=this._groups,t=0,n=e.length;t<n;++t)for(var r=e[t],i=0,o=r.length,s;i<o;++i)(s=r[i])&&(yield s)}var Tx=[null];function Ee(e,t){this._groups=e,this._parents=t}function A6(){return new Ee([[document.documentElement]],Tx)}function IL(){return this}Ee.prototype=A6.prototype={constructor:Ee,select:V3,selectAll:j3,selectChild:Y3,selectChildren:q3,filter:W3,data:X3,enter:G3,exit:Z3,join:K3,merge:Q3,selection:IL,order:J3,sort:t6,call:e6,nodes:n6,node:r6,size:i6,empty:o6,each:s6,attr:a6,style:l6,property:c6,classed:p6,text:m6,html:y6,raise:g6,lower:b6,append:_6,insert:x6,remove:w6,clone:v6,datum:S6,on:T6,dispatch:E6,[Symbol.iterator]:M6};var Qo=A6;function Ce(e){return typeof e=="string"?new Ee([[document.querySelector(e)]],[document.documentElement]):new Ee([[e]],Tx)}function Ix(e){return Ce(Ti(e).call(document.documentElement))}function F6(e){let t;for(;t=e.sourceEvent;)e=t;return e}function Ex(e,t){if(e=F6(e),t===void 0&&(t=e.currentTarget),t){var n=t.ownerSVGElement||t;if(n.createSVGPoint){var r=n.createSVGPoint();return r.x=e.clientX,r.y=e.clientY,r=r.matrixTransform(t.getScreenCTM().inverse()),[r.x,r.y]}if(t.getBoundingClientRect){var i=t.getBoundingClientRect();return[e.clientX-i.left-t.clientLeft,e.clientY-i.top-t.clientTop]}}return[e.pageX,e.pageY]}function Jo(e,t,n){e.prototype=t.prototype=n,n.constructor=e}function Xs(e,t){var n=Object.create(e.prototype);for(var r in t)n[r]=t[r];return n}function Ji(){}var Zs=.7,al=1/Zs,Lc="\\s*([+-]?\\d+)\\s*",_d="\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)\\s*",Qi="\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)%\\s*",EL=/^#([0-9a-f]{3,8})$/,ML=new RegExp(`^rgb\\(${Lc},${Lc},${Lc}\\)$`),AL=new RegExp(`^rgb\\(${Qi},${Qi},${Qi}\\)$`),FL=new RegExp(`^rgba\\(${Lc},${Lc},${Lc},${_d}\\)$`),kL=new RegExp(`^rgba\\(${Qi},${Qi},${Qi},${_d}\\)$`),NL=new RegExp(`^hsl\\(${_d},${Qi},${Qi}\\)$`),OL=new RegExp(`^hsla\\(${_d},${Qi},${Qi},${_d}\\)$`),k6={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};Jo(Ji,Ei,{copy(e){return Object.assign(new this.constructor,this,e)},displayable(){return this.rgb().displayable()},hex:N6,formatHex:N6,formatHex8:CL,formatHsl:BL,formatRgb:O6,toString:O6});function N6(){return this.rgb().formatHex()}function CL(){return this.rgb().formatHex8()}function BL(){return P6(this).formatHsl()}function O6(){return this.rgb().formatRgb()}function Ei(e){var t,n;return e=(e+"").trim().toLowerCase(),(t=EL.exec(e))?(n=t[1].length,t=parseInt(t[1],16),n===6?C6(t):n===3?new Ve(t>>8&15|t>>4&240,t>>4&15|t&240,(t&15)<<4|t&15,1):n===8?C0(t>>24&255,t>>16&255,t>>8&255,(t&255)/255):n===4?C0(t>>12&15|t>>8&240,t>>8&15|t>>4&240,t>>4&15|t&240,((t&15)<<4|t&15)/255):null):(t=ML.exec(e))?new Ve(t[1],t[2],t[3],1):(t=AL.exec(e))?new Ve(t[1]*255/100,t[2]*255/100,t[3]*255/100,1):(t=FL.exec(e))?C0(t[1],t[2],t[3],t[4]):(t=kL.exec(e))?C0(t[1]*255/100,t[2]*255/100,t[3]*255/100,t[4]):(t=NL.exec(e))?L6(t[1],t[2]/100,t[3]/100,1):(t=OL.exec(e))?L6(t[1],t[2]/100,t[3]/100,t[4]):k6.hasOwnProperty(e)?C6(k6[e]):e==="transparent"?new Ve(NaN,NaN,NaN,0):null}function C6(e){return new Ve(e>>16&255,e>>8&255,e&255,1)}function C0(e,t,n,r){return r<=0&&(e=t=n=NaN),new Ve(e,t,n,r)}function xd(e){return e instanceof Ji||(e=Ei(e)),e?(e=e.rgb(),new Ve(e.r,e.g,e.b,e.opacity)):new Ve}function Qn(e,t,n,r){return arguments.length===1?xd(e):new Ve(e,t,n,r??1)}function Ve(e,t,n,r){this.r=+e,this.g=+t,this.b=+n,this.opacity=+r}Jo(Ve,Qn,Xs(Ji,{brighter(e){return e=e==null?al:Math.pow(al,e),new Ve(this.r*e,this.g*e,this.b*e,this.opacity)},darker(e){return e=e==null?Zs:Math.pow(Zs,e),new Ve(this.r*e,this.g*e,this.b*e,this.opacity)},rgb(){return this},clamp(){return new Ve(sl(this.r),sl(this.g),sl(this.b),D0(this.opacity))},displayable(){return-.5<=this.r&&this.r<255.5&&-.5<=this.g&&this.g<255.5&&-.5<=this.b&&this.b<255.5&&0<=this.opacity&&this.opacity<=1},hex:B6,formatHex:B6,formatHex8:DL,formatRgb:D6,toString:D6}));function B6(){return`#${ol(this.r)}${ol(this.g)}${ol(this.b)}`}function DL(){return`#${ol(this.r)}${ol(this.g)}${ol(this.b)}${ol((isNaN(this.opacity)?1:this.opacity)*255)}`}function D6(){let e=D0(this.opacity);return`${e===1?"rgb(":"rgba("}${sl(this.r)}, ${sl(this.g)}, ${sl(this.b)}${e===1?")":`, ${e})`}`}function D0(e){return isNaN(e)?1:Math.max(0,Math.min(1,e))}function sl(e){return Math.max(0,Math.min(255,Math.round(e)||0))}function ol(e){return e=sl(e),(e<16?"0":"")+e.toString(16)}function L6(e,t,n,r){return r<=0?e=t=n=NaN:n<=0||n>=1?e=t=NaN:t<=0&&(e=NaN),new Ii(e,t,n,r)}function P6(e){if(e instanceof Ii)return new Ii(e.h,e.s,e.l,e.opacity);if(e instanceof Ji||(e=Ei(e)),!e)return new Ii;if(e instanceof Ii)return e;e=e.rgb();var t=e.r/255,n=e.g/255,r=e.b/255,i=Math.min(t,n,r),o=Math.max(t,n,r),s=NaN,a=o-i,l=(o+i)/2;return a?(t===o?s=(n-r)/a+(n<r)*6:n===o?s=(r-t)/a+2:s=(t-n)/a+4,a/=l<.5?o+i:2-o-i,s*=60):a=l>0&&l<1?0:s,new Ii(s,a,l,e.opacity)}function wd(e,t,n,r){return arguments.length===1?P6(e):new Ii(e,t,n,r??1)}function Ii(e,t,n,r){this.h=+e,this.s=+t,this.l=+n,this.opacity=+r}Jo(Ii,wd,Xs(Ji,{brighter(e){return e=e==null?al:Math.pow(al,e),new Ii(this.h,this.s,this.l*e,this.opacity)},darker(e){return e=e==null?Zs:Math.pow(Zs,e),new Ii(this.h,this.s,this.l*e,this.opacity)},rgb(){var e=this.h%360+(this.h<0)*360,t=isNaN(e)||isNaN(this.s)?0:this.s,n=this.l,r=n+(n<.5?n:1-n)*t,i=2*n-r;return new Ve(Mx(e>=240?e-240:e+120,i,r),Mx(e,i,r),Mx(e<120?e+240:e-120,i,r),this.opacity)},clamp(){return new Ii(R6(this.h),B0(this.s),B0(this.l),D0(this.opacity))},displayable(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1},formatHsl(){let e=D0(this.opacity);return`${e===1?"hsl(":"hsla("}${R6(this.h)}, ${B0(this.s)*100}%, ${B0(this.l)*100}%${e===1?")":`, ${e})`}`}}));function R6(e){return e=(e||0)%360,e<0?e+360:e}function B0(e){return Math.max(0,Math.min(1,e||0))}function Mx(e,t,n){return(e<60?t+(n-t)*e/60:e<180?n:e<240?t+(n-t)*(240-e)/60:t)*255}var L0=Math.PI/180,R0=180/Math.PI;var P0=18,U6=.96422,$6=1,z6=.82521,V6=4/29,Rc=6/29,j6=3*Rc*Rc,LL=Rc*Rc*Rc;function Y6(e){if(e instanceof to)return new to(e.l,e.a,e.b,e.opacity);if(e instanceof ts)return q6(e);e instanceof Ve||(e=xd(e));var t=Nx(e.r),n=Nx(e.g),r=Nx(e.b),i=Ax((.2225045*t+.7168786*n+.0606169*r)/$6),o,s;return t===n&&n===r?o=s=i:(o=Ax((.4360747*t+.3850649*n+.1430804*r)/U6),s=Ax((.0139322*t+.0971045*n+.7141733*r)/z6)),new to(116*i-16,500*(o-i),200*(i-s),e.opacity)}function Pc(e,t,n,r){return arguments.length===1?Y6(e):new to(e,t,n,r??1)}function to(e,t,n,r){this.l=+e,this.a=+t,this.b=+n,this.opacity=+r}Jo(to,Pc,Xs(Ji,{brighter(e){return new to(this.l+P0*(e??1),this.a,this.b,this.opacity)},darker(e){return new to(this.l-P0*(e??1),this.a,this.b,this.opacity)},rgb(){var e=(this.l+16)/116,t=isNaN(this.a)?e:e+this.a/500,n=isNaN(this.b)?e:e-this.b/200;return t=U6*Fx(t),e=$6*Fx(e),n=z6*Fx(n),new Ve(kx(3.1338561*t-1.6168667*e-.4906146*n),kx(-.9787684*t+1.9161415*e+.033454*n),kx(.0719453*t-.2289914*e+1.4052427*n),this.opacity)}}));function Ax(e){return e>LL?Math.pow(e,1/3):e/j6+V6}function Fx(e){return e>Rc?e*e*e:j6*(e-V6)}function kx(e){return 255*(e<=.0031308?12.92*e:1.055*Math.pow(e,1/2.4)-.055)}function Nx(e){return(e/=255)<=.04045?e/12.92:Math.pow((e+.055)/1.055,2.4)}function RL(e){if(e instanceof ts)return new ts(e.h,e.c,e.l,e.opacity);if(e instanceof to||(e=Y6(e)),e.a===0&&e.b===0)return new ts(NaN,0<e.l&&e.l<100?0:NaN,e.l,e.opacity);var t=Math.atan2(e.b,e.a)*R0;return new ts(t<0?t+360:t,Math.sqrt(e.a*e.a+e.b*e.b),e.l,e.opacity)}function vd(e,t,n,r){return arguments.length===1?RL(e):new ts(e,t,n,r??1)}function ts(e,t,n,r){this.h=+e,this.c=+t,this.l=+n,this.opacity=+r}function q6(e){if(isNaN(e.h))return new to(e.l,0,0,e.opacity);var t=e.h*L0;return new to(e.l,Math.cos(t)*e.c,Math.sin(t)*e.c,e.opacity)}Jo(ts,vd,Xs(Ji,{brighter(e){return new ts(this.h,this.c,this.l+P0*(e??1),this.opacity)},darker(e){return new ts(this.h,this.c,this.l-P0*(e??1),this.opacity)},rgb(){return q6(this).rgb()}}));var X6=-.14861,Ox=1.78277,Cx=-.29227,U0=-.90649,Sd=1.97294,W6=Sd*U0,G6=Sd*Ox,H6=Ox*Cx-U0*X6;function PL(e){if(e instanceof ll)return new ll(e.h,e.s,e.l,e.opacity);e instanceof Ve||(e=xd(e));var t=e.r/255,n=e.g/255,r=e.b/255,i=(H6*r+W6*t-G6*n)/(H6+W6-G6),o=r-i,s=(Sd*(n-i)-Cx*o)/U0,a=Math.sqrt(s*s+o*o)/(Sd*i*(1-i)),l=a?Math.atan2(s,o)*R0-120:NaN;return new ll(l<0?l+360:l,a,i,e.opacity)}function Jn(e,t,n,r){return arguments.length===1?PL(e):new ll(e,t,n,r??1)}function ll(e,t,n,r){this.h=+e,this.s=+t,this.l=+n,this.opacity=+r}Jo(ll,Jn,Xs(Ji,{brighter(e){return e=e==null?al:Math.pow(al,e),new ll(this.h,this.s,this.l*e,this.opacity)},darker(e){return e=e==null?Zs:Math.pow(Zs,e),new ll(this.h,this.s,this.l*e,this.opacity)},rgb(){var e=isNaN(this.h)?0:(this.h+120)*L0,t=+this.l,n=isNaN(this.s)?0:this.s*t*(1-t),r=Math.cos(e),i=Math.sin(e);return new Ve(255*(t+n*(X6*r+Ox*i)),255*(t+n*(Cx*r+U0*i)),255*(t+n*(Sd*r)),this.opacity)}}));function Bx(e,t,n,r,i){var o=e*e,s=o*e;return((1-3*e+3*o-s)*t+(4-6*o+3*s)*n+(1+3*e+3*o-3*s)*r+s*i)/6}function Z6(e){var t=e.length-1;return function(n){var r=n<=0?n=0:n>=1?(n=1,t-1):Math.floor(n*t),i=e[r],o=e[r+1],s=r>0?e[r-1]:2*i-o,a=r<t-1?e[r+2]:2*o-i;return Bx((n-r/t)*t,s,i,o,a)}}function K6(e){var t=e.length;return function(n){var r=Math.floor(((n%=1)<0?++n:n)*t),i=e[(r+t-1)%t],o=e[r%t],s=e[(r+1)%t],a=e[(r+2)%t];return Bx((n-r/t)*t,i,o,s,a)}}var Uc=e=>()=>e;function Q6(e,t){return function(n){return e+n*t}}function UL(e,t,n){return e=Math.pow(e,n),t=Math.pow(t,n)-e,n=1/n,function(r){return Math.pow(e+r*t,n)}}function $c(e,t){var n=t-e;return n?Q6(e,n>180||n<-180?n-360*Math.round(n/360):n):Uc(isNaN(e)?t:e)}function J6(e){return(e=+e)==1?be:function(t,n){return n-t?UL(t,n,e):Uc(isNaN(t)?n:t)}}function be(e,t){var n=t-e;return n?Q6(e,n):Uc(isNaN(e)?t:e)}var Zr=function e(t){var n=J6(t);function r(i,o){var s=n((i=Qn(i)).r,(o=Qn(o)).r),a=n(i.g,o.g),l=n(i.b,o.b),c=be(i.opacity,o.opacity);return function(u){return i.r=s(u),i.g=a(u),i.b=l(u),i.opacity=c(u),i+""}}return r.gamma=e,r}(1);function tE(e){return function(t){var n=t.length,r=new Array(n),i=new Array(n),o=new Array(n),s,a;for(s=0;s<n;++s)a=Qn(t[s]),r[s]=a.r||0,i[s]=a.g||0,o[s]=a.b||0;return r=e(r),i=e(i),o=e(o),a.opacity=1,function(l){return a.r=r(l),a.g=i(l),a.b=o(l),a+""}}}var Dx=tE(Z6),$L=tE(K6);function eE(e,t){t||(t=[]);var n=e?Math.min(t.length,e.length):0,r=t.slice(),i;return function(o){for(i=0;i<n;++i)r[i]=e[i]*(1-o)+t[i]*o;return r}}function nE(e){return ArrayBuffer.isView(e)&&!(e instanceof DataView)}function rE(e,t){var n=t?t.length:0,r=e?Math.min(n,e.length):0,i=new Array(r),o=new Array(n),s;for(s=0;s<r;++s)i[s]=Mi(e[s],t[s]);for(;s<n;++s)o[s]=t[s];return function(a){for(s=0;s<r;++s)o[s]=i[s](a);return o}}function iE(e,t){var n=new Date;return e=+e,t=+t,function(r){return n.setTime(e*(1-r)+t*r),n}}function pe(e,t){return e=+e,t=+t,function(n){return e*(1-n)+t*n}}function oE(e,t){var n={},r={},i;(e===null||typeof e!="object")&&(e={}),(t===null||typeof t!="object")&&(t={});for(i in t)i in e?n[i]=Mi(e[i],t[i]):r[i]=t[i];return function(o){for(i in n)r[i]=n[i](o);return r}}var Rx=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,Lx=new RegExp(Rx.source,"g");function zL(e){return function(){return e}}function VL(e){return function(t){return e(t)+""}}function Td(e,t){var n=Rx.lastIndex=Lx.lastIndex=0,r,i,o,s=-1,a=[],l=[];for(e=e+"",t=t+"";(r=Rx.exec(e))&&(i=Lx.exec(t));)(o=i.index)>n&&(o=t.slice(n,o),a[s]?a[s]+=o:a[++s]=o),(r=r[0])===(i=i[0])?a[s]?a[s]+=i:a[++s]=i:(a[++s]=null,l.push({i:s,x:pe(r,i)})),n=Lx.lastIndex;return n<t.length&&(o=t.slice(n),a[s]?a[s]+=o:a[++s]=o),a.length<2?l[0]?VL(l[0].x):zL(t):(t=l.length,function(c){for(var u=0,d;u<t;++u)a[(d=l[u]).i]=d.x(c);return a.join("")})}function Mi(e,t){var n=typeof t,r;return t==null||n==="boolean"?Uc(t):(n==="number"?pe:n==="string"?(r=Ei(t))?(t=r,Zr):Td:t instanceof Ei?Zr:t instanceof Date?iE:nE(t)?eE:Array.isArray(t)?rE:typeof t.valueOf!="function"&&typeof t.toString!="function"||isNaN(t)?oE:pe)(e,t)}function cl(e,t){return e=+e,t=+t,function(n){return Math.round(e*(1-n)+t*n)}}var sE=180/Math.PI,$0={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1};function Px(e,t,n,r,i,o){var s,a,l;return(s=Math.sqrt(e*e+t*t))&&(e/=s,t/=s),(l=e*n+t*r)&&(n-=e*l,r-=t*l),(a=Math.sqrt(n*n+r*r))&&(n/=a,r/=a,l/=a),e*r<t*n&&(e=-e,t=-t,l=-l,s=-s),{translateX:i,translateY:o,rotate:Math.atan2(t,e)*sE,skewX:Math.atan(l)*sE,scaleX:s,scaleY:a}}var z0;function aE(e){let t=new(typeof DOMMatrix=="function"?DOMMatrix:WebKitCSSMatrix)(e+"");return t.isIdentity?$0:Px(t.a,t.b,t.c,t.d,t.e,t.f)}function lE(e){return e==null?$0:(z0||(z0=document.createElementNS("http://www.w3.org/2000/svg","g")),z0.setAttribute("transform",e),(e=z0.transform.baseVal.consolidate())?(e=e.matrix,Px(e.a,e.b,e.c,e.d,e.e,e.f)):$0)}function cE(e,t,n,r){function i(c){return c.length?c.pop()+" ":""}function o(c,u,d,f,h,p){if(c!==d||u!==f){var m=h.push("translate(",null,t,null,n);p.push({i:m-4,x:pe(c,d)},{i:m-2,x:pe(u,f)})}else(d||f)&&h.push("translate("+d+t+f+n)}function s(c,u,d,f){c!==u?(c-u>180?u+=360:u-c>180&&(c+=360),f.push({i:d.push(i(d)+"rotate(",null,r)-2,x:pe(c,u)})):u&&d.push(i(d)+"rotate("+u+r)}function a(c,u,d,f){c!==u?f.push({i:d.push(i(d)+"skewX(",null,r)-2,x:pe(c,u)}):u&&d.push(i(d)+"skewX("+u+r)}function l(c,u,d,f,h,p){if(c!==d||u!==f){var m=h.push(i(h)+"scale(",null,",",null,")");p.push({i:m-4,x:pe(c,d)},{i:m-2,x:pe(u,f)})}else(d!==1||f!==1)&&h.push(i(h)+"scale("+d+","+f+")")}return function(c,u){var d=[],f=[];return c=e(c),u=e(u),o(c.translateX,c.translateY,u.translateX,u.translateY,d,f),s(c.rotate,u.rotate,d,f),a(c.skewX,u.skewX,d,f),l(c.scaleX,c.scaleY,u.scaleX,u.scaleY,d,f),c=u=null,function(h){for(var p=-1,m=f.length,g;++p<m;)d[(g=f[p]).i]=g.x(h);return d.join("")}}}var Ux=cE(aE,"px, ","px)","deg)"),$x=cE(lE,", ",")",")");function uE(e){return function(t,n){var r=e((t=wd(t)).h,(n=wd(n)).h),i=be(t.s,n.s),o=be(t.l,n.l),s=be(t.opacity,n.opacity);return function(a){return t.h=r(a),t.s=i(a),t.l=o(a),t.opacity=s(a),t+""}}}var zx=uE($c),jL=uE(be);function V0(e,t){var n=be((e=Pc(e)).l,(t=Pc(t)).l),r=be(e.a,t.a),i=be(e.b,t.b),o=be(e.opacity,t.opacity);return function(s){return e.l=n(s),e.a=r(s),e.b=i(s),e.opacity=o(s),e+""}}function fE(e){return function(t,n){var r=e((t=vd(t)).h,(n=vd(n)).h),i=be(t.c,n.c),o=be(t.l,n.l),s=be(t.opacity,n.opacity);return function(a){return t.h=r(a),t.c=i(a),t.l=o(a),t.opacity=s(a),t+""}}}var Vx=fE($c),YL=fE(be);function dE(e){return function t(n){n=+n;function r(i,o){var s=e((i=Jn(i)).h,(o=Jn(o)).h),a=be(i.s,o.s),l=be(i.l,o.l),c=be(i.opacity,o.opacity);return function(u){return i.h=s(u),i.s=a(u),i.l=l(Math.pow(u,n)),i.opacity=c(u),i+""}}return r.gamma=t,r}(1)}var qL=dE($c),zc=dE(be);function eo(e,t){t===void 0&&(t=e,e=Mi);for(var n=0,r=t.length-1,i=t[0],o=new Array(r<0?0:r);n<r;)o[n]=e(i,i=t[++n]);return function(s){var a=Math.max(0,Math.min(r-1,Math.floor(s*=r)));return o[a](s-a)}}function Pn(e,t){for(var n=new Array(t),r=0;r<t;++r)n[r]=e(r/(t-1));return n}var Vc=0,Ed=0,Id=0,pE=1e3,j0,Md,Y0=0,ul=0,q0=0,Ad=typeof performance=="object"&&performance.now?performance:Date,mE=typeof window=="object"&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(e){setTimeout(e,17)};function kd(){return ul||(mE(WL),ul=Ad.now()+q0)}function WL(){ul=0}function Fd(){this._call=this._time=this._next=null}Fd.prototype=W0.prototype={constructor:Fd,restart:function(e,t,n){if(typeof e!="function")throw new TypeError("callback is not a function");n=(n==null?kd():+n)+(t==null?0:+t),!this._next&&Md!==this&&(Md?Md._next=this:j0=this,Md=this),this._call=e,this._time=n,jx()},stop:function(){this._call&&(this._call=null,this._time=1/0,jx())}};function W0(e,t,n){var r=new Fd;return r.restart(e,t,n),r}function yE(){kd(),++Vc;for(var e=j0,t;e;)(t=ul-e._time)>=0&&e._call.call(void 0,t),e=e._next;--Vc}function hE(){ul=(Y0=Ad.now())+q0,Vc=Ed=0;try{yE()}finally{Vc=0,HL(),ul=0}}function GL(){var e=Ad.now(),t=e-Y0;t>pE&&(q0-=t,Y0=e)}function HL(){for(var e,t=j0,n,r=1/0;t;)t._call?(r>t._time&&(r=t._time),e=t,t=t._next):(n=t._next,t._next=null,t=e?e._next=n:j0=n);Md=e,jx(r)}function jx(e){if(!Vc){Ed&&(Ed=clearTimeout(Ed));var t=e-ul;t>24?(e<1/0&&(Ed=setTimeout(hE,e-Ad.now()-q0)),Id&&(Id=clearInterval(Id))):(Id||(Y0=Ad.now(),Id=setInterval(GL,pE)),Vc=1,mE(hE))}}function G0(e,t,n){var r=new Fd;return t=t==null?0:+t,r.restart(i=>{r.stop(),e(i+t)},t,n),r}var XL=wx("start","end","cancel","interrupt"),ZL=[],_E=0,gE=1,X0=2,H0=3,bE=4,Z0=5,Nd=6;function Ks(e,t,n,r,i,o){var s=e.__transition;if(!s)e.__transition={};else if(n in s)return;KL(e,n,{name:t,index:r,group:i,on:XL,tween:ZL,time:o.time,delay:o.delay,duration:o.duration,ease:o.ease,timer:null,state:_E})}function Od(e,t){var n=Qe(e,t);if(n.state>_E)throw new Error("too late; already scheduled");return n}function En(e,t){var n=Qe(e,t);if(n.state>H0)throw new Error("too late; already running");return n}function Qe(e,t){var n=e.__transition;if(!n||!(n=n[t]))throw new Error("transition not found");return n}function KL(e,t,n){var r=e.__transition,i;r[t]=n,n.timer=W0(o,0,n.time);function o(c){n.state=gE,n.timer.restart(s,n.delay,n.time),n.delay<=c&&s(c-n.delay)}function s(c){var u,d,f,h;if(n.state!==gE)return l();for(u in r)if(h=r[u],h.name===n.name){if(h.state===H0)return G0(s);h.state===bE?(h.state=Nd,h.timer.stop(),h.on.call("interrupt",e,e.__data__,h.index,h.group),delete r[u]):+u<t&&(h.state=Nd,h.timer.stop(),h.on.call("cancel",e,e.__data__,h.index,h.group),delete r[u])}if(G0(function(){n.state===H0&&(n.state=bE,n.timer.restart(a,n.delay,n.time),a(c))}),n.state=X0,n.on.call("start",e,e.__data__,n.index,n.group),n.state===X0){for(n.state=H0,i=new Array(f=n.tween.length),u=0,d=-1;u<f;++u)(h=n.tween[u].value.call(e,e.__data__,n.index,n.group))&&(i[++d]=h);i.length=d+1}}function a(c){for(var u=c<n.duration?n.ease.call(null,c/n.duration):(n.timer.restart(l),n.state=Z0,1),d=-1,f=i.length;++d<f;)i[d].call(e,u);n.state===Z0&&(n.on.call("end",e,e.__data__,n.index,n.group),l())}function l(){n.state=Nd,n.timer.stop(),delete r[t];for(var c in r)return;delete e.__transition}}function K0(e,t){var n=e.__transition,r,i,o=!0,s;if(!!n){t=t==null?null:t+"";for(s in n){if((r=n[s]).name!==t){o=!1;continue}i=r.state>X0&&r.state<Z0,r.state=Nd,r.timer.stop(),r.on.call(i?"interrupt":"cancel",e,e.__data__,r.index,r.group),delete n[s]}o&&delete e.__transition}}function xE(e){return this.each(function(){K0(this,e)})}function QL(e,t){var n,r;return function(){var i=En(this,e),o=i.tween;if(o!==n){r=n=o;for(var s=0,a=r.length;s<a;++s)if(r[s].name===t){r=r.slice(),r.splice(s,1);break}}i.tween=r}}function JL(e,t,n){var r,i;if(typeof n!="function")throw new Error;return function(){var o=En(this,e),s=o.tween;if(s!==r){i=(r=s).slice();for(var a={name:t,value:n},l=0,c=i.length;l<c;++l)if(i[l].name===t){i[l]=a;break}l===c&&i.push(a)}o.tween=i}}function wE(e,t){var n=this._id;if(e+="",arguments.length<2){for(var r=Qe(this.node(),n).tween,i=0,o=r.length,s;i<o;++i)if((s=r[i]).name===e)return s.value;return null}return this.each((t==null?QL:JL)(n,e,t))}function jc(e,t,n){var r=e._id;return e.each(function(){var i=En(this,r);(i.value||(i.value={}))[t]=n.apply(this,arguments)}),function(i){return Qe(i,r).value[t]}}function Q0(e,t){var n;return(typeof t=="number"?pe:t instanceof Ei?Zr:(n=Ei(t))?(t=n,Zr):Td)(e,t)}function tR(e){return function(){this.removeAttribute(e)}}function eR(e){return function(){this.removeAttributeNS(e.space,e.local)}}function nR(e,t,n){var r,i=n+"",o;return function(){var s=this.getAttribute(e);return s===i?null:s===r?o:o=t(r=s,n)}}function rR(e,t,n){var r,i=n+"",o;return function(){var s=this.getAttributeNS(e.space,e.local);return s===i?null:s===r?o:o=t(r=s,n)}}function iR(e,t,n){var r,i,o;return function(){var s,a=n(this),l;return a==null?void this.removeAttribute(e):(s=this.getAttribute(e),l=a+"",s===l?null:s===r&&l===i?o:(i=l,o=t(r=s,a)))}}function oR(e,t,n){var r,i,o;return function(){var s,a=n(this),l;return a==null?void this.removeAttributeNS(e.space,e.local):(s=this.getAttributeNS(e.space,e.local),l=a+"",s===l?null:s===r&&l===i?o:(i=l,o=t(r=s,a)))}}function vE(e,t){var n=Ko(e),r=n==="transform"?$x:Q0;return this.attrTween(e,typeof t=="function"?(n.local?oR:iR)(n,r,jc(this,"attr."+e,t)):t==null?(n.local?eR:tR)(n):(n.local?rR:nR)(n,r,t))}function sR(e,t){return function(n){this.setAttribute(e,t.call(this,n))}}function aR(e,t){return function(n){this.setAttributeNS(e.space,e.local,t.call(this,n))}}function lR(e,t){var n,r;function i(){var o=t.apply(this,arguments);return o!==r&&(n=(r=o)&&aR(e,o)),n}return i._value=t,i}function cR(e,t){var n,r;function i(){var o=t.apply(this,arguments);return o!==r&&(n=(r=o)&&sR(e,o)),n}return i._value=t,i}function SE(e,t){var n="attr."+e;if(arguments.length<2)return(n=this.tween(n))&&n._value;if(t==null)return this.tween(n,null);if(typeof t!="function")throw new Error;var r=Ko(e);return this.tween(n,(r.local?lR:cR)(r,t))}function uR(e,t){return function(){Od(this,e).delay=+t.apply(this,arguments)}}function fR(e,t){return t=+t,function(){Od(this,e).delay=t}}function TE(e){var t=this._id;return arguments.length?this.each((typeof e=="function"?uR:fR)(t,e)):Qe(this.node(),t).delay}function dR(e,t){return function(){En(this,e).duration=+t.apply(this,arguments)}}function hR(e,t){return t=+t,function(){En(this,e).duration=t}}function IE(e){var t=this._id;return arguments.length?this.each((typeof e=="function"?dR:hR)(t,e)):Qe(this.node(),t).duration}function pR(e,t){if(typeof t!="function")throw new Error;return function(){En(this,e).ease=t}}function EE(e){var t=this._id;return arguments.length?this.each(pR(t,e)):Qe(this.node(),t).ease}function mR(e,t){return function(){var n=t.apply(this,arguments);if(typeof n!="function")throw new Error;En(this,e).ease=n}}function ME(e){if(typeof e!="function")throw new Error;return this.each(mR(this._id,e))}function AE(e){typeof e!="function"&&(e=gd(e));for(var t=this._groups,n=t.length,r=new Array(n),i=0;i<n;++i)for(var o=t[i],s=o.length,a=r[i]=[],l,c=0;c<s;++c)(l=o[c])&&e.call(l,l.__data__,c,o)&&a.push(l);return new tr(r,this._parents,this._name,this._id)}function FE(e){if(e._id!==this._id)throw new Error;for(var t=this._groups,n=e._groups,r=t.length,i=n.length,o=Math.min(r,i),s=new Array(r),a=0;a<o;++a)for(var l=t[a],c=n[a],u=l.length,d=s[a]=new Array(u),f,h=0;h<u;++h)(f=l[h]||c[h])&&(d[h]=f);for(;a<r;++a)s[a]=t[a];return new tr(s,this._parents,this._name,this._id)}function yR(e){return(e+"").trim().split(/^|\s+/).every(function(t){var n=t.indexOf(".");return n>=0&&(t=t.slice(0,n)),!t||t==="start"})}function gR(e,t,n){var r,i,o=yR(t)?Od:En;return function(){var s=o(this,e),a=s.on;a!==r&&(i=(r=a).copy()).on(t,n),s.on=i}}function kE(e,t){var n=this._id;return arguments.length<2?Qe(this.node(),n).on.on(e):this.each(gR(n,e,t))}function bR(e){return function(){var t=this.parentNode;for(var n in this.__transition)if(+n!==e)return;t&&t.removeChild(this)}}function NE(){return this.on("end.remove",bR(this._id))}function OE(e){var t=this._name,n=this._id;typeof e!="function"&&(e=il(e));for(var r=this._groups,i=r.length,o=new Array(i),s=0;s<i;++s)for(var a=r[s],l=a.length,c=o[s]=new Array(l),u,d,f=0;f<l;++f)(u=a[f])&&(d=e.call(u,u.__data__,f,a))&&("__data__"in u&&(d.__data__=u.__data__),c[f]=d,Ks(c[f],t,n,f,c,Qe(u,n)));return new tr(o,this._parents,t,n)}function CE(e){var t=this._name,n=this._id;typeof e!="function"&&(e=yd(e));for(var r=this._groups,i=r.length,o=[],s=[],a=0;a<i;++a)for(var l=r[a],c=l.length,u,d=0;d<c;++d)if(u=l[d]){for(var f=e.call(u,u.__data__,d,l),h,p=Qe(u,n),m=0,g=f.length;m<g;++m)(h=f[m])&&Ks(h,t,n,m,f,p);o.push(f),s.push(u)}return new tr(o,s,t,n)}var _R=Qo.prototype.constructor;function BE(){return new _R(this._groups,this._parents)}function xR(e,t){var n,r,i;return function(){var o=Hs(this,e),s=(this.style.removeProperty(e),Hs(this,e));return o===s?null:o===n&&s===r?i:i=t(n=o,r=s)}}function DE(e){return function(){this.style.removeProperty(e)}}function wR(e,t,n){var r,i=n+"",o;return function(){var s=Hs(this,e);return s===i?null:s===r?o:o=t(r=s,n)}}function vR(e,t,n){var r,i,o;return function(){var s=Hs(this,e),a=n(this),l=a+"";return a==null&&(l=a=(this.style.removeProperty(e),Hs(this,e))),s===l?null:s===r&&l===i?o:(i=l,o=t(r=s,a))}}function SR(e,t){var n,r,i,o="style."+t,s="end."+o,a;return function(){var l=En(this,e),c=l.on,u=l.value[o]==null?a||(a=DE(t)):void 0;(c!==n||i!==u)&&(r=(n=c).copy()).on(s,i=u),l.on=r}}function LE(e,t,n){var r=(e+="")=="transform"?Ux:Q0;return t==null?this.styleTween(e,xR(e,r)).on("end.style."+e,DE(e)):typeof t=="function"?this.styleTween(e,vR(e,r,jc(this,"style."+e,t))).each(SR(this._id,e)):this.styleTween(e,wR(e,r,t),n).on("end.style."+e,null)}function TR(e,t,n){return function(r){this.style.setProperty(e,t.call(this,r),n)}}function IR(e,t,n){var r,i;function o(){var s=t.apply(this,arguments);return s!==i&&(r=(i=s)&&TR(e,s,n)),r}return o._value=t,o}function RE(e,t,n){var r="style."+(e+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(t==null)return this.tween(r,null);if(typeof t!="function")throw new Error;return this.tween(r,IR(e,t,n??""))}function ER(e){return function(){this.textContent=e}}function MR(e){return function(){var t=e(this);this.textContent=t??""}}function PE(e){return this.tween("text",typeof e=="function"?MR(jc(this,"text",e)):ER(e==null?"":e+""))}function AR(e){return function(t){this.textContent=e.call(this,t)}}function FR(e){var t,n;function r(){var i=e.apply(this,arguments);return i!==n&&(t=(n=i)&&AR(i)),t}return r._value=e,r}function UE(e){var t="text";if(arguments.length<1)return(t=this.tween(t))&&t._value;if(e==null)return this.tween(t,null);if(typeof e!="function")throw new Error;return this.tween(t,FR(e))}function $E(){for(var e=this._name,t=this._id,n=J0(),r=this._groups,i=r.length,o=0;o<i;++o)for(var s=r[o],a=s.length,l,c=0;c<a;++c)if(l=s[c]){var u=Qe(l,t);Ks(l,e,n,c,s,{time:u.time+u.delay+u.duration,delay:0,duration:u.duration,ease:u.ease})}return new tr(r,this._parents,e,n)}function zE(){var e,t,n=this,r=n._id,i=n.size();return new Promise(function(o,s){var a={value:s},l={value:function(){--i===0&&o()}};n.each(function(){var c=En(this,r),u=c.on;u!==e&&(t=(e=u).copy(),t._.cancel.push(a),t._.interrupt.push(a),t._.end.push(l)),c.on=t}),i===0&&o()})}var kR=0;function tr(e,t,n,r){this._groups=e,this._parents=t,this._name=n,this._id=r}function VE(e){return Qo().transition(e)}function J0(){return++kR}var es=Qo.prototype;tr.prototype=VE.prototype={constructor:tr,select:OE,selectAll:CE,selectChild:es.selectChild,selectChildren:es.selectChildren,filter:AE,merge:FE,selection:BE,transition:$E,call:es.call,nodes:es.nodes,node:es.node,size:es.size,empty:es.empty,each:es.each,on:kE,attr:vE,attrTween:SE,style:LE,styleTween:RE,text:PE,textTween:UE,remove:NE,tween:wE,delay:TE,duration:IE,ease:EE,easeVarying:ME,end:zE,[Symbol.iterator]:es[Symbol.iterator]};function ty(e){return((e*=2)<=1?e*e*e:(e-=2)*e*e+2)/2}var NR={time:null,delay:0,duration:250,ease:ty};function OR(e,t){for(var n;!(n=e.__transition)||!(n=n[t]);)if(!(e=e.parentNode))throw new Error(`transition ${t} not found`);return n}function jE(e){var t,n;e instanceof tr?(t=e._id,e=e._name):(t=J0(),(n=NR).time=kd(),e=e==null?null:e+"");for(var r=this._groups,i=r.length,o=0;o<i;++o)for(var s=r[o],a=s.length,l,c=0;c<a;++c)(l=s[c])&&Ks(l,e,t,c,s,n||OR(l,t));return new tr(r,this._parents,e,t)}Qo.prototype.interrupt=xE;Qo.prototype.transition=jE;var{abs:alt,max:llt,min:clt}=Math;function YE(e){return[+e[0],+e[1]]}function CR(e){return[YE(e[0]),YE(e[1])]}var ult={name:"x",handles:["w","e"].map(Yx),input:function(e,t){return e==null?null:[[+e[0],t[0][1]],[+e[1],t[1][1]]]},output:function(e){return e&&[e[0][0],e[1][0]]}},flt={name:"y",handles:["n","s"].map(Yx),input:function(e,t){return e==null?null:[[t[0][0],+e[0]],[t[1][0],+e[1]]]},output:function(e){return e&&[e[0][1],e[1][1]]}},dlt={name:"xy",handles:["n","w","e","s","nw","ne","sw","se"].map(Yx),input:function(e){return e==null?null:CR(e)},output:function(e){return e}};function Yx(e){return{type:e}}var qx=Math.PI,Wx=2*qx,fl=1e-6,BR=Wx-fl;function qE(e){this._+=e[0];for(let t=1,n=e.length;t<n;++t)this._+=arguments[t]+e[t]}function DR(e){let t=Math.floor(e);if(!(t>=0))throw new Error(`invalid digits: ${e}`);if(t>15)return qE;let n=10**t;return function(r){this._+=r[0];for(let i=1,o=r.length;i<o;++i)this._+=Math.round(arguments[i]*n)/n+r[i]}}var Qs=class{constructor(t){this._x0=this._y0=this._x1=this._y1=null,this._="",this._append=t==null?qE:DR(t)}moveTo(t,n){this._append`M${this._x0=this._x1=+t},${this._y0=this._y1=+n}`}closePath(){this._x1!==null&&(this._x1=this._x0,this._y1=this._y0,this._append`Z`)}lineTo(t,n){this._append`L${this._x1=+t},${this._y1=+n}`}quadraticCurveTo(t,n,r,i){this._append`Q${+t},${+n},${this._x1=+r},${this._y1=+i}`}bezierCurveTo(t,n,r,i,o,s){this._append`C${+t},${+n},${+r},${+i},${this._x1=+o},${this._y1=+s}`}arcTo(t,n,r,i,o){if(t=+t,n=+n,r=+r,i=+i,o=+o,o<0)throw new Error(`negative radius: ${o}`);let s=this._x1,a=this._y1,l=r-t,c=i-n,u=s-t,d=a-n,f=u*u+d*d;if(this._x1===null)this._append`M${this._x1=t},${this._y1=n}`;else if(f>fl)if(!(Math.abs(d*l-c*u)>fl)||!o)this._append`L${this._x1=t},${this._y1=n}`;else{let h=r-s,p=i-a,m=l*l+c*c,g=h*h+p*p,b=Math.sqrt(m),y=Math.sqrt(f),x=o*Math.tan((qx-Math.acos((m+f-g)/(2*b*y)))/2),_=x/y,v=x/b;Math.abs(_-1)>fl&&this._append`L${t+_*u},${n+_*d}`,this._append`A${o},${o},0,0,${+(d*h>u*p)},${this._x1=t+v*l},${this._y1=n+v*c}`}}arc(t,n,r,i,o,s){if(t=+t,n=+n,r=+r,s=!!s,r<0)throw new Error(`negative radius: ${r}`);let a=r*Math.cos(i),l=r*Math.sin(i),c=t+a,u=n+l,d=1^s,f=s?i-o:o-i;this._x1===null?this._append`M${c},${u}`:(Math.abs(this._x1-c)>fl||Math.abs(this._y1-u)>fl)&&this._append`L${c},${u}`,r&&(f<0&&(f=f%Wx+Wx),f>BR?this._append`A${r},${r},0,1,${d},${t-a},${n-l}A${r},${r},0,1,${d},${this._x1=c},${this._y1=u}`:f>fl&&this._append`A${r},${r},0,${+(f>=qx)},${d},${this._x1=t+r*Math.cos(o)},${this._y1=n+r*Math.sin(o)}`)}rect(t,n,r,i){this._append`M${this._x0=this._x1=+t},${this._y0=this._y1=+n}h${r=+r}v${+i}h${-r}Z`}toString(){return this._}};function WE(){return new Qs}WE.prototype=Qs.prototype;function er(e=3){return new Qs(+e)}var LR=Array.prototype,ey=LR.slice;function GE(e,t){return e-t}function HE(e){for(var t=0,n=e.length,r=e[n-1][1]*e[0][0]-e[n-1][0]*e[0][1];++t<n;)r+=e[t-1][1]*e[t][0]-e[t-1][0]*e[t][1];return r}var no=e=>()=>e;function XE(e,t){for(var n=-1,r=t.length,i;++n<r;)if(i=RR(e,t[n]))return i;return 0}function RR(e,t){for(var n=t[0],r=t[1],i=-1,o=0,s=e.length,a=s-1;o<s;a=o++){var l=e[o],c=l[0],u=l[1],d=e[a],f=d[0],h=d[1];if(PR(l,d,t))return 0;u>r!=h>r&&n<(f-c)*(r-u)/(h-u)+c&&(i=-i)}return i}function PR(e,t,n){var r;return UR(e,t,n)&&$R(e[r=+(e[0]===t[0])],n[r],t[r])}function UR(e,t,n){return(t[0]-e[0])*(n[1]-e[1])===(n[0]-e[0])*(t[1]-e[1])}function $R(e,t,n){return e<=t&&t<=n||n<=t&&t<=e}function ZE(){}var ns=[[],[[[1,1.5],[.5,1]]],[[[1.5,1],[1,1.5]]],[[[1.5,1],[.5,1]]],[[[1,.5],[1.5,1]]],[[[1,1.5],[.5,1]],[[1,.5],[1.5,1]]],[[[1,.5],[1,1.5]]],[[[1,.5],[.5,1]]],[[[.5,1],[1,.5]]],[[[1,1.5],[1,.5]]],[[[.5,1],[1,.5]],[[1.5,1],[1,1.5]]],[[[1.5,1],[1,.5]]],[[[.5,1],[1.5,1]]],[[[1,1.5],[1.5,1]]],[[[.5,1],[1,1.5]]],[]];function Yc(){var e=1,t=1,n=Ws,r=l;function i(c){var u=n(c);if(Array.isArray(u))u=u.slice().sort(GE);else{let d=Qt(c,zR);for(u=Tn(...Cc(d[0],d[1],u),u);u[u.length-1]>=d[1];)u.pop();for(;u[1]<d[0];)u.shift()}return u.map(d=>o(c,d))}function o(c,u){let d=u==null?NaN:+u;if(isNaN(d))throw new Error(`invalid value: ${u}`);var f=[],h=[];return s(c,d,function(p){r(p,c,d),HE(p)>0?f.push([p]):h.push(p)}),h.forEach(function(p){for(var m=0,g=f.length,b;m<g;++m)if(XE((b=f[m])[0],p)!==-1){b.push(p);return}}),{type:"MultiPolygon",value:u,coordinates:f}}function s(c,u,d){var f=new Array,h=new Array,p,m,g,b,y,x;for(p=m=-1,b=dl(c[0],u),ns[b<<1].forEach(_);++p<e-1;)g=b,b=dl(c[p+1],u),ns[g|b<<1].forEach(_);for(ns[b<<0].forEach(_);++m<t-1;){for(p=-1,b=dl(c[m*e+e],u),y=dl(c[m*e],u),ns[b<<1|y<<2].forEach(_);++p<e-1;)g=b,b=dl(c[m*e+e+p+1],u),x=y,y=dl(c[m*e+p+1],u),ns[g|b<<1|y<<2|x<<3].forEach(_);ns[b|y<<3].forEach(_)}for(p=-1,y=c[m*e]>=u,ns[y<<2].forEach(_);++p<e-1;)x=y,y=dl(c[m*e+p+1],u),ns[y<<2|x<<3].forEach(_);ns[y<<3].forEach(_);function _(v){var w=[v[0][0]+p,v[0][1]+m],T=[v[1][0]+p,v[1][1]+m],M=a(w),F=a(T),S,I;(S=h[M])?(I=f[F])?(delete h[S.end],delete f[I.start],S===I?(S.ring.push(T),d(S.ring)):f[S.start]=h[I.end]={start:S.start,end:I.end,ring:S.ring.concat(I.ring)}):(delete h[S.end],S.ring.push(T),h[S.end=F]=S):(S=f[F])?(I=h[M])?(delete f[S.start],delete h[I.end],S===I?(S.ring.push(T),d(S.ring)):f[I.start]=h[S.end]={start:I.start,end:S.end,ring:I.ring.concat(S.ring)}):(delete f[S.start],S.ring.unshift(w),f[S.start=M]=S):f[M]=h[F]={start:M,end:F,ring:[w,T]}}}function a(c){return c[0]*2+c[1]*(e+1)*4}function l(c,u,d){c.forEach(function(f){var h=f[0],p=f[1],m=h|0,g=p|0,b=Gx(u[g*e+m]);h>0&&h<e&&m===h&&(f[0]=KE(h,Gx(u[g*e+m-1]),b,d)),p>0&&p<t&&g===p&&(f[1]=KE(p,Gx(u[(g-1)*e+m]),b,d))})}return i.contour=o,i.size=function(c){if(!arguments.length)return[e,t];var u=Math.floor(c[0]),d=Math.floor(c[1]);if(!(u>=0&&d>=0))throw new Error("invalid size");return e=u,t=d,i},i.thresholds=function(c){return arguments.length?(n=typeof c=="function"?c:Array.isArray(c)?no(ey.call(c)):no(c),i):n},i.smooth=function(c){return arguments.length?(r=c?l:ZE,i):r===l},i}function zR(e){return isFinite(e)?e:NaN}function dl(e,t){return e==null?!1:+e>=t}function Gx(e){return e==null||isNaN(e=+e)?-1/0:e}function KE(e,t,n,r){let i=r-t,o=n-t,s=isFinite(i)||isFinite(o)?i/o:Math.sign(i)/Math.sign(o);return isNaN(s)?e:e+s-.5}function VR(e){return e[0]}function jR(e){return e[1]}function YR(){return 1}function Hx(){var e=VR,t=jR,n=YR,r=960,i=500,o=20,s=2,a=o*3,l=r+a*2>>s,c=i+a*2>>s,u=no(20);function d(y){var x=new Float32Array(l*c),_=Math.pow(2,-s),v=-1;for(let O of y){var w=(e(O,++v,y)+a)*_,T=(t(O,v,y)+a)*_,M=+n(O,v,y);if(M&&w>=0&&w<l&&T>=0&&T<c){var F=Math.floor(w),S=Math.floor(T),I=w-F-.5,k=T-S-.5;x[F+S*l]+=(1-I)*(1-k)*M,x[F+1+S*l]+=I*(1-k)*M,x[F+1+(S+1)*l]+=I*k*M,x[F+(S+1)*l]+=(1-I)*k*M}}return ud({data:x,width:l,height:c},o*_),x}function f(y){var x=d(y),_=u(x),v=Math.pow(2,2*s);return Array.isArray(_)||(_=Tn(Number.MIN_VALUE,Jt(x)/v,_)),Yc().size([l,c]).thresholds(_.map(w=>w*v))(x).map((w,T)=>(w.value=+_[T],h(w)))}f.contours=function(y){var x=d(y),_=Yc().size([l,c]),v=Math.pow(2,2*s),w=T=>{T=+T;var M=h(_.contour(x,T*v));return M.value=T,M};return Object.defineProperty(w,"max",{get:()=>Jt(x)/v}),w};function h(y){return y.coordinates.forEach(p),y}function p(y){y.forEach(m)}function m(y){y.forEach(g)}function g(y){y[0]=y[0]*Math.pow(2,s)-a,y[1]=y[1]*Math.pow(2,s)-a}function b(){return a=o*3,l=r+a*2>>s,c=i+a*2>>s,f}return f.x=function(y){return arguments.length?(e=typeof y=="function"?y:no(+y),f):e},f.y=function(y){return arguments.length?(t=typeof y=="function"?y:no(+y),f):t},f.weight=function(y){return arguments.length?(n=typeof y=="function"?y:no(+y),f):n},f.size=function(y){if(!arguments.length)return[r,i];var x=+y[0],_=+y[1];if(!(x>=0&&_>=0))throw new Error("invalid size");return r=x,i=_,b()},f.cellSize=function(y){if(!arguments.length)return 1<<s;if(!((y=+y)>=1))throw new Error("invalid cell size");return s=Math.floor(Math.log(y)/Math.LN2),b()},f.thresholds=function(y){return arguments.length?(u=typeof y=="function"?y:Array.isArray(y)?no(ey.call(y)):no(y),f):u},f.bandwidth=function(y){if(!arguments.length)return Math.sqrt(o*(o+1));if(!((y=+y)>=0))throw new Error("invalid bandwidth");return o=(Math.sqrt(4*y*y+1)-1)/2,b()},f}var Yt=11102230246251565e-32,je=134217729,Cd=(3+8*Yt)*Yt;function hl(e,t,n,r,i){let o,s,a,l,c=t[0],u=r[0],d=0,f=0;u>c==u>-c?(o=c,c=t[++d]):(o=u,u=r[++f]);let h=0;if(d<e&&f<n)for(u>c==u>-c?(s=c+o,a=o-(s-c),c=t[++d]):(s=u+o,a=o-(s-u),u=r[++f]),o=s,a!==0&&(i[h++]=a);d<e&&f<n;)u>c==u>-c?(s=o+c,l=s-o,a=o-(s-l)+(c-l),c=t[++d]):(s=o+u,l=s-o,a=o-(s-l)+(u-l),u=r[++f]),o=s,a!==0&&(i[h++]=a);for(;d<e;)s=o+c,l=s-o,a=o-(s-l)+(c-l),c=t[++d],o=s,a!==0&&(i[h++]=a);for(;f<n;)s=o+u,l=s-o,a=o-(s-l)+(u-l),u=r[++f],o=s,a!==0&&(i[h++]=a);return(o!==0||h===0)&&(i[h++]=o),h}function Bd(e,t){let n=t[0];for(let r=1;r<e;r++)n+=t[r];return n}function P(e){return new Float64Array(e)}var qR=(3+16*Yt)*Yt,WR=(2+12*Yt)*Yt,GR=(9+64*Yt)*Yt*Yt,qc=P(4),QE=P(8),JE=P(12),tM=P(16),nr=P(4);function HR(e,t,n,r,i,o,s){let a,l,c,u,d,f,h,p,m,g,b,y,x,_,v,w,T,M,F=e-i,S=n-i,I=t-o,k=r-o;_=F*k,f=je*F,h=f-(f-F),p=F-h,f=je*k,m=f-(f-k),g=k-m,v=p*g-(_-h*m-p*m-h*g),w=I*S,f=je*I,h=f-(f-I),p=I-h,f=je*S,m=f-(f-S),g=S-m,T=p*g-(w-h*m-p*m-h*g),b=v-T,d=v-b,qc[0]=v-(b+d)+(d-T),y=_+b,d=y-_,x=_-(y-d)+(b-d),b=x-w,d=x-b,qc[1]=x-(b+d)+(d-w),M=y+b,d=M-y,qc[2]=y-(M-d)+(b-d),qc[3]=M;let O=Bd(4,qc),N=WR*s;if(O>=N||-O>=N||(d=e-F,a=e-(F+d)+(d-i),d=n-S,c=n-(S+d)+(d-i),d=t-I,l=t-(I+d)+(d-o),d=r-k,u=r-(k+d)+(d-o),a===0&&l===0&&c===0&&u===0)||(N=GR*s+Cd*Math.abs(O),O+=F*u+k*a-(I*c+S*l),O>=N||-O>=N))return O;_=a*k,f=je*a,h=f-(f-a),p=a-h,f=je*k,m=f-(f-k),g=k-m,v=p*g-(_-h*m-p*m-h*g),w=l*S,f=je*l,h=f-(f-l),p=l-h,f=je*S,m=f-(f-S),g=S-m,T=p*g-(w-h*m-p*m-h*g),b=v-T,d=v-b,nr[0]=v-(b+d)+(d-T),y=_+b,d=y-_,x=_-(y-d)+(b-d),b=x-w,d=x-b,nr[1]=x-(b+d)+(d-w),M=y+b,d=M-y,nr[2]=y-(M-d)+(b-d),nr[3]=M;let A=hl(4,qc,4,nr,QE);_=F*u,f=je*F,h=f-(f-F),p=F-h,f=je*u,m=f-(f-u),g=u-m,v=p*g-(_-h*m-p*m-h*g),w=I*c,f=je*I,h=f-(f-I),p=I-h,f=je*c,m=f-(f-c),g=c-m,T=p*g-(w-h*m-p*m-h*g),b=v-T,d=v-b,nr[0]=v-(b+d)+(d-T),y=_+b,d=y-_,x=_-(y-d)+(b-d),b=x-w,d=x-b,nr[1]=x-(b+d)+(d-w),M=y+b,d=M-y,nr[2]=y-(M-d)+(b-d),nr[3]=M;let C=hl(A,QE,4,nr,JE);_=a*u,f=je*a,h=f-(f-a),p=a-h,f=je*u,m=f-(f-u),g=u-m,v=p*g-(_-h*m-p*m-h*g),w=l*c,f=je*l,h=f-(f-l),p=l-h,f=je*c,m=f-(f-c),g=c-m,T=p*g-(w-h*m-p*m-h*g),b=v-T,d=v-b,nr[0]=v-(b+d)+(d-T),y=_+b,d=y-_,x=_-(y-d)+(b-d),b=x-w,d=x-b,nr[1]=x-(b+d)+(d-w),M=y+b,d=M-y,nr[2]=y-(M-d)+(b-d),nr[3]=M;let L=hl(C,JE,4,nr,tM);return tM[L-1]}function Wc(e,t,n,r,i,o){let s=(t-o)*(n-i),a=(e-i)*(r-o),l=s-a,c=Math.abs(s+a);return Math.abs(l)>=qR*c?l:-HR(e,t,n,r,i,o,c)}var Xlt=(7+56*Yt)*Yt,Zlt=(3+28*Yt)*Yt,Klt=(26+288*Yt)*Yt*Yt,Qlt=P(4),Jlt=P(4),tct=P(4),ect=P(4),nct=P(4),rct=P(4),ict=P(4),oct=P(4),sct=P(4),act=P(8),lct=P(8),cct=P(8),uct=P(4),fct=P(8),dct=P(8),hct=P(8),pct=P(12),mct=P(192),yct=P(192);var _ct=(10+96*Yt)*Yt,xct=(4+48*Yt)*Yt,wct=(44+576*Yt)*Yt*Yt,vct=P(4),Sct=P(4),Tct=P(4),Ict=P(4),Ect=P(4),Mct=P(4),Act=P(4),Fct=P(4),kct=P(8),Nct=P(8),Oct=P(8),Cct=P(8),Bct=P(8),Dct=P(8),Lct=P(8),Rct=P(8),Pct=P(8),Uct=P(4),$ct=P(4),zct=P(4),Vct=P(8),jct=P(16),Yct=P(16),qct=P(16),Wct=P(32),Gct=P(32),Hct=P(48),Xct=P(64),Zct=P(1152),Kct=P(1152);var eut=(16+224*Yt)*Yt,nut=(5+72*Yt)*Yt,rut=(71+1408*Yt)*Yt*Yt,iut=P(4),out=P(4),sut=P(4),aut=P(4),lut=P(4),cut=P(4),uut=P(4),fut=P(4),dut=P(4),hut=P(4),put=P(24),mut=P(24),yut=P(24),gut=P(24),but=P(24),_ut=P(24),xut=P(24),wut=P(24),vut=P(24),Sut=P(24),Tut=P(1152),Iut=P(1152),Eut=P(1152),Mut=P(1152),Aut=P(1152),Fut=P(2304),kut=P(2304),Nut=P(3456),Out=P(5760),Cut=P(8),But=P(8),Dut=P(8),Lut=P(16),Rut=P(24),Put=P(48),Uut=P(48),$ut=P(96),zut=P(192),Vut=P(384),jut=P(384),Yut=P(384),qut=P(768);var Wut=P(96),Gut=P(96),Hut=P(96),Xut=P(1152);var nM=Math.pow(2,-52),ny=new Uint32Array(512),Js=class{static from(t,n=t7,r=e7){let i=t.length,o=new Float64Array(i*2);for(let s=0;s<i;s++){let a=t[s];o[2*s]=n(a),o[2*s+1]=r(a)}return new Js(o)}constructor(t){let n=t.length>>1;if(n>0&&typeof t[0]!="number")throw new Error("Expected coords to contain numbers.");this.coords=t;let r=Math.max(2*n-5,0);this._triangles=new Uint32Array(r*3),this._halfedges=new Int32Array(r*3),this._hashSize=Math.ceil(Math.sqrt(n)),this._hullPrev=new Uint32Array(n),this._hullNext=new Uint32Array(n),this._hullTri=new Uint32Array(n),this._hullHash=new Int32Array(this._hashSize).fill(-1),this._ids=new Uint32Array(n),this._dists=new Float64Array(n),this.update()}update(){let{coords:t,_hullPrev:n,_hullNext:r,_hullTri:i,_hullHash:o}=this,s=t.length>>1,a=1/0,l=1/0,c=-1/0,u=-1/0;for(let S=0;S<s;S++){let I=t[2*S],k=t[2*S+1];I<a&&(a=I),k<l&&(l=k),I>c&&(c=I),k>u&&(u=k),this._ids[S]=S}let d=(a+c)/2,f=(l+u)/2,h=1/0,p,m,g;for(let S=0;S<s;S++){let I=Xx(d,f,t[2*S],t[2*S+1]);I<h&&(p=S,h=I)}let b=t[2*p],y=t[2*p+1];h=1/0;for(let S=0;S<s;S++){if(S===p)continue;let I=Xx(b,y,t[2*S],t[2*S+1]);I<h&&I>0&&(m=S,h=I)}let x=t[2*m],_=t[2*m+1],v=1/0;for(let S=0;S<s;S++){if(S===p||S===m)continue;let I=QR(b,y,x,_,t[2*S],t[2*S+1]);I<v&&(g=S,v=I)}let w=t[2*g],T=t[2*g+1];if(v===1/0){for(let k=0;k<s;k++)this._dists[k]=t[2*k]-t[0]||t[2*k+1]-t[1];Gc(this._ids,this._dists,0,s-1);let S=new Uint32Array(s),I=0;for(let k=0,O=-1/0;k<s;k++){let N=this._ids[k];this._dists[N]>O&&(S[I++]=N,O=this._dists[N])}this.hull=S.subarray(0,I),this.triangles=new Uint32Array(0),this.halfedges=new Uint32Array(0);return}if(Wc(b,y,x,_,w,T)<0){let S=m,I=x,k=_;m=g,x=w,_=T,g=S,w=I,T=k}let M=JR(b,y,x,_,w,T);this._cx=M.x,this._cy=M.y;for(let S=0;S<s;S++)this._dists[S]=Xx(t[2*S],t[2*S+1],M.x,M.y);Gc(this._ids,this._dists,0,s-1),this._hullStart=p;let F=3;r[p]=n[g]=m,r[m]=n[p]=g,r[g]=n[m]=p,i[p]=0,i[m]=1,i[g]=2,o.fill(-1),o[this._hashKey(b,y)]=p,o[this._hashKey(x,_)]=m,o[this._hashKey(w,T)]=g,this.trianglesLen=0,this._addTriangle(p,m,g,-1,-1,-1);for(let S=0,I,k;S<this._ids.length;S++){let O=this._ids[S],N=t[2*O],A=t[2*O+1];if(S>0&&Math.abs(N-I)<=nM&&Math.abs(A-k)<=nM||(I=N,k=A,O===p||O===m||O===g))continue;let C=0;for(let V=0,z=this._hashKey(N,A);V<this._hashSize&&(C=o[(z+V)%this._hashSize],!(C!==-1&&C!==r[C]));V++);C=n[C];let L=C,U;for(;U=r[L],Wc(N,A,t[2*L],t[2*L+1],t[2*U],t[2*U+1])>=0;)if(L=U,L===C){L=-1;break}if(L===-1)continue;let B=this._addTriangle(L,O,r[L],-1,-1,i[L]);i[O]=this._legalize(B+2),i[L]=B,F++;let $=r[L];for(;U=r[$],Wc(N,A,t[2*$],t[2*$+1],t[2*U],t[2*U+1])<0;)B=this._addTriangle($,O,U,i[O],-1,i[$]),i[O]=this._legalize(B+2),r[$]=$,F--,$=U;if(L===C)for(;U=n[L],Wc(N,A,t[2*U],t[2*U+1],t[2*L],t[2*L+1])<0;)B=this._addTriangle(U,O,L,-1,i[L],i[U]),this._legalize(B+2),i[U]=B,r[L]=L,F--,L=U;this._hullStart=n[O]=L,r[L]=n[$]=O,r[O]=$,o[this._hashKey(N,A)]=O,o[this._hashKey(t[2*L],t[2*L+1])]=L}this.hull=new Uint32Array(F);for(let S=0,I=this._hullStart;S<F;S++)this.hull[S]=I,I=r[I];this.triangles=this._triangles.subarray(0,this.trianglesLen),this.halfedges=this._halfedges.subarray(0,this.trianglesLen)}_hashKey(t,n){return Math.floor(ZR(t-this._cx,n-this._cy)*this._hashSize)%this._hashSize}_legalize(t){let{_triangles:n,_halfedges:r,coords:i}=this,o=0,s=0;for(;;){let a=r[t],l=t-t%3;if(s=l+(t+2)%3,a===-1){if(o===0)break;t=ny[--o];continue}let c=a-a%3,u=l+(t+1)%3,d=c+(a+2)%3,f=n[s],h=n[t],p=n[u],m=n[d];if(KR(i[2*f],i[2*f+1],i[2*h],i[2*h+1],i[2*p],i[2*p+1],i[2*m],i[2*m+1])){n[t]=m,n[a]=f;let b=r[d];if(b===-1){let x=this._hullStart;do{if(this._hullTri[x]===d){this._hullTri[x]=t;break}x=this._hullPrev[x]}while(x!==this._hullStart)}this._link(t,b),this._link(a,r[s]),this._link(s,d);let y=c+(a+1)%3;o<ny.length&&(ny[o++]=y)}else{if(o===0)break;t=ny[--o]}}return s}_link(t,n){this._halfedges[t]=n,n!==-1&&(this._halfedges[n]=t)}_addTriangle(t,n,r,i,o,s){let a=this.trianglesLen;return this._triangles[a]=t,this._triangles[a+1]=n,this._triangles[a+2]=r,this._link(a,i),this._link(a+1,o),this._link(a+2,s),this.trianglesLen+=3,a}};function ZR(e,t){let n=e/(Math.abs(e)+Math.abs(t));return(t>0?3-n:1+n)/4}function Xx(e,t,n,r){let i=e-n,o=t-r;return i*i+o*o}function KR(e,t,n,r,i,o,s,a){let l=e-s,c=t-a,u=n-s,d=r-a,f=i-s,h=o-a,p=l*l+c*c,m=u*u+d*d,g=f*f+h*h;return l*(d*g-m*h)-c*(u*g-m*f)+p*(u*h-d*f)<0}function QR(e,t,n,r,i,o){let s=n-e,a=r-t,l=i-e,c=o-t,u=s*s+a*a,d=l*l+c*c,f=.5/(s*c-a*l),h=(c*u-a*d)*f,p=(s*d-l*u)*f;return h*h+p*p}function JR(e,t,n,r,i,o){let s=n-e,a=r-t,l=i-e,c=o-t,u=s*s+a*a,d=l*l+c*c,f=.5/(s*c-a*l),h=e+(c*u-a*d)*f,p=t+(s*d-l*u)*f;return{x:h,y:p}}function Gc(e,t,n,r){if(r-n<=20)for(let i=n+1;i<=r;i++){let o=e[i],s=t[o],a=i-1;for(;a>=n&&t[e[a]]>s;)e[a+1]=e[a--];e[a+1]=o}else{let i=n+r>>1,o=n+1,s=r;Dd(e,i,o),t[e[n]]>t[e[r]]&&Dd(e,n,r),t[e[o]]>t[e[r]]&&Dd(e,o,r),t[e[n]]>t[e[o]]&&Dd(e,n,o);let a=e[o],l=t[a];for(;;){do o++;while(t[e[o]]<l);do s--;while(t[e[s]]>l);if(s<o)break;Dd(e,o,s)}e[n+1]=e[s],e[s]=a,r-o+1>=s-n?(Gc(e,t,o,r),Gc(e,t,n,s-1)):(Gc(e,t,n,s-1),Gc(e,t,o,r))}}function Dd(e,t,n){let r=e[t];e[t]=e[n],e[n]=r}function t7(e){return e[0]}function e7(e){return e[1]}var Kr=class{constructor(){this._x0=this._y0=this._x1=this._y1=null,this._=""}moveTo(t,n){this._+=`M${this._x0=this._x1=+t},${this._y0=this._y1=+n}`}closePath(){this._x1!==null&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")}lineTo(t,n){this._+=`L${this._x1=+t},${this._y1=+n}`}arc(t,n,r){t=+t,n=+n,r=+r;let i=t+r,o=n;if(r<0)throw new Error("negative radius");this._x1===null?this._+=`M${i},${o}`:(Math.abs(this._x1-i)>1e-6||Math.abs(this._y1-o)>1e-6)&&(this._+="L"+i+","+o),r&&(this._+=`A${r},${r},0,1,1,${t-r},${n}A${r},${r},0,1,1,${this._x1=i},${this._y1=o}`)}rect(t,n,r,i){this._+=`M${this._x0=this._x1=+t},${this._y0=this._y1=+n}h${+r}v${+i}h${-r}Z`}value(){return this._||null}};var ta=class{constructor(){this._=[]}moveTo(t,n){this._.push([t,n])}closePath(){this._.push(this._[0].slice())}lineTo(t,n){this._.push([t,n])}value(){return this._.length?this._:null}};var Ld=class{constructor(t,[n,r,i,o]=[0,0,960,500]){if(!((i=+i)>=(n=+n))||!((o=+o)>=(r=+r)))throw new Error("invalid bounds");this.delaunay=t,this._circumcenters=new Float64Array(t.points.length*2),this.vectors=new Float64Array(t.points.length*2),this.xmax=i,this.xmin=n,this.ymax=o,this.ymin=r,this._init()}update(){return this.delaunay.update(),this._init(),this}_init(){let{delaunay:{points:t,hull:n,triangles:r},vectors:i}=this,o,s,a=this.circumcenters=this._circumcenters.subarray(0,r.length/3*2);for(let m=0,g=0,b=r.length,y,x;m<b;m+=3,g+=2){let _=r[m]*2,v=r[m+1]*2,w=r[m+2]*2,T=t[_],M=t[_+1],F=t[v],S=t[v+1],I=t[w],k=t[w+1],O=F-T,N=S-M,A=I-T,C=k-M,L=(O*C-N*A)*2;if(Math.abs(L)<1e-9){if(o===void 0){o=s=0;for(let B of n)o+=t[B*2],s+=t[B*2+1];o/=n.length,s/=n.length}let U=1e9*Math.sign((o-T)*C-(s-M)*A);y=(T+I)/2-U*C,x=(M+k)/2+U*A}else{let U=1/L,B=O*O+N*N,$=A*A+C*C;y=T+(C*B-N*$)*U,x=M+(O*$-A*B)*U}a[g]=y,a[g+1]=x}let l=n[n.length-1],c,u=l*4,d,f=t[2*l],h,p=t[2*l+1];i.fill(0);for(let m=0;m<n.length;++m)l=n[m],c=u,d=f,h=p,u=l*4,f=t[2*l],p=t[2*l+1],i[c+2]=i[u]=h-p,i[c+3]=i[u+1]=f-d}render(t){let n=t==null?t=new Kr:void 0,{delaunay:{halfedges:r,inedges:i,hull:o},circumcenters:s,vectors:a}=this;if(o.length<=1)return null;for(let u=0,d=r.length;u<d;++u){let f=r[u];if(f<u)continue;let h=Math.floor(u/3)*2,p=Math.floor(f/3)*2,m=s[h],g=s[h+1],b=s[p],y=s[p+1];this._renderSegment(m,g,b,y,t)}let l,c=o[o.length-1];for(let u=0;u<o.length;++u){l=c,c=o[u];let d=Math.floor(i[c]/3)*2,f=s[d],h=s[d+1],p=l*4,m=this._project(f,h,a[p+2],a[p+3]);m&&this._renderSegment(f,h,m[0],m[1],t)}return n&&n.value()}renderBounds(t){let n=t==null?t=new Kr:void 0;return t.rect(this.xmin,this.ymin,this.xmax-this.xmin,this.ymax-this.ymin),n&&n.value()}renderCell(t,n){let r=n==null?n=new Kr:void 0,i=this._clip(t);if(i===null||!i.length)return;n.moveTo(i[0],i[1]);let o=i.length;for(;i[0]===i[o-2]&&i[1]===i[o-1]&&o>1;)o-=2;for(let s=2;s<o;s+=2)(i[s]!==i[s-2]||i[s+1]!==i[s-1])&&n.lineTo(i[s],i[s+1]);return n.closePath(),r&&r.value()}*cellPolygons(){let{delaunay:{points:t}}=this;for(let n=0,r=t.length/2;n<r;++n){let i=this.cellPolygon(n);i&&(i.index=n,yield i)}}cellPolygon(t){let n=new ta;return this.renderCell(t,n),n.value()}_renderSegment(t,n,r,i,o){let s,a=this._regioncode(t,n),l=this._regioncode(r,i);a===0&&l===0?(o.moveTo(t,n),o.lineTo(r,i)):(s=this._clipSegment(t,n,r,i,a,l))&&(o.moveTo(s[0],s[1]),o.lineTo(s[2],s[3]))}contains(t,n,r){return n=+n,n!==n||(r=+r,r!==r)?!1:this.delaunay._step(t,n,r)===t}*neighbors(t){let n=this._clip(t);if(n)for(let r of this.delaunay.neighbors(t)){let i=this._clip(r);if(i){t:for(let o=0,s=n.length;o<s;o+=2)for(let a=0,l=i.length;a<l;a+=2)if(n[o]===i[a]&&n[o+1]===i[a+1]&&n[(o+2)%s]===i[(a+l-2)%l]&&n[(o+3)%s]===i[(a+l-1)%l]){yield r;break t}}}}_cell(t){let{circumcenters:n,delaunay:{inedges:r,halfedges:i,triangles:o}}=this,s=r[t];if(s===-1)return null;let a=[],l=s;do{let c=Math.floor(l/3);if(a.push(n[c*2],n[c*2+1]),l=l%3===2?l-2:l+1,o[l]!==t)break;l=i[l]}while(l!==s&&l!==-1);return a}_clip(t){if(t===0&&this.delaunay.hull.length===1)return[this.xmax,this.ymin,this.xmax,this.ymax,this.xmin,this.ymax,this.xmin,this.ymin];let n=this._cell(t);if(n===null)return null;let{vectors:r}=this,i=t*4;return this._simplify(r[i]||r[i+1]?this._clipInfinite(t,n,r[i],r[i+1],r[i+2],r[i+3]):this._clipFinite(t,n))}_clipFinite(t,n){let r=n.length,i=null,o,s,a=n[r-2],l=n[r-1],c,u=this._regioncode(a,l),d,f=0;for(let h=0;h<r;h+=2)if(o=a,s=l,a=n[h],l=n[h+1],c=u,u=this._regioncode(a,l),c===0&&u===0)d=f,f=0,i?i.push(a,l):i=[a,l];else{let p,m,g,b,y;if(c===0){if((p=this._clipSegment(o,s,a,l,c,u))===null)continue;[m,g,b,y]=p}else{if((p=this._clipSegment(a,l,o,s,u,c))===null)continue;[b,y,m,g]=p,d=f,f=this._edgecode(m,g),d&&f&&this._edge(t,d,f,i,i.length),i?i.push(m,g):i=[m,g]}d=f,f=this._edgecode(b,y),d&&f&&this._edge(t,d,f,i,i.length),i?i.push(b,y):i=[b,y]}if(i)d=f,f=this._edgecode(i[0],i[1]),d&&f&&this._edge(t,d,f,i,i.length);else if(this.contains(t,(this.xmin+this.xmax)/2,(this.ymin+this.ymax)/2))return[this.xmax,this.ymin,this.xmax,this.ymax,this.xmin,this.ymax,this.xmin,this.ymin];return i}_clipSegment(t,n,r,i,o,s){let a=o<s;for(a&&([t,n,r,i,o,s]=[r,i,t,n,s,o]);;){if(o===0&&s===0)return a?[r,i,t,n]:[t,n,r,i];if(o&s)return null;let l,c,u=o||s;u&8?(l=t+(r-t)*(this.ymax-n)/(i-n),c=this.ymax):u&4?(l=t+(r-t)*(this.ymin-n)/(i-n),c=this.ymin):u&2?(c=n+(i-n)*(this.xmax-t)/(r-t),l=this.xmax):(c=n+(i-n)*(this.xmin-t)/(r-t),l=this.xmin),o?(t=l,n=c,o=this._regioncode(t,n)):(r=l,i=c,s=this._regioncode(r,i))}}_clipInfinite(t,n,r,i,o,s){let a=Array.from(n),l;if((l=this._project(a[0],a[1],r,i))&&a.unshift(l[0],l[1]),(l=this._project(a[a.length-2],a[a.length-1],o,s))&&a.push(l[0],l[1]),a=this._clipFinite(t,a))for(let c=0,u=a.length,d,f=this._edgecode(a[u-2],a[u-1]);c<u;c+=2)d=f,f=this._edgecode(a[c],a[c+1]),d&&f&&(c=this._edge(t,d,f,a,c),u=a.length);else this.contains(t,(this.xmin+this.xmax)/2,(this.ymin+this.ymax)/2)&&(a=[this.xmin,this.ymin,this.xmax,this.ymin,this.xmax,this.ymax,this.xmin,this.ymax]);return a}_edge(t,n,r,i,o){for(;n!==r;){let s,a;switch(n){case 5:n=4;continue;case 4:n=6,s=this.xmax,a=this.ymin;break;case 6:n=2;continue;case 2:n=10,s=this.xmax,a=this.ymax;break;case 10:n=8;continue;case 8:n=9,s=this.xmin,a=this.ymax;break;case 9:n=1;continue;case 1:n=5,s=this.xmin,a=this.ymin;break}(i[o]!==s||i[o+1]!==a)&&this.contains(t,s,a)&&(i.splice(o,0,s,a),o+=2)}return o}_project(t,n,r,i){let o=1/0,s,a,l;if(i<0){if(n<=this.ymin)return null;(s=(this.ymin-n)/i)<o&&(l=this.ymin,a=t+(o=s)*r)}else if(i>0){if(n>=this.ymax)return null;(s=(this.ymax-n)/i)<o&&(l=this.ymax,a=t+(o=s)*r)}if(r>0){if(t>=this.xmax)return null;(s=(this.xmax-t)/r)<o&&(a=this.xmax,l=n+(o=s)*i)}else if(r<0){if(t<=this.xmin)return null;(s=(this.xmin-t)/r)<o&&(a=this.xmin,l=n+(o=s)*i)}return[a,l]}_edgecode(t,n){return(t===this.xmin?1:t===this.xmax?2:0)|(n===this.ymin?4:n===this.ymax?8:0)}_regioncode(t,n){return(t<this.xmin?1:t>this.xmax?2:0)|(n<this.ymin?4:n>this.ymax?8:0)}_simplify(t){if(t&&t.length>4){for(let n=0;n<t.length;n+=2){let r=(n+2)%t.length,i=(n+4)%t.length;(t[n]===t[r]&&t[r]===t[i]||t[n+1]===t[r+1]&&t[r+1]===t[i+1])&&(t.splice(r,2),n-=2)}t.length||(t=null)}return t}};var n7=2*Math.PI,Hc=Math.pow;function r7(e){return e[0]}function i7(e){return e[1]}function o7(e){let{triangles:t,coords:n}=e;for(let r=0;r<t.length;r+=3){let i=2*t[r],o=2*t[r+1],s=2*t[r+2];if((n[s]-n[i])*(n[o+1]-n[i+1])-(n[o]-n[i])*(n[s+1]-n[i+1])>1e-10)return!1}return!0}function s7(e,t,n){return[e+Math.sin(e+t)*n,t+Math.cos(e-t)*n]}var Un=class{static from(t,n=r7,r=i7,i){return new Un("length"in t?a7(t,n,r,i):Float64Array.from(l7(t,n,r,i)))}constructor(t){this._delaunator=new Js(t),this.inedges=new Int32Array(t.length/2),this._hullIndex=new Int32Array(t.length/2),this.points=this._delaunator.coords,this._init()}update(){return this._delaunator.update(),this._init(),this}_init(){let t=this._delaunator,n=this.points;if(t.hull&&t.hull.length>2&&o7(t)){this.collinear=Int32Array.from({length:n.length/2},(f,h)=>h).sort((f,h)=>n[2*f]-n[2*h]||n[2*f+1]-n[2*h+1]);let l=this.collinear[0],c=this.collinear[this.collinear.length-1],u=[n[2*l],n[2*l+1],n[2*c],n[2*c+1]],d=1e-8*Math.hypot(u[3]-u[1],u[2]-u[0]);for(let f=0,h=n.length/2;f<h;++f){let p=s7(n[2*f],n[2*f+1],d);n[2*f]=p[0],n[2*f+1]=p[1]}this._delaunator=new Js(n)}else delete this.collinear;let r=this.halfedges=this._delaunator.halfedges,i=this.hull=this._delaunator.hull,o=this.triangles=this._delaunator.triangles,s=this.inedges.fill(-1),a=this._hullIndex.fill(-1);for(let l=0,c=r.length;l<c;++l){let u=o[l%3===2?l-2:l+1];(r[l]===-1||s[u]===-1)&&(s[u]=l)}for(let l=0,c=i.length;l<c;++l)a[i[l]]=l;i.length<=2&&i.length>0&&(this.triangles=new Int32Array(3).fill(-1),this.halfedges=new Int32Array(3).fill(-1),this.triangles[0]=i[0],s[i[0]]=1,i.length===2&&(s[i[1]]=0,this.triangles[1]=i[1],this.triangles[2]=i[1]))}voronoi(t){return new Ld(this,t)}*neighbors(t){let{inedges:n,hull:r,_hullIndex:i,halfedges:o,triangles:s,collinear:a}=this;if(a){let d=a.indexOf(t);d>0&&(yield a[d-1]),d<a.length-1&&(yield a[d+1]);return}let l=n[t];if(l===-1)return;let c=l,u=-1;do{if(yield u=s[c],c=c%3===2?c-2:c+1,s[c]!==t)return;if(c=o[c],c===-1){let d=r[(i[t]+1)%r.length];d!==u&&(yield d);return}}while(c!==l)}find(t,n,r=0){if(t=+t,t!==t||(n=+n,n!==n))return-1;let i=r,o;for(;(o=this._step(r,t,n))>=0&&o!==r&&o!==i;)r=o;return o}_step(t,n,r){let{inedges:i,hull:o,_hullIndex:s,halfedges:a,triangles:l,points:c}=this;if(i[t]===-1||!c.length)return(t+1)%(c.length>>1);let u=t,d=Hc(n-c[t*2],2)+Hc(r-c[t*2+1],2),f=i[t],h=f;do{let p=l[h],m=Hc(n-c[p*2],2)+Hc(r-c[p*2+1],2);if(m<d&&(d=m,u=p),h=h%3===2?h-2:h+1,l[h]!==t)break;if(h=a[h],h===-1){if(h=o[(s[t]+1)%o.length],h!==p&&Hc(n-c[h*2],2)+Hc(r-c[h*2+1],2)<d)return h;break}}while(h!==f);return u}render(t){let n=t==null?t=new Kr:void 0,{points:r,halfedges:i,triangles:o}=this;for(let s=0,a=i.length;s<a;++s){let l=i[s];if(l<s)continue;let c=o[s]*2,u=o[l]*2;t.moveTo(r[c],r[c+1]),t.lineTo(r[u],r[u+1])}return this.renderHull(t),n&&n.value()}renderPoints(t,n){n===void 0&&(!t||typeof t.moveTo!="function")&&(n=t,t=null),n=n==null?2:+n;let r=t==null?t=new Kr:void 0,{points:i}=this;for(let o=0,s=i.length;o<s;o+=2){let a=i[o],l=i[o+1];t.moveTo(a+n,l),t.arc(a,l,n,0,n7)}return r&&r.value()}renderHull(t){let n=t==null?t=new Kr:void 0,{hull:r,points:i}=this,o=r[0]*2,s=r.length;t.moveTo(i[o],i[o+1]);for(let a=1;a<s;++a){let l=2*r[a];t.lineTo(i[l],i[l+1])}return t.closePath(),n&&n.value()}hullPolygon(){let t=new ta;return this.renderHull(t),t.value()}renderTriangle(t,n){let r=n==null?n=new Kr:void 0,{points:i,triangles:o}=this,s=o[t*=3]*2,a=o[t+1]*2,l=o[t+2]*2;return n.moveTo(i[s],i[s+1]),n.lineTo(i[a],i[a+1]),n.lineTo(i[l],i[l+1]),n.closePath(),r&&r.value()}*trianglePolygons(){let{triangles:t}=this;for(let n=0,r=t.length/3;n<r;++n)yield this.trianglePolygon(n)}trianglePolygon(t){let n=new ta;return this.renderTriangle(t,n),n.value()}};function a7(e,t,n,r){let i=e.length,o=new Float64Array(i*2);for(let s=0;s<i;++s){let a=e[s];o[s*2]=t.call(r,a,s,e),o[s*2+1]=n.call(r,a,s,e)}return o}function*l7(e,t,n,r){let i=0;for(let o of e)yield t.call(r,o,i,e),yield n.call(r,o,i,e),++i}function rM(e){return Math.abs(e=Math.round(e))>=1e21?e.toLocaleString("en").replace(/,/g,""):e.toString(10)}function pl(e,t){if((n=(e=t?e.toExponential(t-1):e.toExponential()).indexOf("e"))<0)return null;var n,r=e.slice(0,n);return[r.length>1?r[0]+r.slice(2):r,+e.slice(n+1)]}function ro(e){return e=pl(Math.abs(e)),e?e[1]:NaN}function iM(e,t){return function(n,r){for(var i=n.length,o=[],s=0,a=e[0],l=0;i>0&&a>0&&(l+a+1>r&&(a=Math.max(1,r-l)),o.push(n.substring(i-=a,i+a)),!((l+=a+1)>r));)a=e[s=(s+1)%e.length];return o.reverse().join(t)}}function oM(e){return function(t){return t.replace(/[0-9]/g,function(n){return e[+n]})}}var c7=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function io(e){if(!(t=c7.exec(e)))throw new Error("invalid format: "+e);var t;return new ry({fill:t[1],align:t[2],sign:t[3],symbol:t[4],zero:t[5],width:t[6],comma:t[7],precision:t[8]&&t[8].slice(1),trim:t[9],type:t[10]})}io.prototype=ry.prototype;function ry(e){this.fill=e.fill===void 0?" ":e.fill+"",this.align=e.align===void 0?">":e.align+"",this.sign=e.sign===void 0?"-":e.sign+"",this.symbol=e.symbol===void 0?"":e.symbol+"",this.zero=!!e.zero,this.width=e.width===void 0?void 0:+e.width,this.comma=!!e.comma,this.precision=e.precision===void 0?void 0:+e.precision,this.trim=!!e.trim,this.type=e.type===void 0?"":e.type+""}ry.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(this.width===void 0?"":Math.max(1,this.width|0))+(this.comma?",":"")+(this.precision===void 0?"":"."+Math.max(0,this.precision|0))+(this.trim?"~":"")+this.type};function sM(e){t:for(var t=e.length,n=1,r=-1,i;n<t;++n)switch(e[n]){case".":r=i=n;break;case"0":r===0&&(r=n),i=n;break;default:if(!+e[n])break t;r>0&&(r=0);break}return r>0?e.slice(0,r)+e.slice(i+1):e}var Zx;function aM(e,t){var n=pl(e,t);if(!n)return e+"";var r=n[0],i=n[1],o=i-(Zx=Math.max(-8,Math.min(8,Math.floor(i/3)))*3)+1,s=r.length;return o===s?r:o>s?r+new Array(o-s+1).join("0"):o>0?r.slice(0,o)+"."+r.slice(o):"0."+new Array(1-o).join("0")+pl(e,Math.max(0,t+o-1))[0]}function Kx(e,t){var n=pl(e,t);if(!n)return e+"";var r=n[0],i=n[1];return i<0?"0."+new Array(-i).join("0")+r:r.length>i+1?r.slice(0,i+1)+"."+r.slice(i+1):r+new Array(i-r.length+2).join("0")}var Qx={"%":(e,t)=>(e*100).toFixed(t),b:e=>Math.round(e).toString(2),c:e=>e+"",d:rM,e:(e,t)=>e.toExponential(t),f:(e,t)=>e.toFixed(t),g:(e,t)=>e.toPrecision(t),o:e=>Math.round(e).toString(8),p:(e,t)=>Kx(e*100,t),r:Kx,s:aM,X:e=>Math.round(e).toString(16).toUpperCase(),x:e=>Math.round(e).toString(16)};function Jx(e){return e}var lM=Array.prototype.map,cM=["y","z","a","f","p","n","\xB5","m","","k","M","G","T","P","E","Z","Y"];function uM(e){var t=e.grouping===void 0||e.thousands===void 0?Jx:iM(lM.call(e.grouping,Number),e.thousands+""),n=e.currency===void 0?"":e.currency[0]+"",r=e.currency===void 0?"":e.currency[1]+"",i=e.decimal===void 0?".":e.decimal+"",o=e.numerals===void 0?Jx:oM(lM.call(e.numerals,String)),s=e.percent===void 0?"%":e.percent+"",a=e.minus===void 0?"\u2212":e.minus+"",l=e.nan===void 0?"NaN":e.nan+"";function c(d){d=io(d);var f=d.fill,h=d.align,p=d.sign,m=d.symbol,g=d.zero,b=d.width,y=d.comma,x=d.precision,_=d.trim,v=d.type;v==="n"?(y=!0,v="g"):Qx[v]||(x===void 0&&(x=12),_=!0,v="g"),(g||f==="0"&&h==="=")&&(g=!0,f="0",h="=");var w=m==="$"?n:m==="#"&&/[boxX]/.test(v)?"0"+v.toLowerCase():"",T=m==="$"?r:/[%p]/.test(v)?s:"",M=Qx[v],F=/[defgprs%]/.test(v);x=x===void 0?6:/[gprs]/.test(v)?Math.max(1,Math.min(21,x)):Math.max(0,Math.min(20,x));function S(I){var k=w,O=T,N,A,C;if(v==="c")O=M(I)+O,I="";else{I=+I;var L=I<0||1/I<0;if(I=isNaN(I)?l:M(Math.abs(I),x),_&&(I=sM(I)),L&&+I==0&&p!=="+"&&(L=!1),k=(L?p==="("?p:a:p==="-"||p==="("?"":p)+k,O=(v==="s"?cM[8+Zx/3]:"")+O+(L&&p==="("?")":""),F){for(N=-1,A=I.length;++N<A;)if(C=I.charCodeAt(N),48>C||C>57){O=(C===46?i+I.slice(N+1):I.slice(N))+O,I=I.slice(0,N);break}}}y&&!g&&(I=t(I,1/0));var U=k.length+I.length+O.length,B=U<b?new Array(b-U+1).join(f):"";switch(y&&g&&(I=t(B+I,B.length?b-O.length:1/0),B=""),h){case"<":I=k+I+O+B;break;case"=":I=k+B+I+O;break;case"^":I=B.slice(0,U=B.length>>1)+k+I+O+B.slice(U);break;default:I=B+k+I+O;break}return o(I)}return S.toString=function(){return d+""},S}function u(d,f){var h=c((d=io(d),d.type="f",d)),p=Math.max(-8,Math.min(8,Math.floor(ro(f)/3)))*3,m=Math.pow(10,-p),g=cM[8+p/3];return function(b){return h(m*b)+g}}return{format:c,formatPrefix:u}}var iy,Qr,oy;tw({thousands:",",grouping:[3],currency:["$",""]});function tw(e){return iy=uM(e),Qr=iy.format,oy=iy.formatPrefix,iy}function ew(e){return Math.max(0,-ro(Math.abs(e)))}function nw(e,t){return Math.max(0,Math.max(-8,Math.min(8,Math.floor(ro(t)/3)))*3-ro(Math.abs(e)))}function rw(e,t){return e=Math.abs(e),t=Math.abs(t)-e,Math.max(0,ro(t)-ro(e))+1}var X=1e-6,ml=1e-12,dt=Math.PI,ie=dt/2,iw=dt/4,cn=dt*2,Me=180/dt,Lt=dt/180,It=Math.abs,Jr=Math.atan,Ye=Math.atan2,H=Math.cos,Rd=Math.ceil,sy=Math.exp;var ay=Math.hypot,yl=Math.log,ly=Math.pow,W=Math.sin,$n=Math.sign||function(e){return e>0?1:e<0?-1:0},oe=Math.sqrt,Xc=Math.tan;function cy(e){return e>1?0:e<-1?dt:Math.acos(e)}function me(e){return e>1?ie:e<-1?-ie:Math.asin(e)}function qe(){}function uy(e,t){e&&dM.hasOwnProperty(e.type)&&dM[e.type](e,t)}var fM={Feature:function(e,t){uy(e.geometry,t)},FeatureCollection:function(e,t){for(var n=e.features,r=-1,i=n.length;++r<i;)uy(n[r].geometry,t)}},dM={Sphere:function(e,t){t.sphere()},Point:function(e,t){e=e.coordinates,t.point(e[0],e[1],e[2])},MultiPoint:function(e,t){for(var n=e.coordinates,r=-1,i=n.length;++r<i;)e=n[r],t.point(e[0],e[1],e[2])},LineString:function(e,t){ow(e.coordinates,t,0)},MultiLineString:function(e,t){for(var n=e.coordinates,r=-1,i=n.length;++r<i;)ow(n[r],t,0)},Polygon:function(e,t){hM(e.coordinates,t)},MultiPolygon:function(e,t){for(var n=e.coordinates,r=-1,i=n.length;++r<i;)hM(n[r],t)},GeometryCollection:function(e,t){for(var n=e.geometries,r=-1,i=n.length;++r<i;)uy(n[r],t)}};function ow(e,t,n){var r=-1,i=e.length-n,o;for(t.lineStart();++r<i;)o=e[r],t.point(o[0],o[1],o[2]);t.lineEnd()}function hM(e,t){var n=-1,r=e.length;for(t.polygonStart();++n<r;)ow(e[n],t,1);t.polygonEnd()}function Cr(e,t){e&&fM.hasOwnProperty(e.type)?fM[e.type](e,t):uy(e,t)}function Pd(e){return[Ye(e[1],e[0]),me(e[2])]}function oo(e){var t=e[0],n=e[1],r=H(n);return[r*H(t),r*W(t),W(n)]}function Ud(e,t){return e[0]*t[0]+e[1]*t[1]+e[2]*t[2]}function Zc(e,t){return[e[1]*t[2]-e[2]*t[1],e[2]*t[0]-e[0]*t[2],e[0]*t[1]-e[1]*t[0]]}function fy(e,t){e[0]+=t[0],e[1]+=t[1],e[2]+=t[2]}function $d(e,t){return[e[0]*t,e[1]*t,e[2]*t]}function zd(e){var t=oe(e[0]*e[0]+e[1]*e[1]+e[2]*e[2]);e[0]/=t,e[1]/=t,e[2]/=t}var Vd,dy,hy,py,my,yy,gy,by,sw,aw,lw,yM,gM,rr,ir,or,Ai={sphere:qe,point:cw,lineStart:pM,lineEnd:mM,polygonStart:function(){Ai.lineStart=d7,Ai.lineEnd=h7},polygonEnd:function(){Ai.lineStart=pM,Ai.lineEnd=mM}};function cw(e,t){e*=Lt,t*=Lt;var n=H(t);jd(n*H(e),n*W(e),W(t))}function jd(e,t,n){++Vd,hy+=(e-hy)/Vd,py+=(t-py)/Vd,my+=(n-my)/Vd}function pM(){Ai.point=u7}function u7(e,t){e*=Lt,t*=Lt;var n=H(t);rr=n*H(e),ir=n*W(e),or=W(t),Ai.point=f7,jd(rr,ir,or)}function f7(e,t){e*=Lt,t*=Lt;var n=H(t),r=n*H(e),i=n*W(e),o=W(t),s=Ye(oe((s=ir*o-or*i)*s+(s=or*r-rr*o)*s+(s=rr*i-ir*r)*s),rr*r+ir*i+or*o);dy+=s,yy+=s*(rr+(rr=r)),gy+=s*(ir+(ir=i)),by+=s*(or+(or=o)),jd(rr,ir,or)}function mM(){Ai.point=cw}function d7(){Ai.point=p7}function h7(){bM(yM,gM),Ai.point=cw}function p7(e,t){yM=e,gM=t,e*=Lt,t*=Lt,Ai.point=bM;var n=H(t);rr=n*H(e),ir=n*W(e),or=W(t),jd(rr,ir,or)}function bM(e,t){e*=Lt,t*=Lt;var n=H(t),r=n*H(e),i=n*W(e),o=W(t),s=ir*o-or*i,a=or*r-rr*o,l=rr*i-ir*r,c=ay(s,a,l),u=me(c),d=c&&-u/c;sw.add(d*s),aw.add(d*a),lw.add(d*l),dy+=u,yy+=u*(rr+(rr=r)),gy+=u*(ir+(ir=i)),by+=u*(or+(or=o)),jd(rr,ir,or)}function uw(e){Vd=dy=hy=py=my=yy=gy=by=0,sw=new Sn,aw=new Sn,lw=new Sn,Cr(e,Ai);var t=+sw,n=+aw,r=+lw,i=ay(t,n,r);return i<ml&&(t=yy,n=gy,r=by,dy<X&&(t=hy,n=py,r=my),i=ay(t,n,r),i<ml)?[NaN,NaN]:[Ye(n,t)*Me,me(r/i)*Me]}function Yd(e,t){function n(r,i){return r=e(r,i),t(r[0],r[1])}return e.invert&&t.invert&&(n.invert=function(r,i){return r=t.invert(r,i),r&&e.invert(r[0],r[1])}),n}function fw(e,t){return It(e)>dt&&(e-=Math.round(e/cn)*cn),[e,t]}fw.invert=fw;function dw(e,t,n){return(e%=cn)?t||n?Yd(xM(e),wM(t,n)):xM(e):t||n?wM(t,n):fw}function _M(e){return function(t,n){return t+=e,It(t)>dt&&(t-=Math.round(t/cn)*cn),[t,n]}}function xM(e){var t=_M(e);return t.invert=_M(-e),t}function wM(e,t){var n=H(e),r=W(e),i=H(t),o=W(t);function s(a,l){var c=H(l),u=H(a)*c,d=W(a)*c,f=W(l),h=f*n+u*r;return[Ye(d*i-h*o,u*n-f*r),me(h*i+d*o)]}return s.invert=function(a,l){var c=H(l),u=H(a)*c,d=W(a)*c,f=W(l),h=f*i-d*o;return[Ye(d*i+f*o,u*n+h*r),me(h*n-u*r)]},s}function vM(e){e=dw(e[0]*Lt,e[1]*Lt,e.length>2?e[2]*Lt:0);function t(n){return n=e(n[0]*Lt,n[1]*Lt),n[0]*=Me,n[1]*=Me,n}return t.invert=function(n){return n=e.invert(n[0]*Lt,n[1]*Lt),n[0]*=Me,n[1]*=Me,n},t}function TM(e,t,n,r,i,o){if(!!n){var s=H(t),a=W(t),l=r*n;i==null?(i=t+r*cn,o=t-l/2):(i=SM(s,i),o=SM(s,o),(r>0?i<o:i>o)&&(i+=r*cn));for(var c,u=i;r>0?u>o:u<o;u-=l)c=Pd([s,-a*H(u),-a*W(u)]),e.point(c[0],c[1])}}function SM(e,t){t=oo(t),t[0]-=e,zd(t);var n=cy(-t[1]);return((-t[2]<0?-n:n)+cn-X)%cn}function _y(){var e=[],t;return{point:function(n,r,i){t.push([n,r,i])},lineStart:function(){e.push(t=[])},lineEnd:qe,rejoin:function(){e.length>1&&e.push(e.pop().concat(e.shift()))},result:function(){var n=e;return e=[],t=null,n}}}function Kc(e,t){return It(e[0]-t[0])<X&&It(e[1]-t[1])<X}function xy(e,t,n,r){this.x=e,this.z=t,this.o=n,this.e=r,this.v=!1,this.n=this.p=null}function wy(e,t,n,r,i){var o=[],s=[],a,l;if(e.forEach(function(p){if(!((m=p.length-1)<=0)){var m,g=p[0],b=p[m],y;if(Kc(g,b)){if(!g[2]&&!b[2]){for(i.lineStart(),a=0;a<m;++a)i.point((g=p[a])[0],g[1]);i.lineEnd();return}b[0]+=2*X}o.push(y=new xy(g,p,null,!0)),s.push(y.o=new xy(g,null,y,!1)),o.push(y=new xy(b,p,null,!1)),s.push(y.o=new xy(b,null,y,!0))}}),!!o.length){for(s.sort(t),IM(o),IM(s),a=0,l=s.length;a<l;++a)s[a].e=n=!n;for(var c=o[0],u,d;;){for(var f=c,h=!0;f.v;)if((f=f.n)===c)return;u=f.z,i.lineStart();do{if(f.v=f.o.v=!0,f.e){if(h)for(a=0,l=u.length;a<l;++a)i.point((d=u[a])[0],d[1]);else r(f.x,f.n.x,1,i);f=f.n}else{if(h)for(u=f.p.z,a=u.length-1;a>=0;--a)i.point((d=u[a])[0],d[1]);else r(f.x,f.p.x,-1,i);f=f.p}f=f.o,u=f.z,h=!h}while(!f.v);i.lineEnd()}}}function IM(e){if(!!(t=e.length)){for(var t,n=0,r=e[0],i;++n<t;)r.n=i=e[n],i.p=r,r=i;r.n=i=e[0],i.p=r}}function hw(e){return It(e[0])<=dt?e[0]:$n(e[0])*((It(e[0])+dt)%cn-dt)}function EM(e,t){var n=hw(t),r=t[1],i=W(r),o=[W(n),-H(n),0],s=0,a=0,l=new Sn;i===1?r=ie+X:i===-1&&(r=-ie-X);for(var c=0,u=e.length;c<u;++c)if(!!(f=(d=e[c]).length))for(var d,f,h=d[f-1],p=hw(h),m=h[1]/2+iw,g=W(m),b=H(m),y=0;y<f;++y,p=_,g=w,b=T,h=x){var x=d[y],_=hw(x),v=x[1]/2+iw,w=W(v),T=H(v),M=_-p,F=M>=0?1:-1,S=F*M,I=S>dt,k=g*w;if(l.add(Ye(k*F*W(S),b*T+k*H(S))),s+=I?M+F*cn:M,I^p>=n^_>=n){var O=Zc(oo(h),oo(x));zd(O);var N=Zc(o,O);zd(N);var A=(I^M>=0?-1:1)*me(N[2]);(r>A||r===A&&(O[0]||O[1]))&&(a+=I^M>=0?1:-1)}}return(s<-X||s<X&&l<-ml)^a&1}function vy(e,t,n,r){return function(i){var o=t(i),s=_y(),a=t(s),l=!1,c,u,d,f={point:h,lineStart:m,lineEnd:g,polygonStart:function(){f.point=b,f.lineStart=y,f.lineEnd=x,u=[],c=[]},polygonEnd:function(){f.point=h,f.lineStart=m,f.lineEnd=g,u=Bc(u);var _=EM(c,r);u.length?(l||(i.polygonStart(),l=!0),wy(u,y7,_,n,i)):_&&(l||(i.polygonStart(),l=!0),i.lineStart(),n(null,null,1,i),i.lineEnd()),l&&(i.polygonEnd(),l=!1),u=c=null},sphere:function(){i.polygonStart(),i.lineStart(),n(null,null,1,i),i.lineEnd(),i.polygonEnd()}};function h(_,v){e(_,v)&&i.point(_,v)}function p(_,v){o.point(_,v)}function m(){f.point=p,o.lineStart()}function g(){f.point=h,o.lineEnd()}function b(_,v){d.push([_,v]),a.point(_,v)}function y(){a.lineStart(),d=[]}function x(){b(d[0][0],d[0][1]),a.lineEnd();var _=a.clean(),v=s.result(),w,T=v.length,M,F,S;if(d.pop(),c.push(d),d=null,!!T){if(_&1){if(F=v[0],(M=F.length-1)>0){for(l||(i.polygonStart(),l=!0),i.lineStart(),w=0;w<M;++w)i.point((S=F[w])[0],S[1]);i.lineEnd()}return}T>1&&_&2&&v.push(v.pop().concat(v.shift())),u.push(v.filter(m7))}}return f}}function m7(e){return e.length>1}function y7(e,t){return((e=e.x)[0]<0?e[1]-ie-X:ie-e[1])-((t=t.x)[0]<0?t[1]-ie-X:ie-t[1])}var pw=vy(function(){return!0},g7,_7,[-dt,-ie]);function g7(e){var t=NaN,n=NaN,r=NaN,i;return{lineStart:function(){e.lineStart(),i=1},point:function(o,s){var a=o>0?dt:-dt,l=It(o-t);It(l-dt)<X?(e.point(t,n=(n+s)/2>0?ie:-ie),e.point(r,n),e.lineEnd(),e.lineStart(),e.point(a,n),e.point(o,n),i=0):r!==a&&l>=dt&&(It(t-r)<X&&(t-=r*X),It(o-a)<X&&(o-=a*X),n=b7(t,n,o,s),e.point(r,n),e.lineEnd(),e.lineStart(),e.point(a,n),i=0),e.point(t=o,n=s),r=a},lineEnd:function(){e.lineEnd(),t=n=NaN},clean:function(){return 2-i}}}function b7(e,t,n,r){var i,o,s=W(e-n);return It(s)>X?Jr((W(t)*(o=H(r))*W(n)-W(r)*(i=H(t))*W(e))/(i*o*s)):(t+r)/2}function _7(e,t,n,r){var i;if(e==null)i=n*ie,r.point(-dt,i),r.point(0,i),r.point(dt,i),r.point(dt,0),r.point(dt,-i),r.point(0,-i),r.point(-dt,-i),r.point(-dt,0),r.point(-dt,i);else if(It(e[0]-t[0])>X){var o=e[0]<t[0]?dt:-dt;i=n*o/2,r.point(-o,i),r.point(0,i),r.point(o,i)}else r.point(t[0],t[1])}function MM(e){var t=H(e),n=6*Lt,r=t>0,i=It(t)>X;function o(u,d,f,h){TM(h,e,n,f,u,d)}function s(u,d){return H(u)*H(d)>t}function a(u){var d,f,h,p,m;return{lineStart:function(){p=h=!1,m=1},point:function(g,b){var y=[g,b],x,_=s(g,b),v=r?_?0:c(g,b):_?c(g+(g<0?dt:-dt),b):0;if(!d&&(p=h=_)&&u.lineStart(),_!==h&&(x=l(d,y),(!x||Kc(d,x)||Kc(y,x))&&(y[2]=1)),_!==h)m=0,_?(u.lineStart(),x=l(y,d),u.point(x[0],x[1])):(x=l(d,y),u.point(x[0],x[1],2),u.lineEnd()),d=x;else if(i&&d&&r^_){var w;!(v&f)&&(w=l(y,d,!0))&&(m=0,r?(u.lineStart(),u.point(w[0][0],w[0][1]),u.point(w[1][0],w[1][1]),u.lineEnd()):(u.point(w[1][0],w[1][1]),u.lineEnd(),u.lineStart(),u.point(w[0][0],w[0][1],3)))}_&&(!d||!Kc(d,y))&&u.point(y[0],y[1]),d=y,h=_,f=v},lineEnd:function(){h&&u.lineEnd(),d=null},clean:function(){return m|(p&&h)<<1}}}function l(u,d,f){var h=oo(u),p=oo(d),m=[1,0,0],g=Zc(h,p),b=Ud(g,g),y=g[0],x=b-y*y;if(!x)return!f&&u;var _=t*b/x,v=-t*y/x,w=Zc(m,g),T=$d(m,_),M=$d(g,v);fy(T,M);var F=w,S=Ud(T,F),I=Ud(F,F),k=S*S-I*(Ud(T,T)-1);if(!(k<0)){var O=oe(k),N=$d(F,(-S-O)/I);if(fy(N,T),N=Pd(N),!f)return N;var A=u[0],C=d[0],L=u[1],U=d[1],B;C<A&&(B=A,A=C,C=B);var $=C-A,V=It($-dt)<X,z=V||$<X;if(!V&&U<L&&(B=L,L=U,U=B),z?V?L+U>0^N[1]<(It(N[0]-A)<X?L:U):L<=N[1]&&N[1]<=U:$>dt^(A<=N[0]&&N[0]<=C)){var Q=$d(F,(-S+O)/I);return fy(Q,T),[N,Pd(Q)]}}}function c(u,d){var f=r?e:dt-e,h=0;return u<-f?h|=1:u>f&&(h|=2),d<-f?h|=4:d>f&&(h|=8),h}return vy(s,a,o,r?[0,-e]:[-dt,e-dt])}function AM(e,t,n,r,i,o){var s=e[0],a=e[1],l=t[0],c=t[1],u=0,d=1,f=l-s,h=c-a,p;if(p=n-s,!(!f&&p>0)){if(p/=f,f<0){if(p<u)return;p<d&&(d=p)}else if(f>0){if(p>d)return;p>u&&(u=p)}if(p=i-s,!(!f&&p<0)){if(p/=f,f<0){if(p>d)return;p>u&&(u=p)}else if(f>0){if(p<u)return;p<d&&(d=p)}if(p=r-a,!(!h&&p>0)){if(p/=h,h<0){if(p<u)return;p<d&&(d=p)}else if(h>0){if(p>d)return;p>u&&(u=p)}if(p=o-a,!(!h&&p<0)){if(p/=h,h<0){if(p>d)return;p>u&&(u=p)}else if(h>0){if(p<u)return;p<d&&(d=p)}return u>0&&(e[0]=s+u*f,e[1]=a+u*h),d<1&&(t[0]=s+d*f,t[1]=a+d*h),!0}}}}}var qd=1e9,Sy=-qd;function Qc(e,t,n,r){function i(c,u){return e<=c&&c<=n&&t<=u&&u<=r}function o(c,u,d,f){var h=0,p=0;if(c==null||(h=s(c,d))!==(p=s(u,d))||l(c,u)<0^d>0)do f.point(h===0||h===3?e:n,h>1?r:t);while((h=(h+d+4)%4)!==p);else f.point(u[0],u[1])}function s(c,u){return It(c[0]-e)<X?u>0?0:3:It(c[0]-n)<X?u>0?2:1:It(c[1]-t)<X?u>0?1:0:u>0?3:2}function a(c,u){return l(c.x,u.x)}function l(c,u){var d=s(c,1),f=s(u,1);return d!==f?d-f:d===0?u[1]-c[1]:d===1?c[0]-u[0]:d===2?c[1]-u[1]:u[0]-c[0]}return function(c){var u=c,d=_y(),f,h,p,m,g,b,y,x,_,v,w,T={point:M,lineStart:k,lineEnd:O,polygonStart:S,polygonEnd:I};function M(A,C){i(A,C)&&u.point(A,C)}function F(){for(var A=0,C=0,L=h.length;C<L;++C)for(var U=h[C],B=1,$=U.length,V=U[0],z,Q,Ft=V[0],ft=V[1];B<$;++B)z=Ft,Q=ft,V=U[B],Ft=V[0],ft=V[1],Q<=r?ft>r&&(Ft-z)*(r-Q)>(ft-Q)*(e-z)&&++A:ft<=r&&(Ft-z)*(r-Q)<(ft-Q)*(e-z)&&--A;return A}function S(){u=d,f=[],h=[],w=!0}function I(){var A=F(),C=w&&A,L=(f=Bc(f)).length;(C||L)&&(c.polygonStart(),C&&(c.lineStart(),o(null,null,1,c),c.lineEnd()),L&&wy(f,a,A,o,c),c.polygonEnd()),u=c,f=h=p=null}function k(){T.point=N,h&&h.push(p=[]),v=!0,_=!1,y=x=NaN}function O(){f&&(N(m,g),b&&_&&d.rejoin(),f.push(d.result())),T.point=M,_&&u.lineEnd()}function N(A,C){var L=i(A,C);if(h&&p.push([A,C]),v)m=A,g=C,b=L,v=!1,L&&(u.lineStart(),u.point(A,C));else if(L&&_)u.point(A,C);else{var U=[y=Math.max(Sy,Math.min(qd,y)),x=Math.max(Sy,Math.min(qd,x))],B=[A=Math.max(Sy,Math.min(qd,A)),C=Math.max(Sy,Math.min(qd,C))];AM(U,B,e,t,n,r)?(_||(u.lineStart(),u.point(U[0],U[1])),u.point(B[0],B[1]),L||u.lineEnd(),w=!1):L&&(u.lineStart(),u.point(A,C),w=!1)}y=A,x=C,_=L}return T}}function FM(e,t,n){var r=Ke(e,t-X,n).concat(t);return function(i){return r.map(function(o){return[i,o]})}}function kM(e,t,n){var r=Ke(e,t-X,n).concat(t);return function(i){return r.map(function(o){return[o,i]})}}function mw(){var e,t,n,r,i,o,s,a,l=10,c=l,u=90,d=360,f,h,p,m,g=2.5;function b(){return{type:"MultiLineString",coordinates:y()}}function y(){return Ke(Rd(r/u)*u,n,u).map(p).concat(Ke(Rd(a/d)*d,s,d).map(m)).concat(Ke(Rd(t/l)*l,e,l).filter(function(x){return It(x%u)>X}).map(f)).concat(Ke(Rd(o/c)*c,i,c).filter(function(x){return It(x%d)>X}).map(h))}return b.lines=function(){return y().map(function(x){return{type:"LineString",coordinates:x}})},b.outline=function(){return{type:"Polygon",coordinates:[p(r).concat(m(s).slice(1),p(n).reverse().slice(1),m(a).reverse().slice(1))]}},b.extent=function(x){return arguments.length?b.extentMajor(x).extentMinor(x):b.extentMinor()},b.extentMajor=function(x){return arguments.length?(r=+x[0][0],n=+x[1][0],a=+x[0][1],s=+x[1][1],r>n&&(x=r,r=n,n=x),a>s&&(x=a,a=s,s=x),b.precision(g)):[[r,a],[n,s]]},b.extentMinor=function(x){return arguments.length?(t=+x[0][0],e=+x[1][0],o=+x[0][1],i=+x[1][1],t>e&&(x=t,t=e,e=x),o>i&&(x=o,o=i,i=x),b.precision(g)):[[t,o],[e,i]]},b.step=function(x){return arguments.length?b.stepMajor(x).stepMinor(x):b.stepMinor()},b.stepMajor=function(x){return arguments.length?(u=+x[0],d=+x[1],b):[u,d]},b.stepMinor=function(x){return arguments.length?(l=+x[0],c=+x[1],b):[l,c]},b.precision=function(x){return arguments.length?(g=+x,f=FM(o,i,90),h=kM(t,e,g),p=FM(a,s,90),m=kM(r,n,g),b):g},b.extentMajor([[-180,-90+X],[180,90-X]]).extentMinor([[-180,-80-X],[180,80+X]])}function yw(){return mw()()}var Wd=e=>e;var gw=new Sn,bw=new Sn,NM,OM,_w,xw,ea={point:qe,lineStart:qe,lineEnd:qe,polygonStart:function(){ea.lineStart=x7,ea.lineEnd=v7},polygonEnd:function(){ea.lineStart=ea.lineEnd=ea.point=qe,gw.add(It(bw)),bw=new Sn},result:function(){var e=gw/2;return gw=new Sn,e}};function x7(){ea.point=w7}function w7(e,t){ea.point=CM,NM=_w=e,OM=xw=t}function CM(e,t){bw.add(xw*e-_w*t),_w=e,xw=t}function v7(){CM(NM,OM)}var ww=ea;var Jc=1/0,Ty=Jc,Gd=-Jc,Iy=Gd,S7={point:T7,lineStart:qe,lineEnd:qe,polygonStart:qe,polygonEnd:qe,result:function(){var e=[[Jc,Ty],[Gd,Iy]];return Gd=Iy=-(Ty=Jc=1/0),e}};function T7(e,t){e<Jc&&(Jc=e),e>Gd&&(Gd=e),t<Ty&&(Ty=t),t>Iy&&(Iy=t)}var tu=S7;var vw=0,Sw=0,Hd=0,Ey=0,My=0,eu=0,Tw=0,Iw=0,Xd=0,LM,RM,so,ao,Fi={point:gl,lineStart:BM,lineEnd:DM,polygonStart:function(){Fi.lineStart=M7,Fi.lineEnd=A7},polygonEnd:function(){Fi.point=gl,Fi.lineStart=BM,Fi.lineEnd=DM},result:function(){var e=Xd?[Tw/Xd,Iw/Xd]:eu?[Ey/eu,My/eu]:Hd?[vw/Hd,Sw/Hd]:[NaN,NaN];return vw=Sw=Hd=Ey=My=eu=Tw=Iw=Xd=0,e}};function gl(e,t){vw+=e,Sw+=t,++Hd}function BM(){Fi.point=I7}function I7(e,t){Fi.point=E7,gl(so=e,ao=t)}function E7(e,t){var n=e-so,r=t-ao,i=oe(n*n+r*r);Ey+=i*(so+e)/2,My+=i*(ao+t)/2,eu+=i,gl(so=e,ao=t)}function DM(){Fi.point=gl}function M7(){Fi.point=F7}function A7(){PM(LM,RM)}function F7(e,t){Fi.point=PM,gl(LM=so=e,RM=ao=t)}function PM(e,t){var n=e-so,r=t-ao,i=oe(n*n+r*r);Ey+=i*(so+e)/2,My+=i*(ao+t)/2,eu+=i,i=ao*e-so*t,Tw+=i*(so+e),Iw+=i*(ao+t),Xd+=i*3,gl(so=e,ao=t)}var Ew=Fi;function Ay(e){this._context=e}Ay.prototype={_radius:4.5,pointRadius:function(e){return this._radius=e,this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){this._line===0&&this._context.closePath(),this._point=NaN},point:function(e,t){switch(this._point){case 0:{this._context.moveTo(e,t),this._point=1;break}case 1:{this._context.lineTo(e,t);break}default:{this._context.moveTo(e+this._radius,t),this._context.arc(e,t,this._radius,0,cn);break}}},result:qe};var Aw=new Sn,Mw,UM,$M,Zd,Kd,Fy={point:qe,lineStart:function(){Fy.point=k7},lineEnd:function(){Mw&&zM(UM,$M),Fy.point=qe},polygonStart:function(){Mw=!0},polygonEnd:function(){Mw=null},result:function(){var e=+Aw;return Aw=new Sn,e}};function k7(e,t){Fy.point=zM,UM=Zd=e,$M=Kd=t}function zM(e,t){Zd-=e,Kd-=t,Aw.add(oe(Zd*Zd+Kd*Kd)),Zd=e,Kd=t}var Fw=Fy;var VM,ky,jM,YM,nu=class{constructor(t){this._append=t==null?qM:N7(t),this._radius=4.5,this._=""}pointRadius(t){return this._radius=+t,this}polygonStart(){this._line=0}polygonEnd(){this._line=NaN}lineStart(){this._point=0}lineEnd(){this._line===0&&(this._+="Z"),this._point=NaN}point(t,n){switch(this._point){case 0:{this._append`M${t},${n}`,this._point=1;break}case 1:{this._append`L${t},${n}`;break}default:{if(this._append`M${t},${n}`,this._radius!==jM||this._append!==ky){let r=this._radius,i=this._;this._="",this._append`m0,${r}a${r},${r} 0 1,1 0,${-2*r}a${r},${r} 0 1,1 0,${2*r}z`,jM=r,ky=this._append,YM=this._,this._=i}this._+=YM;break}}}result(){let t=this._;return this._="",t.length?t:null}};function qM(e){let t=1;this._+=e[0];for(let n=e.length;t<n;++t)this._+=arguments[t]+e[t]}function N7(e){let t=Math.floor(e);if(!(t>=0))throw new RangeError(`invalid digits: ${e}`);if(t>15)return qM;if(t!==VM){let n=10**t;VM=t,ky=function(i){let o=1;this._+=i[0];for(let s=i.length;o<s;++o)this._+=Math.round(arguments[o]*n)/n+i[o]}}return ky}function Mn(e,t){let n=3,r=4.5,i,o;function s(a){return a&&(typeof r=="function"&&o.pointRadius(+r.apply(this,arguments)),Cr(a,i(o))),o.result()}return s.area=function(a){return Cr(a,i(ww)),ww.result()},s.measure=function(a){return Cr(a,i(Fw)),Fw.result()},s.bounds=function(a){return Cr(a,i(tu)),tu.result()},s.centroid=function(a){return Cr(a,i(Ew)),Ew.result()},s.projection=function(a){return arguments.length?(i=a==null?(e=null,Wd):(e=a).stream,s):e},s.context=function(a){return arguments.length?(o=a==null?(t=null,new nu(n)):new Ay(t=a),typeof r!="function"&&o.pointRadius(r),s):t},s.pointRadius=function(a){return arguments.length?(r=typeof a=="function"?a:(o.pointRadius(+a),+a),s):r},s.digits=function(a){if(!arguments.length)return n;if(a==null)n=null;else{let l=Math.floor(a);if(!(l>=0))throw new RangeError(`invalid digits: ${a}`);n=l}return t===null&&(o=new nu(n)),s},s.projection(e).digits(n).context(t)}function bl(e){return{stream:ru(e)}}function ru(e){return function(t){var n=new kw;for(var r in e)n[r]=e[r];return n.stream=t,n}}function kw(){}kw.prototype={constructor:kw,point:function(e,t){this.stream.point(e,t)},sphere:function(){this.stream.sphere()},lineStart:function(){this.stream.lineStart()},lineEnd:function(){this.stream.lineEnd()},polygonStart:function(){this.stream.polygonStart()},polygonEnd:function(){this.stream.polygonEnd()}};function Nw(e,t,n){var r=e.clipExtent&&e.clipExtent();return e.scale(150).translate([0,0]),r!=null&&e.clipExtent(null),Cr(n,e.stream(tu)),t(tu.result()),r!=null&&e.clipExtent(r),e}function Qd(e,t,n){return Nw(e,function(r){var i=t[1][0]-t[0][0],o=t[1][1]-t[0][1],s=Math.min(i/(r[1][0]-r[0][0]),o/(r[1][1]-r[0][1])),a=+t[0][0]+(i-s*(r[1][0]+r[0][0]))/2,l=+t[0][1]+(o-s*(r[1][1]+r[0][1]))/2;e.scale(150*s).translate([a,l])},n)}function Ny(e,t,n){return Qd(e,[[0,0],t],n)}function Oy(e,t,n){return Nw(e,function(r){var i=+t,o=i/(r[1][0]-r[0][0]),s=(i-o*(r[1][0]+r[0][0]))/2,a=-o*r[0][1];e.scale(150*o).translate([s,a])},n)}function Cy(e,t,n){return Nw(e,function(r){var i=+t,o=i/(r[1][1]-r[0][1]),s=-o*r[0][0],a=(i-o*(r[1][1]+r[0][1]))/2;e.scale(150*o).translate([s,a])},n)}var WM=16,O7=H(30*Lt);function Ow(e,t){return+t?B7(e,t):C7(e)}function C7(e){return ru({point:function(t,n){t=e(t,n),this.stream.point(t[0],t[1])}})}function B7(e,t){function n(r,i,o,s,a,l,c,u,d,f,h,p,m,g){var b=c-r,y=u-i,x=b*b+y*y;if(x>4*t&&m--){var _=s+f,v=a+h,w=l+p,T=oe(_*_+v*v+w*w),M=me(w/=T),F=It(It(w)-1)<X||It(o-d)<X?(o+d)/2:Ye(v,_),S=e(F,M),I=S[0],k=S[1],O=I-r,N=k-i,A=y*O-b*N;(A*A/x>t||It((b*O+y*N)/x-.5)>.3||s*f+a*h+l*p<O7)&&(n(r,i,o,s,a,l,I,k,F,_/=T,v/=T,w,m,g),g.point(I,k),n(I,k,F,_,v,w,c,u,d,f,h,p,m,g))}}return function(r){var i,o,s,a,l,c,u,d,f,h,p,m,g={point:b,lineStart:y,lineEnd:_,polygonStart:function(){r.polygonStart(),g.lineStart=v},polygonEnd:function(){r.polygonEnd(),g.lineStart=y}};function b(M,F){M=e(M,F),r.point(M[0],M[1])}function y(){d=NaN,g.point=x,r.lineStart()}function x(M,F){var S=oo([M,F]),I=e(M,F);n(d,f,u,h,p,m,d=I[0],f=I[1],u=M,h=S[0],p=S[1],m=S[2],WM,r),r.point(d,f)}function _(){g.point=b,r.lineEnd()}function v(){y(),g.point=w,g.lineEnd=T}function w(M,F){x(i=M,F),o=d,s=f,a=h,l=p,c=m,g.point=x}function T(){n(d,f,u,h,p,m,o,s,i,a,l,c,WM,r),g.lineEnd=_,_()}return g}}var D7=ru({point:function(e,t){this.stream.point(e*Lt,t*Lt)}});function L7(e){return ru({point:function(t,n){var r=e(t,n);return this.stream.point(r[0],r[1])}})}function R7(e,t,n,r,i){function o(s,a){return s*=r,a*=i,[t+e*s,n-e*a]}return o.invert=function(s,a){return[(s-t)/e*r,(n-a)/e*i]},o}function GM(e,t,n,r,i,o){if(!o)return R7(e,t,n,r,i);var s=H(o),a=W(o),l=s*e,c=a*e,u=s/e,d=a/e,f=(a*n-s*t)/e,h=(a*t+s*n)/e;function p(m,g){return m*=r,g*=i,[l*m-c*g+t,n-c*m-l*g]}return p.invert=function(m,g){return[r*(u*m-d*g+f),i*(h-d*m-u*g)]},p}function An(e){return Cw(function(){return e})()}function Cw(e){var t,n=150,r=480,i=250,o=0,s=0,a=0,l=0,c=0,u,d=0,f=1,h=1,p=null,m=pw,g=null,b,y,x,_=Wd,v=.5,w,T,M,F,S;function I(A){return M(A[0]*Lt,A[1]*Lt)}function k(A){return A=M.invert(A[0],A[1]),A&&[A[0]*Me,A[1]*Me]}I.stream=function(A){return F&&S===A?F:F=D7(L7(u)(m(w(_(S=A)))))},I.preclip=function(A){return arguments.length?(m=A,p=void 0,N()):m},I.postclip=function(A){return arguments.length?(_=A,g=b=y=x=null,N()):_},I.clipAngle=function(A){return arguments.length?(m=+A?MM(p=A*Lt):(p=null,pw),N()):p*Me},I.clipExtent=function(A){return arguments.length?(_=A==null?(g=b=y=x=null,Wd):Qc(g=+A[0][0],b=+A[0][1],y=+A[1][0],x=+A[1][1]),N()):g==null?null:[[g,b],[y,x]]},I.scale=function(A){return arguments.length?(n=+A,O()):n},I.translate=function(A){return arguments.length?(r=+A[0],i=+A[1],O()):[r,i]},I.center=function(A){return arguments.length?(o=A[0]%360*Lt,s=A[1]%360*Lt,O()):[o*Me,s*Me]},I.rotate=function(A){return arguments.length?(a=A[0]%360*Lt,l=A[1]%360*Lt,c=A.length>2?A[2]%360*Lt:0,O()):[a*Me,l*Me,c*Me]},I.angle=function(A){return arguments.length?(d=A%360*Lt,O()):d*Me},I.reflectX=function(A){return arguments.length?(f=A?-1:1,O()):f<0},I.reflectY=function(A){return arguments.length?(h=A?-1:1,O()):h<0},I.precision=function(A){return arguments.length?(w=Ow(T,v=A*A),N()):oe(v)},I.fitExtent=function(A,C){return Qd(I,A,C)},I.fitSize=function(A,C){return Ny(I,A,C)},I.fitWidth=function(A,C){return Oy(I,A,C)},I.fitHeight=function(A,C){return Cy(I,A,C)};function O(){var A=GM(n,0,0,f,h,d).apply(null,t(o,s)),C=GM(n,r-A[0],i-A[1],f,h,d);return u=dw(a,l,c),T=Yd(t,C),M=Yd(u,T),w=Ow(T,v),N()}function N(){return F=S=null,I}return function(){return t=e.apply(this,arguments),I.invert=t.invert&&k,O()}}function iu(e){var t=0,n=dt/3,r=Cw(e),i=r(t,n);return i.parallels=function(o){return arguments.length?r(t=o[0]*Lt,n=o[1]*Lt):[t*Me,n*Me]},i}function HM(e){var t=H(e);function n(r,i){return[r*t,W(i)/t]}return n.invert=function(r,i){return[r/t,me(i*t)]},n}function XM(e,t){var n=W(e),r=(n+W(t))/2;if(It(r)<X)return HM(e);var i=1+n*(2*r-n),o=oe(i)/r;function s(a,l){var c=oe(i-2*r*W(l))/r;return[c*W(a*=r),o-c*H(a)]}return s.invert=function(a,l){var c=o-l,u=Ye(a,It(c))*$n(c);return c*r<0&&(u-=dt*$n(a)*$n(c)),[u/r,me((i-(a*a+c*c)*r*r)/(2*r))]},s}function na(){return iu(XM).scale(155.424).center([0,33.6442])}function Jd(){return na().parallels([29.5,45.5]).scale(1070).translate([480,250]).rotate([96,0]).center([-.6,38.7])}function P7(e){var t=e.length;return{point:function(n,r){for(var i=-1;++i<t;)e[i].point(n,r)},sphere:function(){for(var n=-1;++n<t;)e[n].sphere()},lineStart:function(){for(var n=-1;++n<t;)e[n].lineStart()},lineEnd:function(){for(var n=-1;++n<t;)e[n].lineEnd()},polygonStart:function(){for(var n=-1;++n<t;)e[n].polygonStart()},polygonEnd:function(){for(var n=-1;++n<t;)e[n].polygonEnd()}}}function Bw(){var e,t,n=Jd(),r,i=na().rotate([154,0]).center([-2,58.5]).parallels([55,65]),o,s=na().rotate([157,0]).center([-3,19.9]).parallels([8,18]),a,l,c={point:function(f,h){l=[f,h]}};function u(f){var h=f[0],p=f[1];return l=null,r.point(h,p),l||(o.point(h,p),l)||(a.point(h,p),l)}u.invert=function(f){var h=n.scale(),p=n.translate(),m=(f[0]-p[0])/h,g=(f[1]-p[1])/h;return(g>=.12&&g<.234&&m>=-.425&&m<-.214?i:g>=.166&&g<.234&&m>=-.214&&m<-.115?s:n).invert(f)},u.stream=function(f){return e&&t===f?e:e=P7([n.stream(t=f),i.stream(f),s.stream(f)])},u.precision=function(f){return arguments.length?(n.precision(f),i.precision(f),s.precision(f),d()):n.precision()},u.scale=function(f){return arguments.length?(n.scale(f),i.scale(f*.35),s.scale(f),u.translate(n.translate())):n.scale()},u.translate=function(f){if(!arguments.length)return n.translate();var h=n.scale(),p=+f[0],m=+f[1];return r=n.translate(f).clipExtent([[p-.455*h,m-.238*h],[p+.455*h,m+.238*h]]).stream(c),o=i.translate([p-.307*h,m+.201*h]).clipExtent([[p-.425*h+X,m+.12*h+X],[p-.214*h-X,m+.234*h-X]]).stream(c),a=s.translate([p-.205*h,m+.212*h]).clipExtent([[p-.214*h+X,m+.166*h+X],[p-.115*h-X,m+.234*h-X]]).stream(c),d()},u.fitExtent=function(f,h){return Qd(u,f,h)},u.fitSize=function(f,h){return Ny(u,f,h)},u.fitWidth=function(f,h){return Oy(u,f,h)},u.fitHeight=function(f,h){return Cy(u,f,h)};function d(){return e=t=null,u}return u.scale(1070)}function By(e){return function(t,n){var r=H(t),i=H(n),o=e(r*i);return o===1/0?[2,0]:[o*i*W(t),o*W(n)]}}function lo(e){return function(t,n){var r=oe(t*t+n*n),i=e(r),o=W(i),s=H(i);return[Ye(t*o,r*s),me(r&&n*o/r)]}}var Dw=By(function(e){return oe(2/(1+e))});Dw.invert=lo(function(e){return 2*me(e/2)});function Lw(){return An(Dw).scale(124.75).clipAngle(180-.001)}var Rw=By(function(e){return(e=cy(e))&&e/W(e)});Rw.invert=lo(function(e){return e});function Pw(){return An(Rw).scale(79.4188).clipAngle(180-.001)}function ou(e,t){return[e,yl(Xc((ie+t)/2))]}ou.invert=function(e,t){return[e,2*Jr(sy(t))-ie]};function Uw(){return $w(ou).scale(961/cn)}function $w(e){var t=An(e),n=t.center,r=t.scale,i=t.translate,o=t.clipExtent,s=null,a,l,c;t.scale=function(d){return arguments.length?(r(d),u()):r()},t.translate=function(d){return arguments.length?(i(d),u()):i()},t.center=function(d){return arguments.length?(n(d),u()):n()},t.clipExtent=function(d){return arguments.length?(d==null?s=a=l=c=null:(s=+d[0][0],a=+d[0][1],l=+d[1][0],c=+d[1][1]),u()):s==null?null:[[s,a],[l,c]]};function u(){var d=dt*r(),f=t(vM(t.rotate()).invert([0,0]));return o(s==null?[[f[0]-d,f[1]-d],[f[0]+d,f[1]+d]]:e===ou?[[Math.max(f[0]-d,s),a],[Math.min(f[0]+d,l),c]]:[[s,Math.max(f[1]-d,a)],[l,Math.min(f[1]+d,c)]])}return u()}function Dy(e){return Xc((ie+e)/2)}function ZM(e,t){var n=H(e),r=e===t?W(e):yl(n/H(t))/yl(Dy(t)/Dy(e)),i=n*ly(Dy(e),r)/r;if(!r)return ou;function o(s,a){i>0?a<-ie+X&&(a=-ie+X):a>ie-X&&(a=ie-X);var l=i/ly(Dy(a),r);return[l*W(r*s),i-l*H(r*s)]}return o.invert=function(s,a){var l=i-a,c=$n(r)*oe(s*s+l*l),u=Ye(s,It(l))*$n(l);return l*r<0&&(u-=dt*$n(s)*$n(l)),[u/r,2*Jr(ly(i/c,1/r))-ie]},o}function zw(){return iu(ZM).scale(109.5).parallels([30,30])}function su(e,t){return[e,t]}su.invert=su;function Vw(){return An(su).scale(152.63)}function KM(e,t){var n=H(e),r=e===t?W(e):(n-H(t))/(t-e),i=n/r+e;if(It(r)<X)return su;function o(s,a){var l=i-a,c=r*s;return[l*W(c),i-l*H(c)]}return o.invert=function(s,a){var l=i-a,c=Ye(s,It(l))*$n(l);return l*r<0&&(c-=dt*$n(s)*$n(l)),[c/r,i-$n(r)*oe(s*s+l*l)]},o}function jw(){return iu(KM).scale(131.154).center([0,13.9389])}var th=1.340264,eh=-.081106,nh=893e-6,rh=.003796,Ly=oe(3)/2,U7=12;function Yw(e,t){var n=me(Ly*W(t)),r=n*n,i=r*r*r;return[e*H(n)/(Ly*(th+3*eh*r+i*(7*nh+9*rh*r))),n*(th+eh*r+i*(nh+rh*r))]}Yw.invert=function(e,t){for(var n=t,r=n*n,i=r*r*r,o=0,s,a,l;o<U7&&(a=n*(th+eh*r+i*(nh+rh*r))-t,l=th+3*eh*r+i*(7*nh+9*rh*r),n-=s=a/l,r=n*n,i=r*r*r,!(It(s)<ml));++o);return[Ly*e*(th+3*eh*r+i*(7*nh+9*rh*r))/H(n),me(W(n)/Ly)]};function qw(){return An(Yw).scale(177.158)}function Ww(e,t){var n=H(t),r=H(e)*n;return[n*W(e)/r,W(t)/r]}Ww.invert=lo(Jr);function Gw(){return An(Ww).scale(144.049).clipAngle(60)}function Hw(e,t){return[H(t)*W(e),W(t)]}Hw.invert=lo(me);function Xw(){return An(Hw).scale(249.5).clipAngle(90+X)}function Zw(e,t){var n=H(t),r=1+H(e)*n;return[n*W(e)/r,W(t)/r]}Zw.invert=lo(function(e){return 2*Jr(e)});function Kw(){return An(Zw).scale(250).clipAngle(142)}function Qw(e,t){return[yl(Xc((ie+t)/2)),-e]}Qw.invert=function(e,t){return[-t,2*Jr(sy(e))-ie]};function Jw(){var e=$w(Qw),t=e.center,n=e.rotate;return e.center=function(r){return arguments.length?t([-r[1],r[0]]):(r=t(),[r[1],-r[0]])},e.rotate=function(r){return arguments.length?n([r[0],r[1],r.length>2?r[2]+90:90]):(r=n(),[r[0],r[1],r[2]-90])},n([0,0,90]).scale(159.155)}function $7(e,t){return e.parent===t.parent?1:2}function z7(e){return e.reduce(V7,0)/e.length}function V7(e,t){return e+t.x}function j7(e){return 1+e.reduce(Y7,0)}function Y7(e,t){return Math.max(e,t.y)}function q7(e){for(var t;t=e.children;)e=t[0];return e}function W7(e){for(var t;t=e.children;)e=t[t.length-1];return e}function Ry(){var e=$7,t=1,n=1,r=!1;function i(o){var s,a=0;o.eachAfter(function(f){var h=f.children;h?(f.x=z7(h),f.y=j7(h)):(f.x=s?a+=e(f,s):0,f.y=0,s=f)});var l=q7(o),c=W7(o),u=l.x-e(l,c)/2,d=c.x+e(c,l)/2;return o.eachAfter(r?function(f){f.x=(f.x-o.x)*t,f.y=(o.y-f.y)*n}:function(f){f.x=(f.x-u)/(d-u)*t,f.y=(1-(o.y?f.y/o.y:1))*n})}return i.separation=function(o){return arguments.length?(e=o,i):e},i.size=function(o){return arguments.length?(r=!1,t=+o[0],n=+o[1],i):r?null:[t,n]},i.nodeSize=function(o){return arguments.length?(r=!0,t=+o[0],n=+o[1],i):r?[t,n]:null},i}function G7(e){var t=0,n=e.children,r=n&&n.length;if(!r)t=1;else for(;--r>=0;)t+=n[r].value;e.value=t}function QM(){return this.eachAfter(G7)}function JM(e,t){let n=-1;for(let r of this)e.call(t,r,++n,this);return this}function tA(e,t){for(var n=this,r=[n],i,o,s=-1;n=r.pop();)if(e.call(t,n,++s,this),i=n.children)for(o=i.length-1;o>=0;--o)r.push(i[o]);return this}function eA(e,t){for(var n=this,r=[n],i=[],o,s,a,l=-1;n=r.pop();)if(i.push(n),o=n.children)for(s=0,a=o.length;s<a;++s)r.push(o[s]);for(;n=i.pop();)e.call(t,n,++l,this);return this}function nA(e,t){let n=-1;for(let r of this)if(e.call(t,r,++n,this))return r}function rA(e){return this.eachAfter(function(t){for(var n=+e(t.data)||0,r=t.children,i=r&&r.length;--i>=0;)n+=r[i].value;t.value=n})}function iA(e){return this.eachBefore(function(t){t.children&&t.children.sort(e)})}function oA(e){for(var t=this,n=H7(t,e),r=[t];t!==n;)t=t.parent,r.push(t);for(var i=r.length;e!==n;)r.splice(i,0,e),e=e.parent;return r}function H7(e,t){if(e===t)return e;var n=e.ancestors(),r=t.ancestors(),i=null;for(e=n.pop(),t=r.pop();e===t;)i=e,e=n.pop(),t=r.pop();return i}function sA(){for(var e=this,t=[e];e=e.parent;)t.push(e);return t}function aA(){return Array.from(this)}function lA(){var e=[];return this.eachBefore(function(t){t.children||e.push(t)}),e}function cA(){var e=this,t=[];return e.each(function(n){n!==e&&t.push({source:n.parent,target:n})}),t}function*uA(){var e=this,t,n=[e],r,i,o;do for(t=n.reverse(),n=[];e=t.pop();)if(yield e,r=e.children)for(i=0,o=r.length;i<o;++i)n.push(r[i]);while(n.length)}function tv(e,t){e instanceof Map?(e=[void 0,e],t===void 0&&(t=K7)):t===void 0&&(t=Z7);for(var n=new ra(e),r,i=[n],o,s,a,l;r=i.pop();)if((s=t(r.data))&&(l=(s=Array.from(s)).length))for(r.children=s,a=l-1;a>=0;--a)i.push(o=s[a]=new ra(s[a])),o.parent=r,o.depth=r.depth+1;return n.eachBefore(ev)}function X7(){return tv(this).eachBefore(Q7)}function Z7(e){return e.children}function K7(e){return Array.isArray(e)?e[1]:null}function Q7(e){e.data.value!==void 0&&(e.value=e.data.value),e.data=e.data.data}function ev(e){var t=0;do e.height=t;while((e=e.parent)&&e.height<++t)}function ra(e){this.data=e,this.depth=this.height=0,this.parent=null}ra.prototype=tv.prototype={constructor:ra,count:QM,each:JM,eachAfter:eA,eachBefore:tA,find:nA,sum:rA,sort:iA,path:oA,ancestors:sA,descendants:aA,leaves:lA,links:cA,copy:X7,[Symbol.iterator]:uA};function Py(e){return e==null?null:J7(e)}function J7(e){if(typeof e!="function")throw new Error;return e}var t9={depth:-1},fA={},nv={};function e9(e){return e.id}function n9(e){return e.parentId}function Uy(){var e=e9,t=n9,n;function r(i){var o=Array.from(i),s=e,a=t,l,c,u,d,f,h,p,m,g=new Map;if(n!=null){let b=o.map((_,v)=>r9(n(_,v,i))),y=b.map(dA),x=new Set(b).add("");for(let _ of y)x.has(_)||(x.add(_),b.push(_),y.push(dA(_)),o.push(nv));s=(_,v)=>b[v],a=(_,v)=>y[v]}for(u=0,l=o.length;u<l;++u)c=o[u],h=o[u]=new ra(c),(p=s(c,u,i))!=null&&(p+="")&&(m=h.id=p,g.set(m,g.has(m)?fA:h)),(p=a(c,u,i))!=null&&(p+="")&&(h.parent=p);for(u=0;u<l;++u)if(h=o[u],p=h.parent){if(f=g.get(p),!f)throw new Error("missing: "+p);if(f===fA)throw new Error("ambiguous: "+p);f.children?f.children.push(h):f.children=[h],h.parent=f}else{if(d)throw new Error("multiple roots");d=h}if(!d)throw new Error("no root");if(n!=null){for(;d.data===nv&&d.children.length===1;)d=d.children[0],--l;for(let b=o.length-1;b>=0&&(h=o[b],h.data===nv);--b)h.data=null}if(d.parent=t9,d.eachBefore(function(b){b.depth=b.parent.depth+1,--l}).eachBefore(ev),d.parent=null,l>0)throw new Error("cycle");return d}return r.id=function(i){return arguments.length?(e=Py(i),r):e},r.parentId=function(i){return arguments.length?(t=Py(i),r):t},r.path=function(i){return arguments.length?(n=Py(i),r):n},r}function r9(e){e=`${e}`;let t=e.length;return rv(e,t-1)&&!rv(e,t-2)&&(e=e.slice(0,-1)),e[0]==="/"?e:`/${e}`}function dA(e){let t=e.length;if(t<2)return"";for(;--t>1&&!rv(e,t););return e.slice(0,t)}function rv(e,t){if(e[t]==="/"){let n=0;for(;t>0&&e[--t]==="\\";)++n;if((n&1)===0)return!0}return!1}function i9(e,t){return e.parent===t.parent?1:2}function iv(e){var t=e.children;return t?t[0]:e.t}function ov(e){var t=e.children;return t?t[t.length-1]:e.t}function o9(e,t,n){var r=n/(t.i-e.i);t.c-=r,t.s+=n,e.c+=r,t.z+=n,t.m+=n}function s9(e){for(var t=0,n=0,r=e.children,i=r.length,o;--i>=0;)o=r[i],o.z+=t,o.m+=t,t+=o.s+(n+=o.c)}function a9(e,t,n){return e.a.parent===t.parent?e.a:n}function $y(e,t){this._=e,this.parent=null,this.children=null,this.A=null,this.a=this,this.z=0,this.m=0,this.c=0,this.s=0,this.t=null,this.i=t}$y.prototype=Object.create(ra.prototype);function l9(e){for(var t=new $y(e,0),n,r=[t],i,o,s,a;n=r.pop();)if(o=n._.children)for(n.children=new Array(a=o.length),s=a-1;s>=0;--s)r.push(i=n.children[s]=new $y(o[s],s)),i.parent=n;return(t.parent=new $y(null,0)).children=[t],t}function _l(){var e=i9,t=1,n=1,r=null;function i(c){var u=l9(c);if(u.eachAfter(o),u.parent.m=-u.z,u.eachBefore(s),r)c.eachBefore(l);else{var d=c,f=c,h=c;c.eachBefore(function(y){y.x<d.x&&(d=y),y.x>f.x&&(f=y),y.depth>h.depth&&(h=y)});var p=d===f?1:e(d,f)/2,m=p-d.x,g=t/(f.x+p+m),b=n/(h.depth||1);c.eachBefore(function(y){y.x=(y.x+m)*g,y.y=y.depth*b})}return c}function o(c){var u=c.children,d=c.parent.children,f=c.i?d[c.i-1]:null;if(u){s9(c);var h=(u[0].z+u[u.length-1].z)/2;f?(c.z=f.z+e(c._,f._),c.m=c.z-h):c.z=h}else f&&(c.z=f.z+e(c._,f._));c.parent.A=a(c,f,c.parent.A||d[0])}function s(c){c._.x=c.z+c.parent.m,c.m+=c.parent.m}function a(c,u,d){if(u){for(var f=c,h=c,p=u,m=f.parent.children[0],g=f.m,b=h.m,y=p.m,x=m.m,_;p=ov(p),f=iv(f),p&&f;)m=iv(m),h=ov(h),h.a=c,_=p.z+y-f.z-g+e(p._,f._),_>0&&(o9(a9(p,c,d),c,_),g+=_,b+=_),y+=p.m,g+=f.m,x+=m.m,b+=h.m;p&&!ov(h)&&(h.t=p,h.m+=y-b),f&&!iv(m)&&(m.t=f,m.m+=g-x,d=c)}return d}function l(c){c.x*=t,c.y=c.depth*n}return i.separation=function(c){return arguments.length?(e=c,i):e},i.size=function(c){return arguments.length?(r=!1,t=+c[0],n=+c[1],i):r?null:[t,n]},i.nodeSize=function(c){return arguments.length?(r=!0,t=+c[0],n=+c[1],i):r?[t,n]:null},i}function sv(e){for(var t=-1,n=e.length,r,i=e[n-1],o=0;++t<n;)r=i,i=e[t],o+=r[1]*i[0]-r[0]*i[1];return o/2}function av(e){for(var t=-1,n=e.length,r=0,i=0,o,s=e[n-1],a,l=0;++t<n;)o=s,s=e[t],l+=a=o[0]*s[1]-s[0]*o[1],r+=(o[0]+s[0])*a,i+=(o[1]+s[1])*a;return l*=3,[r/l,i/l]}var hA=23283064365386963e-26;function xl(e=Math.random()){let t=(0<=e&&e<1?e/hA:Math.abs(e))|0;return()=>(t=1664525*t+1013904223|0,hA*(t>>>0))}function We(e,t){switch(arguments.length){case 0:break;case 1:this.range(e);break;default:this.range(t).domain(e);break}return this}function ih(e,t){switch(arguments.length){case 0:break;case 1:{typeof e=="function"?this.interpolator(e):this.range(e);break}default:{this.domain(e),typeof t=="function"?this.interpolator(t):this.range(t);break}}return this}var oh=Symbol("implicit");function wl(){var e=new Zn,t=[],n=[],r=oh;function i(o){let s=e.get(o);if(s===void 0){if(r!==oh)return r;e.set(o,s=t.push(o)-1)}return n[s%n.length]}return i.domain=function(o){if(!arguments.length)return t.slice();t=[],e=new Zn;for(let s of o)e.has(s)||e.set(s,t.push(s)-1);return i},i.range=function(o){return arguments.length?(n=Array.from(o),i):n.slice()},i.unknown=function(o){return arguments.length?(r=o,i):r},i.copy=function(){return wl(t,n).unknown(r)},We.apply(i,arguments),i}function ia(){var e=wl().unknown(void 0),t=e.domain,n=e.range,r=0,i=1,o,s,a=!1,l=0,c=0,u=.5;delete e.unknown;function d(){var f=t().length,h=i<r,p=h?i:r,m=h?r:i;o=(m-p)/Math.max(1,f-l+c*2),a&&(o=Math.floor(o)),p+=(m-p-o*(f-l))*u,s=o*(1-l),a&&(p=Math.round(p),s=Math.round(s));var g=Ke(f).map(function(b){return p+o*b});return n(h?g.reverse():g)}return e.domain=function(f){return arguments.length?(t(f),d()):t()},e.range=function(f){return arguments.length?([r,i]=f,r=+r,i=+i,d()):[r,i]},e.rangeRound=function(f){return[r,i]=f,r=+r,i=+i,a=!0,d()},e.bandwidth=function(){return s},e.step=function(){return o},e.round=function(f){return arguments.length?(a=!!f,d()):a},e.padding=function(f){return arguments.length?(l=Math.min(1,c=+f),d()):l},e.paddingInner=function(f){return arguments.length?(l=Math.min(1,f),d()):l},e.paddingOuter=function(f){return arguments.length?(c=+f,d()):c},e.align=function(f){return arguments.length?(u=Math.max(0,Math.min(1,f)),d()):u},e.copy=function(){return ia(t(),[r,i]).round(a).paddingInner(l).paddingOuter(c).align(u)},We.apply(d(),arguments)}function pA(e){var t=e.copy;return e.padding=e.paddingOuter,delete e.paddingInner,delete e.paddingOuter,e.copy=function(){return pA(t())},e}function lv(){return pA(ia.apply(null,arguments).paddingInner(1))}function cv(e){return function(){return e}}function au(e){return+e}var mA=[0,1];function Er(e){return e}function uv(e,t){return(t-=e=+e)?function(n){return(n-e)/t}:cv(isNaN(t)?NaN:.5)}function c9(e,t){var n;return e>t&&(n=e,e=t,t=n),function(r){return Math.max(e,Math.min(t,r))}}function u9(e,t,n){var r=e[0],i=e[1],o=t[0],s=t[1];return i<r?(r=uv(i,r),o=n(s,o)):(r=uv(r,i),o=n(o,s)),function(a){return o(r(a))}}function f9(e,t,n){var r=Math.min(e.length,t.length)-1,i=new Array(r),o=new Array(r),s=-1;for(e[r]<e[0]&&(e=e.slice().reverse(),t=t.slice().reverse());++s<r;)i[s]=uv(e[s],e[s+1]),o[s]=n(t[s],t[s+1]);return function(a){var l=Ho(e,a,1,r)-1;return o[l](i[l](a))}}function co(e,t){return t.domain(e.domain()).range(e.range()).interpolate(e.interpolate()).clamp(e.clamp()).unknown(e.unknown())}function vl(){var e=mA,t=mA,n=Mi,r,i,o,s=Er,a,l,c;function u(){var f=Math.min(e.length,t.length);return s!==Er&&(s=c9(e[0],e[f-1])),a=f>2?f9:u9,l=c=null,d}function d(f){return f==null||isNaN(f=+f)?o:(l||(l=a(e.map(r),t,n)))(r(s(f)))}return d.invert=function(f){return s(i((c||(c=a(t,e.map(r),pe)))(f)))},d.domain=function(f){return arguments.length?(e=Array.from(f,au),u()):e.slice()},d.range=function(f){return arguments.length?(t=Array.from(f),u()):t.slice()},d.rangeRound=function(f){return t=Array.from(f),n=cl,u()},d.clamp=function(f){return arguments.length?(s=f?!0:Er,u()):s!==Er},d.interpolate=function(f){return arguments.length?(n=f,u()):n},d.unknown=function(f){return arguments.length?(o=f,d):o},function(f,h){return r=f,i=h,u()}}function sh(){return vl()(Er,Er)}function fv(e,t,n,r){var i=Oc(e,t,n),o;switch(r=io(r??",f"),r.type){case"s":{var s=Math.max(Math.abs(e),Math.abs(t));return r.precision==null&&!isNaN(o=nw(i,s))&&(r.precision=o),oy(r,s)}case"":case"e":case"g":case"p":case"r":{r.precision==null&&!isNaN(o=rw(i,Math.max(Math.abs(e),Math.abs(t))))&&(r.precision=o-(r.type==="e"));break}case"f":case"%":{r.precision==null&&!isNaN(o=ew(i))&&(r.precision=o-(r.type==="%")*2);break}}return Qr(r)}function rs(e){var t=e.domain;return e.ticks=function(n){var r=t();return Tn(r[0],r[r.length-1],n??10)},e.tickFormat=function(n,r){var i=t();return fv(i[0],i[i.length-1],n??10,r)},e.nice=function(n){n==null&&(n=10);var r=t(),i=0,o=r.length-1,s=r[i],a=r[o],l,c,u=10;for(a<s&&(c=s,s=a,a=c,c=i,i=o,o=c);u-- >0;){if(c=Xo(s,a,n),c===l)return r[i]=s,r[o]=a,t(r);if(c>0)s=Math.floor(s/c)*c,a=Math.ceil(a/c)*c;else if(c<0)s=Math.ceil(s*c)/c,a=Math.floor(a*c)/c;else break;l=c}return e},e}function Sl(){var e=sh();return e.copy=function(){return co(e,Sl())},We.apply(e,arguments),rs(e)}function ah(e){var t;function n(r){return r==null||isNaN(r=+r)?t:r}return n.invert=n,n.domain=n.range=function(r){return arguments.length?(e=Array.from(r,au),n):e.slice()},n.unknown=function(r){return arguments.length?(t=r,n):t},n.copy=function(){return ah(e).unknown(t)},e=arguments.length?Array.from(e,au):[0,1],rs(n)}function lh(e,t){e=e.slice();var n=0,r=e.length-1,i=e[n],o=e[r],s;return o<i&&(s=n,n=r,r=s,s=i,i=o,o=s),e[n]=t.floor(i),e[r]=t.ceil(o),e}function yA(e){return Math.log(e)}function gA(e){return Math.exp(e)}function d9(e){return-Math.log(-e)}function h9(e){return-Math.exp(-e)}function p9(e){return isFinite(e)?+("1e"+e):e<0?0:e}function m9(e){return e===10?p9:e===Math.E?Math.exp:t=>Math.pow(e,t)}function y9(e){return e===Math.E?Math.log:e===10&&Math.log10||e===2&&Math.log2||(e=Math.log(e),t=>Math.log(t)/e)}function bA(e){return(t,n)=>-e(-t,n)}function dv(e){let t=e(yA,gA),n=t.domain,r=10,i,o;function s(){return i=y9(r),o=m9(r),n()[0]<0?(i=bA(i),o=bA(o),e(d9,h9)):e(yA,gA),t}return t.base=function(a){return arguments.length?(r=+a,s()):r},t.domain=function(a){return arguments.length?(n(a),s()):n()},t.ticks=a=>{let l=n(),c=l[0],u=l[l.length-1],d=u<c;d&&([c,u]=[u,c]);let f=i(c),h=i(u),p,m,g=a==null?10:+a,b=[];if(!(r%1)&&h-f<g){if(f=Math.floor(f),h=Math.ceil(h),c>0){for(;f<=h;++f)for(p=1;p<r;++p)if(m=f<0?p/o(-f):p*o(f),!(m<c)){if(m>u)break;b.push(m)}}else for(;f<=h;++f)for(p=r-1;p>=1;--p)if(m=f>0?p/o(-f):p*o(f),!(m<c)){if(m>u)break;b.push(m)}b.length*2<g&&(b=Tn(c,u,g))}else b=Tn(f,h,Math.min(h-f,g)).map(o);return d?b.reverse():b},t.tickFormat=(a,l)=>{if(a==null&&(a=10),l==null&&(l=r===10?"s":","),typeof l!="function"&&(!(r%1)&&(l=io(l)).precision==null&&(l.trim=!0),l=Qr(l)),a===1/0)return l;let c=Math.max(1,r*a/t.ticks().length);return u=>{let d=u/o(Math.round(i(u)));return d*r<r-.5&&(d*=r),d<=c?l(u):""}},t.nice=()=>n(lh(n(),{floor:a=>o(Math.floor(i(a))),ceil:a=>o(Math.ceil(i(a)))})),t}function ch(){let e=dv(vl()).domain([1,10]);return e.copy=()=>co(e,ch()).base(e.base()),We.apply(e,arguments),e}function _A(e){return function(t){return Math.sign(t)*Math.log1p(Math.abs(t/e))}}function xA(e){return function(t){return Math.sign(t)*Math.expm1(Math.abs(t))*e}}function hv(e){var t=1,n=e(_A(t),xA(t));return n.constant=function(r){return arguments.length?e(_A(t=+r),xA(t)):t},rs(n)}function uh(){var e=hv(vl());return e.copy=function(){return co(e,uh()).constant(e.constant())},We.apply(e,arguments)}function wA(e){return function(t){return t<0?-Math.pow(-t,e):Math.pow(t,e)}}function g9(e){return e<0?-Math.sqrt(-e):Math.sqrt(e)}function b9(e){return e<0?-e*e:e*e}function pv(e){var t=e(Er,Er),n=1;function r(){return n===1?e(Er,Er):n===.5?e(g9,b9):e(wA(n),wA(1/n))}return t.exponent=function(i){return arguments.length?(n=+i,r()):n},rs(t)}function fh(){var e=pv(vl());return e.copy=function(){return co(e,fh()).exponent(e.exponent())},We.apply(e,arguments),e}function dh(){var e=[],t=[],n=[],r;function i(){var s=0,a=Math.max(1,t.length);for(n=new Array(a-1);++s<a;)n[s-1]=yx(e,s/a);return o}function o(s){return s==null||isNaN(s=+s)?r:t[Ho(n,s)]}return o.invertExtent=function(s){var a=t.indexOf(s);return a<0?[NaN,NaN]:[a>0?n[a-1]:e[0],a<n.length?n[a]:e[e.length-1]]},o.domain=function(s){if(!arguments.length)return e.slice();e=[];for(let a of s)a!=null&&!isNaN(a=+a)&&e.push(a);return e.sort(Ut),i()},o.range=function(s){return arguments.length?(t=Array.from(s),i()):t.slice()},o.unknown=function(s){return arguments.length?(r=s,o):r},o.quantiles=function(){return n.slice()},o.copy=function(){return dh().domain(e).range(t).unknown(r)},We.apply(o,arguments)}function hh(){var e=[.5],t=[0,1],n,r=1;function i(o){return o!=null&&o<=o?t[Ho(e,o,0,r)]:n}return i.domain=function(o){return arguments.length?(e=Array.from(o),r=Math.min(e.length,t.length-1),i):e.slice()},i.range=function(o){return arguments.length?(t=Array.from(o),r=Math.min(e.length,t.length-1),i):t.slice()},i.invertExtent=function(o){var s=t.indexOf(o);return[e[s-1],e[s]]},i.unknown=function(o){return arguments.length?(n=o,i):n},i.copy=function(){return hh().domain(e).range(t).unknown(n)},We.apply(i,arguments)}var mv=new Date,yv=new Date;function ae(e,t,n,r){function i(o){return e(o=arguments.length===0?new Date:new Date(+o)),o}return i.floor=o=>(e(o=new Date(+o)),o),i.ceil=o=>(e(o=new Date(o-1)),t(o,1),e(o),o),i.round=o=>{let s=i(o),a=i.ceil(o);return o-s<a-o?s:a},i.offset=(o,s)=>(t(o=new Date(+o),s==null?1:Math.floor(s)),o),i.range=(o,s,a)=>{let l=[];if(o=i.ceil(o),a=a==null?1:Math.floor(a),!(o<s)||!(a>0))return l;let c;do l.push(c=new Date(+o)),t(o,a),e(o);while(c<o&&o<s);return l},i.filter=o=>ae(s=>{if(s>=s)for(;e(s),!o(s);)s.setTime(s-1)},(s,a)=>{if(s>=s)if(a<0)for(;++a<=0;)for(;t(s,-1),!o(s););else for(;--a>=0;)for(;t(s,1),!o(s););}),n&&(i.count=(o,s)=>(mv.setTime(+o),yv.setTime(+s),e(mv),e(yv),Math.floor(n(mv,yv))),i.every=o=>(o=Math.floor(o),!isFinite(o)||!(o>0)?null:o>1?i.filter(r?s=>r(s)%o===0:s=>i.count(0,s)%o===0):i)),i}var ph=ae(()=>{},(e,t)=>{e.setTime(+e+t)},(e,t)=>t-e);ph.every=e=>(e=Math.floor(e),!isFinite(e)||!(e>0)?null:e>1?ae(t=>{t.setTime(Math.floor(t/e)*e)},(t,n)=>{t.setTime(+t+n*e)},(t,n)=>(n-t)/e):ph);var uyt=ph.range;var Fn=ae(e=>{e.setTime(e-e.getMilliseconds())},(e,t)=>{e.setTime(+e+t*1e3)},(e,t)=>(t-e)/1e3,e=>e.getUTCSeconds()),vA=Fn.range;var oa=ae(e=>{e.setTime(e-e.getMilliseconds()-e.getSeconds()*1e3)},(e,t)=>{e.setTime(+e+t*6e4)},(e,t)=>(t-e)/6e4,e=>e.getMinutes()),_9=oa.range,is=ae(e=>{e.setUTCSeconds(0,0)},(e,t)=>{e.setTime(+e+t*6e4)},(e,t)=>(t-e)/6e4,e=>e.getUTCMinutes()),x9=is.range;var sa=ae(e=>{e.setTime(e-e.getMilliseconds()-e.getSeconds()*1e3-e.getMinutes()*6e4)},(e,t)=>{e.setTime(+e+t*36e5)},(e,t)=>(t-e)/36e5,e=>e.getHours()),w9=sa.range,os=ae(e=>{e.setUTCMinutes(0,0,0)},(e,t)=>{e.setTime(+e+t*36e5)},(e,t)=>(t-e)/36e5,e=>e.getUTCHours()),v9=os.range;var ti=ae(e=>e.setHours(0,0,0,0),(e,t)=>e.setDate(e.getDate()+t),(e,t)=>(t-e-(t.getTimezoneOffset()-e.getTimezoneOffset())*6e4)/864e5,e=>e.getDate()-1),S9=ti.range,El=ae(e=>{e.setUTCHours(0,0,0,0)},(e,t)=>{e.setUTCDate(e.getUTCDate()+t)},(e,t)=>(t-e)/864e5,e=>e.getUTCDate()-1),T9=El.range,Ml=ae(e=>{e.setUTCHours(0,0,0,0)},(e,t)=>{e.setUTCDate(e.getUTCDate()+t)},(e,t)=>(t-e)/864e5,e=>Math.floor(e/864e5)),I9=Ml.range;function Al(e){return ae(t=>{t.setDate(t.getDate()-(t.getDay()+7-e)%7),t.setHours(0,0,0,0)},(t,n)=>{t.setDate(t.getDate()+n*7)},(t,n)=>(n-t-(n.getTimezoneOffset()-t.getTimezoneOffset())*6e4)/6048e5)}var Br=Al(0),aa=Al(1),zy=Al(2),Vy=Al(3),fo=Al(4),jy=Al(5),Yy=Al(6),TA=Br.range,E9=aa.range,M9=zy.range,A9=Vy.range,F9=fo.range,k9=jy.range,N9=Yy.range;function Fl(e){return ae(t=>{t.setUTCDate(t.getUTCDate()-(t.getUTCDay()+7-e)%7),t.setUTCHours(0,0,0,0)},(t,n)=>{t.setUTCDate(t.getUTCDate()+n*7)},(t,n)=>(n-t)/6048e5)}var Dr=Fl(0),la=Fl(1),qy=Fl(2),Wy=Fl(3),ho=Fl(4),Gy=Fl(5),Hy=Fl(6),IA=Dr.range,O9=la.range,C9=qy.range,B9=Wy.range,D9=ho.range,L9=Gy.range,R9=Hy.range;var ss=ae(e=>{e.setDate(1),e.setHours(0,0,0,0)},(e,t)=>{e.setMonth(e.getMonth()+t)},(e,t)=>t.getMonth()-e.getMonth()+(t.getFullYear()-e.getFullYear())*12,e=>e.getMonth()),P9=ss.range,as=ae(e=>{e.setUTCDate(1),e.setUTCHours(0,0,0,0)},(e,t)=>{e.setUTCMonth(e.getUTCMonth()+t)},(e,t)=>t.getUTCMonth()-e.getUTCMonth()+(t.getUTCFullYear()-e.getUTCFullYear())*12,e=>e.getUTCMonth()),U9=as.range;var zn=ae(e=>{e.setMonth(0,1),e.setHours(0,0,0,0)},(e,t)=>{e.setFullYear(e.getFullYear()+t)},(e,t)=>t.getFullYear()-e.getFullYear(),e=>e.getFullYear());zn.every=e=>!isFinite(e=Math.floor(e))||!(e>0)?null:ae(t=>{t.setFullYear(Math.floor(t.getFullYear()/e)*e),t.setMonth(0,1),t.setHours(0,0,0,0)},(t,n)=>{t.setFullYear(t.getFullYear()+n*e)});var $9=zn.range,Vn=ae(e=>{e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0)},(e,t)=>{e.setUTCFullYear(e.getUTCFullYear()+t)},(e,t)=>t.getUTCFullYear()-e.getUTCFullYear(),e=>e.getUTCFullYear());Vn.every=e=>!isFinite(e=Math.floor(e))||!(e>0)?null:ae(t=>{t.setUTCFullYear(Math.floor(t.getUTCFullYear()/e)*e),t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)},(t,n)=>{t.setUTCFullYear(t.getUTCFullYear()+n*e)});var z9=Vn.range;function MA(e,t,n,r,i,o){let s=[[Fn,1,1e3],[Fn,5,5*1e3],[Fn,15,15*1e3],[Fn,30,30*1e3],[o,1,6e4],[o,5,5*6e4],[o,15,15*6e4],[o,30,30*6e4],[i,1,36e5],[i,3,3*36e5],[i,6,6*36e5],[i,12,12*36e5],[r,1,864e5],[r,2,2*864e5],[n,1,6048e5],[t,1,2592e6],[t,3,3*2592e6],[e,1,31536e6]];function a(c,u,d){let f=u<c;f&&([c,u]=[u,c]);let h=d&&typeof d.range=="function"?d:l(c,u,d),p=h?h.range(c,+u+1):[];return f?p.reverse():p}function l(c,u,d){let f=Math.abs(u-c)/d,h=Go(([,,g])=>g).right(s,f);if(h===s.length)return e.every(Oc(c/31536e6,u/31536e6,d));if(h===0)return ph.every(Math.max(Oc(c,u,d),1));let[p,m]=s[f/s[h-1][2]<s[h][2]/f?h-1:h];return p.every(m)}return[a,l]}var[gv,yh]=MA(Vn,as,Dr,Ml,os,is),[bv,_v]=MA(zn,ss,Br,ti,sa,oa);function xv(e){if(0<=e.y&&e.y<100){var t=new Date(-1,e.m,e.d,e.H,e.M,e.S,e.L);return t.setFullYear(e.y),t}return new Date(e.y,e.m,e.d,e.H,e.M,e.S,e.L)}function wv(e){if(0<=e.y&&e.y<100){var t=new Date(Date.UTC(-1,e.m,e.d,e.H,e.M,e.S,e.L));return t.setUTCFullYear(e.y),t}return new Date(Date.UTC(e.y,e.m,e.d,e.H,e.M,e.S,e.L))}function gh(e,t,n){return{y:e,m:t,d:n,H:0,M:0,S:0,L:0}}function vv(e){var t=e.dateTime,n=e.date,r=e.time,i=e.periods,o=e.days,s=e.shortDays,a=e.months,l=e.shortMonths,c=bh(i),u=_h(i),d=bh(o),f=_h(o),h=bh(s),p=_h(s),m=bh(a),g=_h(a),b=bh(l),y=_h(l),x={a:L,A:U,b:B,B:$,c:null,d:CA,e:CA,f:fP,g:wP,G:SP,H:lP,I:cP,j:uP,L:PA,m:dP,M:hP,p:V,q:z,Q:LA,s:RA,S:pP,u:mP,U:yP,V:gP,w:bP,W:_P,x:null,X:null,y:xP,Y:vP,Z:TP,"%":DA},_={a:Q,A:Ft,b:ft,B:ht,c:null,d:BA,e:BA,f:AP,g:PP,G:$P,H:IP,I:EP,j:MP,L:$A,m:FP,M:kP,p:G,q:ct,Q:LA,s:RA,S:NP,u:OP,U:CP,V:BP,w:DP,W:LP,x:null,X:null,y:RP,Y:UP,Z:zP,"%":DA},v={a:S,A:I,b:k,B:O,c:N,d:NA,e:NA,f:iP,g:kA,G:FA,H:OA,I:OA,j:tP,L:rP,m:J9,M:eP,p:F,q:Q9,Q:sP,s:aP,S:nP,u:G9,U:H9,V:X9,w:W9,W:Z9,x:A,X:C,y:kA,Y:FA,Z:K9,"%":oP};x.x=w(n,x),x.X=w(r,x),x.c=w(t,x),_.x=w(n,_),_.X=w(r,_),_.c=w(t,_);function w(R,Z){return function(K){var D=[],$t=-1,ot=0,qt=R.length,Zt,tn,Ra;for(K instanceof Date||(K=new Date(+K));++$t<qt;)R.charCodeAt($t)===37&&(D.push(R.slice(ot,$t)),(tn=AA[Zt=R.charAt(++$t)])!=null?Zt=R.charAt(++$t):tn=Zt==="e"?" ":"0",(Ra=Z[Zt])&&(Zt=Ra(K,tn)),D.push(Zt),ot=$t+1);return D.push(R.slice(ot,$t)),D.join("")}}function T(R,Z){return function(K){var D=gh(1900,void 0,1),$t=M(D,R,K+="",0),ot,qt;if($t!=K.length)return null;if("Q"in D)return new Date(D.Q);if("s"in D)return new Date(D.s*1e3+("L"in D?D.L:0));if(Z&&!("Z"in D)&&(D.Z=0),"p"in D&&(D.H=D.H%12+D.p*12),D.m===void 0&&(D.m="q"in D?D.q:0),"V"in D){if(D.V<1||D.V>53)return null;"w"in D||(D.w=1),"Z"in D?(ot=wv(gh(D.y,0,1)),qt=ot.getUTCDay(),ot=qt>4||qt===0?la.ceil(ot):la(ot),ot=El.offset(ot,(D.V-1)*7),D.y=ot.getUTCFullYear(),D.m=ot.getUTCMonth(),D.d=ot.getUTCDate()+(D.w+6)%7):(ot=xv(gh(D.y,0,1)),qt=ot.getDay(),ot=qt>4||qt===0?aa.ceil(ot):aa(ot),ot=ti.offset(ot,(D.V-1)*7),D.y=ot.getFullYear(),D.m=ot.getMonth(),D.d=ot.getDate()+(D.w+6)%7)}else("W"in D||"U"in D)&&("w"in D||(D.w="u"in D?D.u%7:"W"in D?1:0),qt="Z"in D?wv(gh(D.y,0,1)).getUTCDay():xv(gh(D.y,0,1)).getDay(),D.m=0,D.d="W"in D?(D.w+6)%7+D.W*7-(qt+5)%7:D.w+D.U*7-(qt+6)%7);return"Z"in D?(D.H+=D.Z/100|0,D.M+=D.Z%100,wv(D)):xv(D)}}function M(R,Z,K,D){for(var $t=0,ot=Z.length,qt=K.length,Zt,tn;$t<ot;){if(D>=qt)return-1;if(Zt=Z.charCodeAt($t++),Zt===37){if(Zt=Z.charAt($t++),tn=v[Zt in AA?Z.charAt($t++):Zt],!tn||(D=tn(R,K,D))<0)return-1}else if(Zt!=K.charCodeAt(D++))return-1}return D}function F(R,Z,K){var D=c.exec(Z.slice(K));return D?(R.p=u.get(D[0].toLowerCase()),K+D[0].length):-1}function S(R,Z,K){var D=h.exec(Z.slice(K));return D?(R.w=p.get(D[0].toLowerCase()),K+D[0].length):-1}function I(R,Z,K){var D=d.exec(Z.slice(K));return D?(R.w=f.get(D[0].toLowerCase()),K+D[0].length):-1}function k(R,Z,K){var D=b.exec(Z.slice(K));return D?(R.m=y.get(D[0].toLowerCase()),K+D[0].length):-1}function O(R,Z,K){var D=m.exec(Z.slice(K));return D?(R.m=g.get(D[0].toLowerCase()),K+D[0].length):-1}function N(R,Z,K){return M(R,t,Z,K)}function A(R,Z,K){return M(R,n,Z,K)}function C(R,Z,K){return M(R,r,Z,K)}function L(R){return s[R.getDay()]}function U(R){return o[R.getDay()]}function B(R){return l[R.getMonth()]}function $(R){return a[R.getMonth()]}function V(R){return i[+(R.getHours()>=12)]}function z(R){return 1+~~(R.getMonth()/3)}function Q(R){return s[R.getUTCDay()]}function Ft(R){return o[R.getUTCDay()]}function ft(R){return l[R.getUTCMonth()]}function ht(R){return a[R.getUTCMonth()]}function G(R){return i[+(R.getUTCHours()>=12)]}function ct(R){return 1+~~(R.getUTCMonth()/3)}return{format:function(R){var Z=w(R+="",x);return Z.toString=function(){return R},Z},parse:function(R){var Z=T(R+="",!1);return Z.toString=function(){return R},Z},utcFormat:function(R){var Z=w(R+="",_);return Z.toString=function(){return R},Z},utcParse:function(R){var Z=T(R+="",!0);return Z.toString=function(){return R},Z}}}var AA={"-":"",_:" ",0:"0"},un=/^\s*\d+/,j9=/^%/,Y9=/[\\^$*+?|[\]().{}]/g;function Ht(e,t,n){var r=e<0?"-":"",i=(r?-e:e)+"",o=i.length;return r+(o<n?new Array(n-o+1).join(t)+i:i)}function q9(e){return e.replace(Y9,"\\$&")}function bh(e){return new RegExp("^(?:"+e.map(q9).join("|")+")","i")}function _h(e){return new Map(e.map((t,n)=>[t.toLowerCase(),n]))}function W9(e,t,n){var r=un.exec(t.slice(n,n+1));return r?(e.w=+r[0],n+r[0].length):-1}function G9(e,t,n){var r=un.exec(t.slice(n,n+1));return r?(e.u=+r[0],n+r[0].length):-1}function H9(e,t,n){var r=un.exec(t.slice(n,n+2));return r?(e.U=+r[0],n+r[0].length):-1}function X9(e,t,n){var r=un.exec(t.slice(n,n+2));return r?(e.V=+r[0],n+r[0].length):-1}function Z9(e,t,n){var r=un.exec(t.slice(n,n+2));return r?(e.W=+r[0],n+r[0].length):-1}function FA(e,t,n){var r=un.exec(t.slice(n,n+4));return r?(e.y=+r[0],n+r[0].length):-1}function kA(e,t,n){var r=un.exec(t.slice(n,n+2));return r?(e.y=+r[0]+(+r[0]>68?1900:2e3),n+r[0].length):-1}function K9(e,t,n){var r=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(t.slice(n,n+6));return r?(e.Z=r[1]?0:-(r[2]+(r[3]||"00")),n+r[0].length):-1}function Q9(e,t,n){var r=un.exec(t.slice(n,n+1));return r?(e.q=r[0]*3-3,n+r[0].length):-1}function J9(e,t,n){var r=un.exec(t.slice(n,n+2));return r?(e.m=r[0]-1,n+r[0].length):-1}function NA(e,t,n){var r=un.exec(t.slice(n,n+2));return r?(e.d=+r[0],n+r[0].length):-1}function tP(e,t,n){var r=un.exec(t.slice(n,n+3));return r?(e.m=0,e.d=+r[0],n+r[0].length):-1}function OA(e,t,n){var r=un.exec(t.slice(n,n+2));return r?(e.H=+r[0],n+r[0].length):-1}function eP(e,t,n){var r=un.exec(t.slice(n,n+2));return r?(e.M=+r[0],n+r[0].length):-1}function nP(e,t,n){var r=un.exec(t.slice(n,n+2));return r?(e.S=+r[0],n+r[0].length):-1}function rP(e,t,n){var r=un.exec(t.slice(n,n+3));return r?(e.L=+r[0],n+r[0].length):-1}function iP(e,t,n){var r=un.exec(t.slice(n,n+6));return r?(e.L=Math.floor(r[0]/1e3),n+r[0].length):-1}function oP(e,t,n){var r=j9.exec(t.slice(n,n+1));return r?n+r[0].length:-1}function sP(e,t,n){var r=un.exec(t.slice(n));return r?(e.Q=+r[0],n+r[0].length):-1}function aP(e,t,n){var r=un.exec(t.slice(n));return r?(e.s=+r[0],n+r[0].length):-1}function CA(e,t){return Ht(e.getDate(),t,2)}function lP(e,t){return Ht(e.getHours(),t,2)}function cP(e,t){return Ht(e.getHours()%12||12,t,2)}function uP(e,t){return Ht(1+ti.count(zn(e),e),t,3)}function PA(e,t){return Ht(e.getMilliseconds(),t,3)}function fP(e,t){return PA(e,t)+"000"}function dP(e,t){return Ht(e.getMonth()+1,t,2)}function hP(e,t){return Ht(e.getMinutes(),t,2)}function pP(e,t){return Ht(e.getSeconds(),t,2)}function mP(e){var t=e.getDay();return t===0?7:t}function yP(e,t){return Ht(Br.count(zn(e)-1,e),t,2)}function UA(e){var t=e.getDay();return t>=4||t===0?fo(e):fo.ceil(e)}function gP(e,t){return e=UA(e),Ht(fo.count(zn(e),e)+(zn(e).getDay()===4),t,2)}function bP(e){return e.getDay()}function _P(e,t){return Ht(aa.count(zn(e)-1,e),t,2)}function xP(e,t){return Ht(e.getFullYear()%100,t,2)}function wP(e,t){return e=UA(e),Ht(e.getFullYear()%100,t,2)}function vP(e,t){return Ht(e.getFullYear()%1e4,t,4)}function SP(e,t){var n=e.getDay();return e=n>=4||n===0?fo(e):fo.ceil(e),Ht(e.getFullYear()%1e4,t,4)}function TP(e){var t=e.getTimezoneOffset();return(t>0?"-":(t*=-1,"+"))+Ht(t/60|0,"0",2)+Ht(t%60,"0",2)}function BA(e,t){return Ht(e.getUTCDate(),t,2)}function IP(e,t){return Ht(e.getUTCHours(),t,2)}function EP(e,t){return Ht(e.getUTCHours()%12||12,t,2)}function MP(e,t){return Ht(1+El.count(Vn(e),e),t,3)}function $A(e,t){return Ht(e.getUTCMilliseconds(),t,3)}function AP(e,t){return $A(e,t)+"000"}function FP(e,t){return Ht(e.getUTCMonth()+1,t,2)}function kP(e,t){return Ht(e.getUTCMinutes(),t,2)}function NP(e,t){return Ht(e.getUTCSeconds(),t,2)}function OP(e){var t=e.getUTCDay();return t===0?7:t}function CP(e,t){return Ht(Dr.count(Vn(e)-1,e),t,2)}function zA(e){var t=e.getUTCDay();return t>=4||t===0?ho(e):ho.ceil(e)}function BP(e,t){return e=zA(e),Ht(ho.count(Vn(e),e)+(Vn(e).getUTCDay()===4),t,2)}function DP(e){return e.getUTCDay()}function LP(e,t){return Ht(la.count(Vn(e)-1,e),t,2)}function RP(e,t){return Ht(e.getUTCFullYear()%100,t,2)}function PP(e,t){return e=zA(e),Ht(e.getUTCFullYear()%100,t,2)}function UP(e,t){return Ht(e.getUTCFullYear()%1e4,t,4)}function $P(e,t){var n=e.getUTCDay();return e=n>=4||n===0?ho(e):ho.ceil(e),Ht(e.getUTCFullYear()%1e4,t,4)}function zP(){return"+0000"}function DA(){return"%"}function LA(e){return+e}function RA(e){return Math.floor(+e/1e3)}var lu,cu,VA,po,jA;Sv({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});function Sv(e){return lu=vv(e),cu=lu.format,VA=lu.parse,po=lu.utcFormat,jA=lu.utcParse,lu}function VP(e){return new Date(e)}function jP(e){return e instanceof Date?+e:+new Date(+e)}function Xy(e,t,n,r,i,o,s,a,l,c){var u=sh(),d=u.invert,f=u.domain,h=c(".%L"),p=c(":%S"),m=c("%I:%M"),g=c("%I %p"),b=c("%a %d"),y=c("%b %d"),x=c("%B"),_=c("%Y");function v(w){return(l(w)<w?h:a(w)<w?p:s(w)<w?m:o(w)<w?g:r(w)<w?i(w)<w?b:y:n(w)<w?x:_)(w)}return u.invert=function(w){return new Date(d(w))},u.domain=function(w){return arguments.length?f(Array.from(w,jP)):f().map(VP)},u.ticks=function(w){var T=f();return e(T[0],T[T.length-1],w??10)},u.tickFormat=function(w,T){return T==null?v:c(T)},u.nice=function(w){var T=f();return(!w||typeof w.range!="function")&&(w=t(T[0],T[T.length-1],w??10)),w?f(lh(T,w)):u},u.copy=function(){return co(u,Xy(e,t,n,r,i,o,s,a,l,c))},u}function Zy(){return We.apply(Xy(bv,_v,zn,ss,Br,ti,sa,oa,Fn,cu).domain([new Date(2e3,0,1),new Date(2e3,0,2)]),arguments)}function Ky(){return We.apply(Xy(gv,yh,Vn,as,Dr,El,os,is,Fn,po).domain([Date.UTC(2e3,0,1),Date.UTC(2e3,0,2)]),arguments)}function xh(e,t){return t.domain(e.domain()).interpolator(e.interpolator()).clamp(e.clamp()).unknown(e.unknown())}function Qy(){var e=0,t=.5,n=1,r=1,i,o,s,a,l,c=Er,u,d=!1,f;function h(m){return isNaN(m=+m)?f:(m=.5+((m=+u(m))-o)*(r*m<r*o?a:l),c(d?Math.max(0,Math.min(1,m)):m))}h.domain=function(m){return arguments.length?([e,t,n]=m,i=u(e=+e),o=u(t=+t),s=u(n=+n),a=i===o?0:.5/(o-i),l=o===s?0:.5/(s-o),r=o<i?-1:1,h):[e,t,n]},h.clamp=function(m){return arguments.length?(d=!!m,h):d},h.interpolator=function(m){return arguments.length?(c=m,h):c};function p(m){return function(g){var b,y,x;return arguments.length?([b,y,x]=g,c=eo(m,[b,y,x]),h):[c(0),c(.5),c(1)]}}return h.range=p(Mi),h.rangeRound=p(cl),h.unknown=function(m){return arguments.length?(f=m,h):f},function(m){return u=m,i=m(e),o=m(t),s=m(n),a=i===o?0:.5/(o-i),l=o===s?0:.5/(s-o),r=o<i?-1:1,h}}function wh(){var e=rs(Qy()(Er));return e.copy=function(){return xh(e,wh())},ih.apply(e,arguments)}function Jy(){var e=dv(Qy()).domain([.1,1,10]);return e.copy=function(){return xh(e,Jy()).base(e.base())},ih.apply(e,arguments)}function tg(){var e=hv(Qy());return e.copy=function(){return xh(e,tg()).constant(e.constant())},ih.apply(e,arguments)}function eg(){var e=pv(Qy());return e.copy=function(){return xh(e,eg()).exponent(e.exponent())},ih.apply(e,arguments)}function j(e){for(var t=e.length/6|0,n=new Array(t),r=0;r<t;)n[r]="#"+e.slice(r*6,++r*6);return n}var Tv=j("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf");var Iv=j("7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666");var Ev=j("1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666");var Mv=j("a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928");var Av=j("fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2");var Fv=j("b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc");var kv=j("e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999");var Nv=j("66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3");var Ov=j("8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f");var Cv=j("4e79a7f28e2ce1575976b7b259a14fedc949af7aa1ff9da79c755fbab0ab");var rt=e=>Dx(e[e.length-1]);var ng=new Array(3).concat("d8b365f5f5f55ab4ac","a6611adfc27d80cdc1018571","a6611adfc27df5f5f580cdc1018571","8c510ad8b365f6e8c3c7eae55ab4ac01665e","8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e","8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e","8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e","5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30","5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30").map(j),rg=rt(ng);var ig=new Array(3).concat("af8dc3f7f7f77fbf7b","7b3294c2a5cfa6dba0008837","7b3294c2a5cff7f7f7a6dba0008837","762a83af8dc3e7d4e8d9f0d37fbf7b1b7837","762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837","762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837","762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837","40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b","40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b").map(j),og=rt(ig);var sg=new Array(3).concat("e9a3c9f7f7f7a1d76a","d01c8bf1b6dab8e1864dac26","d01c8bf1b6daf7f7f7b8e1864dac26","c51b7de9a3c9fde0efe6f5d0a1d76a4d9221","c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221","c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221","c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221","8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419","8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419").map(j),ag=rt(sg);var lg=new Array(3).concat("998ec3f7f7f7f1a340","5e3c99b2abd2fdb863e66101","5e3c99b2abd2f7f7f7fdb863e66101","542788998ec3d8daebfee0b6f1a340b35806","542788998ec3d8daebf7f7f7fee0b6f1a340b35806","5427888073acb2abd2d8daebfee0b6fdb863e08214b35806","5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806","2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08","2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08").map(j),cg=rt(lg);var vh=new Array(3).concat("ef8a62f7f7f767a9cf","ca0020f4a58292c5de0571b0","ca0020f4a582f7f7f792c5de0571b0","b2182bef8a62fddbc7d1e5f067a9cf2166ac","b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac","b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac","b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac","67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061","67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061").map(j),uu=rt(vh);var ug=new Array(3).concat("ef8a62ffffff999999","ca0020f4a582bababa404040","ca0020f4a582ffffffbababa404040","b2182bef8a62fddbc7e0e0e09999994d4d4d","b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d","b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d","b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d","67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a","67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a").map(j),fg=rt(ug);var Sh=new Array(3).concat("fc8d59ffffbf91bfdb","d7191cfdae61abd9e92c7bb6","d7191cfdae61ffffbfabd9e92c7bb6","d73027fc8d59fee090e0f3f891bfdb4575b4","d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4","d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4","d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4","a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695","a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695").map(j),fu=rt(Sh);var dg=new Array(3).concat("fc8d59ffffbf91cf60","d7191cfdae61a6d96a1a9641","d7191cfdae61ffffbfa6d96a1a9641","d73027fc8d59fee08bd9ef8b91cf601a9850","d73027fc8d59fee08bffffbfd9ef8b91cf601a9850","d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850","d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850","a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837","a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837").map(j),hg=rt(dg);var pg=new Array(3).concat("fc8d59ffffbf99d594","d7191cfdae61abdda42b83ba","d7191cfdae61ffffbfabdda42b83ba","d53e4ffc8d59fee08be6f59899d5943288bd","d53e4ffc8d59fee08bffffbfe6f59899d5943288bd","d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd","d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd","9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2","9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2").map(j),mg=rt(pg);var yg=new Array(3).concat("e5f5f999d8c92ca25f","edf8fbb2e2e266c2a4238b45","edf8fbb2e2e266c2a42ca25f006d2c","edf8fbccece699d8c966c2a42ca25f006d2c","edf8fbccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b").map(j),gg=rt(yg);var bg=new Array(3).concat("e0ecf49ebcda8856a7","edf8fbb3cde38c96c688419d","edf8fbb3cde38c96c68856a7810f7c","edf8fbbfd3e69ebcda8c96c68856a7810f7c","edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b","f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b","f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b").map(j),_g=rt(bg);var xg=new Array(3).concat("e0f3dba8ddb543a2ca","f0f9e8bae4bc7bccc42b8cbe","f0f9e8bae4bc7bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081").map(j),wg=rt(xg);var vg=new Array(3).concat("fee8c8fdbb84e34a33","fef0d9fdcc8afc8d59d7301f","fef0d9fdcc8afc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000").map(j),Sg=rt(vg);var Tg=new Array(3).concat("ece2f0a6bddb1c9099","f6eff7bdc9e167a9cf02818a","f6eff7bdc9e167a9cf1c9099016c59","f6eff7d0d1e6a6bddb67a9cf1c9099016c59","f6eff7d0d1e6a6bddb67a9cf3690c002818a016450","fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450","fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636").map(j),Ig=rt(Tg);var Eg=new Array(3).concat("ece7f2a6bddb2b8cbe","f1eef6bdc9e174a9cf0570b0","f1eef6bdc9e174a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858").map(j),Mg=rt(Eg);var Ag=new Array(3).concat("e7e1efc994c7dd1c77","f1eef6d7b5d8df65b0ce1256","f1eef6d7b5d8df65b0dd1c77980043","f1eef6d4b9dac994c7df65b0dd1c77980043","f1eef6d4b9dac994c7df65b0e7298ace125691003f","f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f","f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f").map(j),Fg=rt(Ag);var kg=new Array(3).concat("fde0ddfa9fb5c51b8a","feebe2fbb4b9f768a1ae017e","feebe2fbb4b9f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a").map(j),Ng=rt(kg);var Og=new Array(3).concat("edf8b17fcdbb2c7fb8","ffffcca1dab441b6c4225ea8","ffffcca1dab441b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58").map(j),Cg=rt(Og);var Bg=new Array(3).concat("f7fcb9addd8e31a354","ffffccc2e69978c679238443","ffffccc2e69978c67931a354006837","ffffccd9f0a3addd8e78c67931a354006837","ffffccd9f0a3addd8e78c67941ab5d238443005a32","ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32","ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529").map(j),Dg=rt(Bg);var Lg=new Array(3).concat("fff7bcfec44fd95f0e","ffffd4fed98efe9929cc4c02","ffffd4fed98efe9929d95f0e993404","ffffd4fee391fec44ffe9929d95f0e993404","ffffd4fee391fec44ffe9929ec7014cc4c028c2d04","ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04","ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506").map(j),Rg=rt(Lg);var Pg=new Array(3).concat("ffeda0feb24cf03b20","ffffb2fecc5cfd8d3ce31a1c","ffffb2fecc5cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026").map(j),Ug=rt(Pg);var $g=new Array(3).concat("deebf79ecae13182bd","eff3ffbdd7e76baed62171b5","eff3ffbdd7e76baed63182bd08519c","eff3ffc6dbef9ecae16baed63182bd08519c","eff3ffc6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b").map(j),zg=rt($g);var Vg=new Array(3).concat("e5f5e0a1d99b31a354","edf8e9bae4b374c476238b45","edf8e9bae4b374c47631a354006d2c","edf8e9c7e9c0a1d99b74c47631a354006d2c","edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b").map(j),jg=rt(Vg);var Yg=new Array(3).concat("f0f0f0bdbdbd636363","f7f7f7cccccc969696525252","f7f7f7cccccc969696636363252525","f7f7f7d9d9d9bdbdbd969696636363252525","f7f7f7d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000").map(j),qg=rt(Yg);var Wg=new Array(3).concat("efedf5bcbddc756bb1","f2f0f7cbc9e29e9ac86a51a3","f2f0f7cbc9e29e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d").map(j),Gg=rt(Wg);var Hg=new Array(3).concat("fee0d2fc9272de2d26","fee5d9fcae91fb6a4acb181d","fee5d9fcae91fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d").map(j),Xg=rt(Hg);var Zg=new Array(3).concat("fee6cefdae6be6550d","feeddefdbe85fd8d3cd94701","feeddefdbe85fd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704").map(j),Kg=rt(Zg);function Qg(e){return e=Math.max(0,Math.min(1,e)),"rgb("+Math.max(0,Math.min(255,Math.round(-4.54-e*(35.34-e*(2381.73-e*(6402.7-e*(7024.72-e*2710.57)))))))+", "+Math.max(0,Math.min(255,Math.round(32.49+e*(170.73+e*(52.82-e*(131.46-e*(176.58-e*67.37)))))))+", "+Math.max(0,Math.min(255,Math.round(81.24+e*(442.36-e*(2482.43-e*(6167.24-e*(6614.94-e*2475.67)))))))+")"}var Jg=zc(Jn(300,.5,0),Jn(-240,.5,1));var eb=zc(Jn(-100,.75,.35),Jn(80,1.5,.8)),nb=zc(Jn(260,.75,.35),Jn(80,1.5,.8)),tb=Jn();function rb(e){(e<0||e>1)&&(e-=Math.floor(e));var t=Math.abs(e-.5);return tb.h=360*e-100,tb.s=1.5-1.5*t,tb.l=.8-.9*t,tb+""}var ib=Qn(),YP=Math.PI/3,qP=Math.PI*2/3;function ob(e){var t;return e=(.5-e)*Math.PI,ib.r=255*(t=Math.sin(e))*t,ib.g=255*(t=Math.sin(e+YP))*t,ib.b=255*(t=Math.sin(e+qP))*t,ib+""}function sb(e){return e=Math.max(0,Math.min(1,e)),"rgb("+Math.max(0,Math.min(255,Math.round(34.61+e*(1172.33-e*(10793.56-e*(33300.12-e*(38394.49-e*14825.05)))))))+", "+Math.max(0,Math.min(255,Math.round(23.31+e*(557.33+e*(1225.33-e*(3574.96-e*(1073.77+e*707.56)))))))+", "+Math.max(0,Math.min(255,Math.round(27.2+e*(3211.1-e*(15327.97-e*(27814-e*(22569.18-e*6838.66)))))))+")"}function ab(e){var t=e.length;return function(n){return e[Math.max(0,Math.min(t-1,Math.floor(n*t)))]}}var lb=ab(j("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725")),cb=ab(j("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf")),ub=ab(j("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4")),fb=ab(j("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921"));function Ge(e){return function(){return e}}var Bv=Math.cos;var du=Math.min,Th=Math.sin,Xt=Math.sqrt,Dv=1e-12,kl=Math.PI,O_t=kl/2,hu=2*kl;function db(e){let t=3;return e.digits=function(n){if(!arguments.length)return t;if(n==null)t=null;else{let r=Math.floor(n);if(!(r>=0))throw new RangeError(`invalid digits: ${n}`);t=r}return e},()=>new Qs(t)}var L_t=Array.prototype.slice;function hb(e){return typeof e=="object"&&"length"in e?e:Array.from(e)}function YA(e){this._context=e}YA.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||this._line!==0&&this._point===1)&&this._context.closePath(),this._line=1-this._line},point:function(e,t){switch(e=+e,t=+t,this._point){case 0:this._point=1,this._line?this._context.lineTo(e,t):this._context.moveTo(e,t);break;case 1:this._point=2;default:this._context.lineTo(e,t);break}}};function ls(e){return new YA(e)}function pb(e){return e[0]}function mb(e){return e[1]}function Ih(e,t){var n=Ge(!0),r=null,i=ls,o=null,s=db(a);e=typeof e=="function"?e:e===void 0?pb:Ge(e),t=typeof t=="function"?t:t===void 0?mb:Ge(t);function a(l){var c,u=(l=hb(l)).length,d,f=!1,h;for(r==null&&(o=i(h=s())),c=0;c<=u;++c)!(c<u&&n(d=l[c],c,l))===f&&((f=!f)?o.lineStart():o.lineEnd()),f&&o.point(+e(d,c,l),+t(d,c,l));if(h)return o=null,h+""||null}return a.x=function(l){return arguments.length?(e=typeof l=="function"?l:Ge(+l),a):e},a.y=function(l){return arguments.length?(t=typeof l=="function"?l:Ge(+l),a):t},a.defined=function(l){return arguments.length?(n=typeof l=="function"?l:Ge(!!l),a):n},a.curve=function(l){return arguments.length?(i=l,r!=null&&(o=i(r)),a):i},a.context=function(l){return arguments.length?(l==null?r=o=null:o=i(r=l),a):r},a}function pu(e,t,n){var r=null,i=Ge(!0),o=null,s=ls,a=null,l=db(c);e=typeof e=="function"?e:e===void 0?pb:Ge(+e),t=typeof t=="function"?t:t===void 0?Ge(0):Ge(+t),n=typeof n=="function"?n:n===void 0?mb:Ge(+n);function c(d){var f,h,p,m=(d=hb(d)).length,g,b=!1,y,x=new Array(m),_=new Array(m);for(o==null&&(a=s(y=l())),f=0;f<=m;++f){if(!(f<m&&i(g=d[f],f,d))===b)if(b=!b)h=f,a.areaStart(),a.lineStart();else{for(a.lineEnd(),a.lineStart(),p=f-1;p>=h;--p)a.point(x[p],_[p]);a.lineEnd(),a.areaEnd()}b&&(x[f]=+e(g,f,d),_[f]=+t(g,f,d),a.point(r?+r(g,f,d):x[f],n?+n(g,f,d):_[f]))}if(y)return a=null,y+""||null}function u(){return Ih().defined(i).curve(s).context(o)}return c.x=function(d){return arguments.length?(e=typeof d=="function"?d:Ge(+d),r=null,c):e},c.x0=function(d){return arguments.length?(e=typeof d=="function"?d:Ge(+d),c):e},c.x1=function(d){return arguments.length?(r=d==null?null:typeof d=="function"?d:Ge(+d),c):r},c.y=function(d){return arguments.length?(t=typeof d=="function"?d:Ge(+d),n=null,c):t},c.y0=function(d){return arguments.length?(t=typeof d=="function"?d:Ge(+d),c):t},c.y1=function(d){return arguments.length?(n=d==null?null:typeof d=="function"?d:Ge(+d),c):n},c.lineX0=c.lineY0=function(){return u().x(e).y(t)},c.lineY1=function(){return u().x(e).y(n)},c.lineX1=function(){return u().x(r).y(t)},c.defined=function(d){return arguments.length?(i=typeof d=="function"?d:Ge(!!d),c):i},c.curve=function(d){return arguments.length?(s=d,o!=null&&(a=s(o)),c):s},c.context=function(d){return arguments.length?(d==null?o=a=null:a=s(o=d),c):o},c}var yb=class{constructor(t,n){this._context=t,this._x=n}areaStart(){this._line=0}areaEnd(){this._line=NaN}lineStart(){this._point=0}lineEnd(){(this._line||this._line!==0&&this._point===1)&&this._context.closePath(),this._line=1-this._line}point(t,n){switch(t=+t,n=+n,this._point){case 0:{this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break}case 1:this._point=2;default:{this._x?this._context.bezierCurveTo(this._x0=(this._x0+t)/2,this._y0,this._x0,n,t,n):this._context.bezierCurveTo(this._x0,this._y0=(this._y0+n)/2,t,this._y0,t,n);break}}this._x0=t,this._y0=n}};function Lv(e){return new yb(e,!0)}function Rv(e){return new yb(e,!1)}var WP=Xt(3),Eh={draw(e,t){let n=Xt(t+du(t/28,.75))*.59436,r=n/2,i=r*WP;e.moveTo(0,n),e.lineTo(0,-n),e.moveTo(-i,-r),e.lineTo(i,r),e.moveTo(-i,r),e.lineTo(i,-r)}};var cs={draw(e,t){let n=Xt(t/kl);e.moveTo(n,0),e.arc(0,0,n,0,hu)}};var Mh={draw(e,t){let n=Xt(t/5)/2;e.moveTo(-3*n,-n),e.lineTo(-n,-n),e.lineTo(-n,-3*n),e.lineTo(n,-3*n),e.lineTo(n,-n),e.lineTo(3*n,-n),e.lineTo(3*n,n),e.lineTo(n,n),e.lineTo(n,3*n),e.lineTo(-n,3*n),e.lineTo(-n,n),e.lineTo(-3*n,n),e.closePath()}};var qA=Xt(1/3),GP=qA*2,Ah={draw(e,t){let n=Xt(t/GP),r=n*qA;e.moveTo(0,-n),e.lineTo(r,0),e.lineTo(0,n),e.lineTo(-r,0),e.closePath()}};var Fh={draw(e,t){let n=Xt(t)*.62625;e.moveTo(0,-n),e.lineTo(n,0),e.lineTo(0,n),e.lineTo(-n,0),e.closePath()}};var kh={draw(e,t){let n=Xt(t-du(t/7,2))*.87559;e.moveTo(-n,0),e.lineTo(n,0),e.moveTo(0,n),e.lineTo(0,-n)}};var Nh={draw(e,t){let n=Xt(t),r=-n/2;e.rect(r,r,n,n)}};var Oh={draw(e,t){let n=Xt(t)*.4431;e.moveTo(n,n),e.lineTo(n,-n),e.lineTo(-n,-n),e.lineTo(-n,n),e.closePath()}};var HP=.8908130915292852,WA=Th(kl/10)/Th(7*kl/10),XP=Th(hu/10)*WA,ZP=-Bv(hu/10)*WA,Ch={draw(e,t){let n=Xt(t*HP),r=XP*n,i=ZP*n;e.moveTo(0,-n),e.lineTo(r,i);for(let o=1;o<5;++o){let s=hu*o/5,a=Bv(s),l=Th(s);e.lineTo(l*n,-a*n),e.lineTo(a*r-l*i,l*r+a*i)}e.closePath()}};var Pv=Xt(3),Bh={draw(e,t){let n=-Xt(t/(Pv*3));e.moveTo(0,n*2),e.lineTo(-Pv*n,-n),e.lineTo(Pv*n,-n),e.closePath()}};var KP=Xt(3),Dh={draw(e,t){let n=Xt(t)*.6824,r=n/2,i=n*KP/2;e.moveTo(0,-n),e.lineTo(i,r),e.lineTo(-i,r),e.closePath()}};var ei=-.5,ni=Xt(3)/2,Uv=1/Xt(12),QP=(Uv/2+1)*3,Lh={draw(e,t){let n=Xt(t/QP),r=n/2,i=n*Uv,o=r,s=n*Uv+n,a=-o,l=s;e.moveTo(r,i),e.lineTo(o,s),e.lineTo(a,l),e.lineTo(ei*r-ni*i,ni*r+ei*i),e.lineTo(ei*o-ni*s,ni*o+ei*s),e.lineTo(ei*a-ni*l,ni*a+ei*l),e.lineTo(ei*r+ni*i,ei*i-ni*r),e.lineTo(ei*o+ni*s,ei*s-ni*o),e.lineTo(ei*a+ni*l,ei*l-ni*a),e.closePath()}};var mu={draw(e,t){let n=Xt(t-du(t/6,1.7))*.6189;e.moveTo(-n,-n),e.lineTo(n,n),e.moveTo(-n,n),e.lineTo(n,-n)}};var gb=[cs,Mh,Ah,Nh,Ch,Bh,Lh],$v=[cs,kh,mu,Dh,Eh,Oh,Fh];function ri(){}function yu(e,t,n){e._context.bezierCurveTo((2*e._x0+e._x1)/3,(2*e._y0+e._y1)/3,(e._x0+2*e._x1)/3,(e._y0+2*e._y1)/3,(e._x0+4*e._x1+t)/6,(e._y0+4*e._y1+n)/6)}function Rh(e){this._context=e}Rh.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){switch(this._point){case 3:yu(this,this._x1,this._y1);case 2:this._context.lineTo(this._x1,this._y1);break}(this._line||this._line!==0&&this._point===1)&&this._context.closePath(),this._line=1-this._line},point:function(e,t){switch(e=+e,t=+t,this._point){case 0:this._point=1,this._line?this._context.lineTo(e,t):this._context.moveTo(e,t);break;case 1:this._point=2;break;case 2:this._point=3,this._context.lineTo((5*this._x0+this._x1)/6,(5*this._y0+this._y1)/6);default:yu(this,e,t);break}this._x0=this._x1,this._x1=e,this._y0=this._y1,this._y1=t}};function zv(e){return new Rh(e)}function GA(e){this._context=e}GA.prototype={areaStart:ri,areaEnd:ri,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._y0=this._y1=this._y2=this._y3=this._y4=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:{this._context.moveTo(this._x2,this._y2),this._context.closePath();break}case 2:{this._context.moveTo((this._x2+2*this._x3)/3,(this._y2+2*this._y3)/3),this._context.lineTo((this._x3+2*this._x2)/3,(this._y3+2*this._y2)/3),this._context.closePath();break}case 3:{this.point(this._x2,this._y2),this.point(this._x3,this._y3),this.point(this._x4,this._y4);break}}},point:function(e,t){switch(e=+e,t=+t,this._point){case 0:this._point=1,this._x2=e,this._y2=t;break;case 1:this._point=2,this._x3=e,this._y3=t;break;case 2:this._point=3,this._x4=e,this._y4=t,this._context.moveTo((this._x0+4*this._x1+e)/6,(this._y0+4*this._y1+t)/6);break;default:yu(this,e,t);break}this._x0=this._x1,this._x1=e,this._y0=this._y1,this._y1=t}};function Vv(e){return new GA(e)}function HA(e){this._context=e}HA.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){(this._line||this._line!==0&&this._point===3)&&this._context.closePath(),this._line=1-this._line},point:function(e,t){switch(e=+e,t=+t,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3;var n=(this._x0+4*this._x1+e)/6,r=(this._y0+4*this._y1+t)/6;this._line?this._context.lineTo(n,r):this._context.moveTo(n,r);break;case 3:this._point=4;default:yu(this,e,t);break}this._x0=this._x1,this._x1=e,this._y0=this._y1,this._y1=t}};function jv(e){return new HA(e)}function XA(e,t){this._basis=new Rh(e),this._beta=t}XA.prototype={lineStart:function(){this._x=[],this._y=[],this._basis.lineStart()},lineEnd:function(){var e=this._x,t=this._y,n=e.length-1;if(n>0)for(var r=e[0],i=t[0],o=e[n]-r,s=t[n]-i,a=-1,l;++a<=n;)l=a/n,this._basis.point(this._beta*e[a]+(1-this._beta)*(r+l*o),this._beta*t[a]+(1-this._beta)*(i+l*s));this._x=this._y=null,this._basis.lineEnd()},point:function(e,t){this._x.push(+e),this._y.push(+t)}};var Yv=function e(t){function n(r){return t===1?new Rh(r):new XA(r,t)}return n.beta=function(r){return e(+r)},n}(.85);function gu(e,t,n){e._context.bezierCurveTo(e._x1+e._k*(e._x2-e._x0),e._y1+e._k*(e._y2-e._y0),e._x2+e._k*(e._x1-t),e._y2+e._k*(e._y1-n),e._x2,e._y2)}function bb(e,t){this._context=e,this._k=(1-t)/6}bb.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:gu(this,this._x1,this._y1);break}(this._line||this._line!==0&&this._point===1)&&this._context.closePath(),this._line=1-this._line},point:function(e,t){switch(e=+e,t=+t,this._point){case 0:this._point=1,this._line?this._context.lineTo(e,t):this._context.moveTo(e,t);break;case 1:this._point=2,this._x1=e,this._y1=t;break;case 2:this._point=3;default:gu(this,e,t);break}this._x0=this._x1,this._x1=this._x2,this._x2=e,this._y0=this._y1,this._y1=this._y2,this._y2=t}};var qv=function e(t){function n(r){return new bb(r,t)}return n.tension=function(r){return e(+r)},n}(0);function _b(e,t){this._context=e,this._k=(1-t)/6}_b.prototype={areaStart:ri,areaEnd:ri,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:{this._context.moveTo(this._x3,this._y3),this._context.closePath();break}case 2:{this._context.lineTo(this._x3,this._y3),this._context.closePath();break}case 3:{this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5);break}}},point:function(e,t){switch(e=+e,t=+t,this._point){case 0:this._point=1,this._x3=e,this._y3=t;break;case 1:this._point=2,this._context.moveTo(this._x4=e,this._y4=t);break;case 2:this._point=3,this._x5=e,this._y5=t;break;default:gu(this,e,t);break}this._x0=this._x1,this._x1=this._x2,this._x2=e,this._y0=this._y1,this._y1=this._y2,this._y2=t}};var Wv=function e(t){function n(r){return new _b(r,t)}return n.tension=function(r){return e(+r)},n}(0);function xb(e,t){this._context=e,this._k=(1-t)/6}xb.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){(this._line||this._line!==0&&this._point===3)&&this._context.closePath(),this._line=1-this._line},point:function(e,t){switch(e=+e,t=+t,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:gu(this,e,t);break}this._x0=this._x1,this._x1=this._x2,this._x2=e,this._y0=this._y1,this._y1=this._y2,this._y2=t}};var Gv=function e(t){function n(r){return new xb(r,t)}return n.tension=function(r){return e(+r)},n}(0);function Ph(e,t,n){var r=e._x1,i=e._y1,o=e._x2,s=e._y2;if(e._l01_a>Dv){var a=2*e._l01_2a+3*e._l01_a*e._l12_a+e._l12_2a,l=3*e._l01_a*(e._l01_a+e._l12_a);r=(r*a-e._x0*e._l12_2a+e._x2*e._l01_2a)/l,i=(i*a-e._y0*e._l12_2a+e._y2*e._l01_2a)/l}if(e._l23_a>Dv){var c=2*e._l23_2a+3*e._l23_a*e._l12_a+e._l12_2a,u=3*e._l23_a*(e._l23_a+e._l12_a);o=(o*c+e._x1*e._l23_2a-t*e._l12_2a)/u,s=(s*c+e._y1*e._l23_2a-n*e._l12_2a)/u}e._context.bezierCurveTo(r,i,o,s,e._x2,e._y2)}function ZA(e,t){this._context=e,this._alpha=t}ZA.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:this.point(this._x2,this._y2);break}(this._line||this._line!==0&&this._point===1)&&this._context.closePath(),this._line=1-this._line},point:function(e,t){if(e=+e,t=+t,this._point){var n=this._x2-e,r=this._y2-t;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(n*n+r*r,this._alpha))}switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(e,t):this._context.moveTo(e,t);break;case 1:this._point=2;break;case 2:this._point=3;default:Ph(this,e,t);break}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=e,this._y0=this._y1,this._y1=this._y2,this._y2=t}};var Hv=function e(t){function n(r){return t?new ZA(r,t):new bb(r,0)}return n.alpha=function(r){return e(+r)},n}(.5);function KA(e,t){this._context=e,this._alpha=t}KA.prototype={areaStart:ri,areaEnd:ri,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 1:{this._context.moveTo(this._x3,this._y3),this._context.closePath();break}case 2:{this._context.lineTo(this._x3,this._y3),this._context.closePath();break}case 3:{this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5);break}}},point:function(e,t){if(e=+e,t=+t,this._point){var n=this._x2-e,r=this._y2-t;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(n*n+r*r,this._alpha))}switch(this._point){case 0:this._point=1,this._x3=e,this._y3=t;break;case 1:this._point=2,this._context.moveTo(this._x4=e,this._y4=t);break;case 2:this._point=3,this._x5=e,this._y5=t;break;default:Ph(this,e,t);break}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=e,this._y0=this._y1,this._y1=this._y2,this._y2=t}};var Xv=function e(t){function n(r){return t?new KA(r,t):new _b(r,0)}return n.alpha=function(r){return e(+r)},n}(.5);function QA(e,t){this._context=e,this._alpha=t}QA.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){(this._line||this._line!==0&&this._point===3)&&this._context.closePath(),this._line=1-this._line},point:function(e,t){if(e=+e,t=+t,this._point){var n=this._x2-e,r=this._y2-t;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(n*n+r*r,this._alpha))}switch(this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:Ph(this,e,t);break}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=e,this._y0=this._y1,this._y1=this._y2,this._y2=t}};var Zv=function e(t){function n(r){return t?new QA(r,t):new xb(r,0)}return n.alpha=function(r){return e(+r)},n}(.5);function JA(e){this._context=e}JA.prototype={areaStart:ri,areaEnd:ri,lineStart:function(){this._point=0},lineEnd:function(){this._point&&this._context.closePath()},point:function(e,t){e=+e,t=+t,this._point?this._context.lineTo(e,t):(this._point=1,this._context.moveTo(e,t))}};function Kv(e){return new JA(e)}function t4(e){return e<0?-1:1}function e4(e,t,n){var r=e._x1-e._x0,i=t-e._x1,o=(e._y1-e._y0)/(r||i<0&&-0),s=(n-e._y1)/(i||r<0&&-0),a=(o*i+s*r)/(r+i);return(t4(o)+t4(s))*Math.min(Math.abs(o),Math.abs(s),.5*Math.abs(a))||0}function n4(e,t){var n=e._x1-e._x0;return n?(3*(e._y1-e._y0)/n-t)/2:t}function Qv(e,t,n){var r=e._x0,i=e._y0,o=e._x1,s=e._y1,a=(o-r)/3;e._context.bezierCurveTo(r+a,i+a*t,o-a,s-a*n,o,s)}function wb(e){this._context=e}wb.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=this._t0=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x1,this._y1);break;case 3:Qv(this,this._t0,n4(this,this._t0));break}(this._line||this._line!==0&&this._point===1)&&this._context.closePath(),this._line=1-this._line},point:function(e,t){var n=NaN;if(e=+e,t=+t,!(e===this._x1&&t===this._y1)){switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(e,t):this._context.moveTo(e,t);break;case 1:this._point=2;break;case 2:this._point=3,Qv(this,n4(this,n=e4(this,e,t)),n);break;default:Qv(this,this._t0,n=e4(this,e,t));break}this._x0=this._x1,this._x1=e,this._y0=this._y1,this._y1=t,this._t0=n}}};function r4(e){this._context=new i4(e)}(r4.prototype=Object.create(wb.prototype)).point=function(e,t){wb.prototype.point.call(this,t,e)};function i4(e){this._context=e}i4.prototype={moveTo:function(e,t){this._context.moveTo(t,e)},closePath:function(){this._context.closePath()},lineTo:function(e,t){this._context.lineTo(t,e)},bezierCurveTo:function(e,t,n,r,i,o){this._context.bezierCurveTo(t,e,r,n,o,i)}};function Jv(e){return new wb(e)}function t2(e){return new r4(e)}function s4(e){this._context=e}s4.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=[],this._y=[]},lineEnd:function(){var e=this._x,t=this._y,n=e.length;if(n)if(this._line?this._context.lineTo(e[0],t[0]):this._context.moveTo(e[0],t[0]),n===2)this._context.lineTo(e[1],t[1]);else for(var r=o4(e),i=o4(t),o=0,s=1;s<n;++o,++s)this._context.bezierCurveTo(r[0][o],i[0][o],r[1][o],i[1][o],e[s],t[s]);(this._line||this._line!==0&&n===1)&&this._context.closePath(),this._line=1-this._line,this._x=this._y=null},point:function(e,t){this._x.push(+e),this._y.push(+t)}};function o4(e){var t,n=e.length-1,r,i=new Array(n),o=new Array(n),s=new Array(n);for(i[0]=0,o[0]=2,s[0]=e[0]+2*e[1],t=1;t<n-1;++t)i[t]=1,o[t]=4,s[t]=4*e[t]+2*e[t+1];for(i[n-1]=2,o[n-1]=7,s[n-1]=8*e[n-1]+e[n],t=1;t<n;++t)r=i[t]/o[t-1],o[t]-=r,s[t]-=r*s[t-1];for(i[n-1]=s[n-1]/o[n-1],t=n-2;t>=0;--t)i[t]=(s[t]-i[t+1])/o[t];for(o[n-1]=(e[n]+i[n-1])/2,t=0;t<n-1;++t)o[t]=2*e[t+1]-i[t+1];return[i,o]}function e2(e){return new s4(e)}function vb(e,t){this._context=e,this._t=t}vb.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=this._y=NaN,this._point=0},lineEnd:function(){0<this._t&&this._t<1&&this._point===2&&this._context.lineTo(this._x,this._y),(this._line||this._line!==0&&this._point===1)&&this._context.closePath(),this._line>=0&&(this._t=1-this._t,this._line=1-this._line)},point:function(e,t){switch(e=+e,t=+t,this._point){case 0:this._point=1,this._line?this._context.lineTo(e,t):this._context.moveTo(e,t);break;case 1:this._point=2;default:{if(this._t<=0)this._context.lineTo(this._x,t),this._context.lineTo(e,t);else{var n=this._x*(1-this._t)+e*this._t;this._context.lineTo(n,this._y),this._context.lineTo(n,t)}break}}this._x=e,this._y=t}};function n2(e){return new vb(e,.5)}function r2(e){return new vb(e,0)}function i2(e){return new vb(e,1)}function ca(e,t,n){this.k=e,this.x=t,this.y=n}ca.prototype={constructor:ca,scale:function(e){return e===1?this:new ca(this.k*e,this.x,this.y)},translate:function(e,t){return e===0&t===0?this:new ca(this.k,this.x+this.k*e,this.y+this.k*t)},apply:function(e){return[e[0]*this.k+this.x,e[1]*this.k+this.y]},applyX:function(e){return e*this.k+this.x},applyY:function(e){return e*this.k+this.y},invert:function(e){return[(e[0]-this.x)/this.k,(e[1]-this.y)/this.k]},invertX:function(e){return(e-this.x)/this.k},invertY:function(e){return(e-this.y)/this.k},rescaleX:function(e){return e.copy().domain(e.range().map(this.invertX,this).map(e.invert,e))},rescaleY:function(e){return e.copy().domain(e.range().map(this.invertY,this).map(e.invert,e))},toString:function(){return"translate("+this.x+","+this.y+") scale("+this.k+")"}};var o2=new ca(1,0,0);s2.prototype=ca.prototype;function s2(e){for(;!e.__zoom;)if(!(e=e.parentNode))return o2;return e.__zoom}function Be(e){return e!=null&&!Number.isNaN(e)}function fn(e,t){return+Be(t)-+Be(e)||Ut(e,t)}function Nl(e,t){return+Be(t)-+Be(e)||Xn(e,t)}function Uh(e){return e!=null&&`${e}`!=""}function bu(e){return isFinite(e)?e:NaN}function sr(e){return e>0&&isFinite(e)?e:NaN}function ua(e){return e<0&&isFinite(e)?e:NaN}function Sb(e,t){if(e instanceof Date||(e=new Date(+e)),isNaN(e))return typeof t=="function"?t(e):t;let n=e.getUTCHours(),r=e.getUTCMinutes(),i=e.getUTCSeconds(),o=e.getUTCMilliseconds();return`${JP(e.getUTCFullYear(),4)}-${us(e.getUTCMonth()+1,2)}-${us(e.getUTCDate(),2)}${n||r||i||o?`T${us(n,2)}:${us(r,2)}${i||o?`:${us(i,2)}${o?`.${us(o,3)}`:""}`:""}Z`:""}`}function JP(e){return e<0?`-${us(-e,6)}`:e>9999?`+${us(e,6)}`:us(e,4)}function us(e,t){return`${e}`.padStart(t,"0")}var tU=/^(?:[-+]\d{2})?\d{4}(?:-\d{2}(?:-\d{2})?)?(?:T\d{2}:\d{2}(?::\d{2}(?:\.\d{3})?)?(?:Z|[-+]\d{2}:?\d{2})?)?$/;function $h(e,t){return tU.test(e+="")?new Date(e):typeof t=="function"?t(e):t}var xu=1e3,Ol=xu*60,Cl=Ol*60,fs=Cl*24,mo=fs*7,Bl=fs*30,fa=fs*365,a2=[["millisecond",1],["2 milliseconds",2],["5 milliseconds",5],["10 milliseconds",10],["20 milliseconds",20],["50 milliseconds",50],["100 milliseconds",100],["200 milliseconds",200],["500 milliseconds",500],["second",xu],["5 seconds",5*xu],["15 seconds",15*xu],["30 seconds",30*xu],["minute",Ol],["5 minutes",5*Ol],["15 minutes",15*Ol],["30 minutes",30*Ol],["hour",Cl],["3 hours",3*Cl],["6 hours",6*Cl],["12 hours",12*Cl],["day",fs],["2 days",2*fs],["week",mo],["2 weeks",2*mo],["month",Bl],["3 months",3*Bl],["6 months",6*Bl],["year",fa],["2 years",2*fa],["5 years",5*fa],["10 years",10*fa],["20 years",20*fa],["50 years",50*fa],["100 years",100*fa]],l2=new Map([["second",xu],["minute",Ol],["hour",Cl],["day",fs],["monday",mo],["tuesday",mo],["wednesday",mo],["thursday",mo],["friday",mo],["saturday",mo],["sunday",mo],["week",mo],["month",Bl],["year",fa]]),l4=new Map([["second",Fn],["minute",oa],["hour",sa],["day",ti],["monday",aa],["tuesday",zy],["wednesday",Vy],["thursday",fo],["friday",jy],["saturday",Yy],["sunday",Br],["week",Br],["month",ss],["year",zn]]),c4=new Map([["second",Fn],["minute",is],["hour",os],["day",Ml],["monday",la],["tuesday",qy],["wednesday",Wy],["thursday",ho],["friday",Gy],["saturday",Hy],["sunday",Dr],["week",Dr],["month",as],["year",Vn]]),wu=Symbol("intervalDuration"),Tb=Symbol("intervalType");for(let[e,t]of l4)t[wu]=l2.get(e),t[Tb]="time";for(let[e,t]of c4)t[wu]=l2.get(e),t[Tb]="utc";var eU=[["year",Vn,"utc"],["year",zn,"time"],["month",as,"utc"],["month",ss,"time"],["day",Ml,"utc",6*Bl],["day",ti,"time",6*Bl],["hour",os,"utc",3*fs],["minute",is,"utc",6*Cl],["second",Fn,"utc",30*Ol]];function u4(e,t,n){let r=`${e}`.toLowerCase();r.endsWith("s")&&(r=r.slice(0,-1));let i=1,o=/^(?:(\d+)\s+)/.exec(r);switch(o&&(r=r.slice(o[0].length),i=+o[1]),r){case"quarter":r="month",i*=3;break;case"half":r="month",i*=6;break}let s=t.get(r);if(!s)throw new Error(`unknown interval: ${e}`);if(i>1){if(!s.every)throw new Error(`non-periodic interval: ${r}`);s=s.every(i),s[wu]=l2.get(r)*i,s[Tb]=n}return s}function c2(e){return u4(e,l4,"time")}function zh(e){return u4(e,c4,"utc")}function u2(e,t){if(!(t>1))return;let n=e[wu];if(!a2.some(([,i])=>i===n)||n%fs===0&&fs<n&&n<Bl)return;let[r]=a2[Go(([,i])=>Math.log(i)).center(a2,Math.log(n*t))];return(e[Tb]==="time"?c2:zh)(r)}function a4(e,t,n){let r=t==="time"?cu:po;if(n==null)return r(e==="year"?"%Y":e==="month"?"%Y-%m":e==="day"?"%Y-%m-%d":e==="hour"||e==="minute"?"%Y-%m-%dT%H:%M":e==="second"?"%Y-%m-%dT%H:%M:%S":"%Y-%m-%dT%H:%M:%S.%L");let i=nU(n);switch(e){case"millisecond":return _u(r(".%L"),r(":%M:%S"),i);case"second":return _u(r(":%S"),r("%-I:%M"),i);case"minute":return _u(r("%-I:%M"),r("%p"),i);case"hour":return _u(r("%-I %p"),r("%b %-d"),i);case"day":return _u(r("%-d"),r("%b"),i);case"month":return _u(r("%b"),r("%Y"),i);case"year":return r("%Y")}throw new Error("unable to format time ticks")}function nU(e){return e==="left"||e==="right"?(t,n)=>`
${t}
${n}`:e==="top"?(t,n)=>`${n}
${t}`:(t,n)=>`${t}
${n}`}function f4(e,t){let n=Jt(I0(e,(r,i)=>Math.abs(i-r)));if(n<1e3)return a4("millisecond","utc",t);for(let[r,i,o,s]of eU){if(n>s||r==="hour"&&!n)break;if(e.every(a=>i.floor(a)>=a))return a4(r,o,t)}}function _u(e,t,n){return(r,i,o)=>{let s=e(r,i),a=t(r,i),l=i-ds(o);return i!==l&&o[l]!==void 0&&a===t(o[l],l)?s:n(s,a)}}var Dl=Object.getPrototypeOf(Uint8Array),rU=Object.prototype.toString,f2=Symbol("reindex");function st(e,t,n){let r=typeof t;return r==="string"?d4(e,d2(t),n):r==="function"?d4(e,t,n):r==="number"||t instanceof Date||r==="boolean"?Pt(e,dn(t),n):typeof t?.transform=="function"?h4(t.transform(e),n):iU(h4(t,n),e?.[f2])}function iU(e,t){return t?jh(e,t):e}function d4(e,t,n){return Pt(e,n?.prototype instanceof Dl?oU(t):t,n)}function h4(e,t){return t===void 0?Re(e):e instanceof t?e:t.prototype instanceof Dl&&!(e instanceof Dl)?t.from(e,h2):t.from(e)}function oU(e){return(t,n)=>h2(e(t,n))}var da=[null],d2=e=>t=>t[e],Ae={transform:ar},Y={transform:e=>e};var Vh=()=>1,p4=()=>!0,Le=e=>e==null?e:`${e}`,bt=e=>e==null?e:+e;var hs=e=>e?e[0]:void 0,ha=e=>e?e[1]:void 0,m4=e=>e?e[2]:void 0,dn=e=>()=>e;function vu(e){let t=+`${e}`.slice(1)/100;return(n,r)=>Kn(n,t,r)}function He(e){return e instanceof Dl?e:Pt(e,h2,Float64Array)}function h2(e){return e==null?NaN:Number(e)}function y4(e){return Pt(e,p2)}function p2(e){return e instanceof Date&&!isNaN(e)?e:typeof e=="string"?$h(e):e==null||isNaN(e=+e)?void 0:new Date(e)}function De(e,t){return e===void 0&&(e=t),e===null?[void 0,"none"]:ya(e)?[void 0,e]:[e,void 0]}function Kt(e,t){return e===void 0&&(e=t),e===null||typeof e=="number"?[void 0,e]:[e,void 0]}function m2(e,t,n){if(e!=null)return Xe(e,t,n)}function Xe(e,t,n){let r=`${e}`.toLowerCase();if(!n.includes(r))throw new Error(`invalid ${t}: ${e}`);return r}function Re(e){return e==null||e instanceof Array||e instanceof Dl?e:Array.from(e)}function Pt(e,t,n=Array){return e==null?e:e instanceof n?e.map(t):n.from(e,t)}function pa(e,t=Array){return e instanceof t?e.slice():t.from(e)}function y2({x:e,x1:t,x2:n}){return e!==void 0||t!==void 0||n!==void 0}function g2({y:e,y1:t,y2:n}){return e!==void 0||t!==void 0||n!==void 0}function Su(e){return y2(e)||g2(e)||e.interval!==void 0}function hn(e){return e?.toString===rU}function yo(e){return hn(e)&&(e.type!==void 0||e.domain!==void 0)}function Lr(e){return hn(e)&&typeof e.transform!="function"}function go(e){return Lr(e)&&e.value===void 0&&e.channel===void 0}function b2(e,t,n,r=Y){return t===void 0&&n===void 0?(t=0,n=e===void 0?r:e):t===void 0?t=e===void 0?0:e:n===void 0&&(n=e===void 0?0:e),[t,n]}function Fe(e,t){return e===void 0&&t===void 0?[hs,ha]:[e,t]}function jn({z:e,fill:t,stroke:n}={}){return e===void 0&&([e]=De(t)),e===void 0&&([e]=De(n)),e}function ar(e){let t=e.length,n=new Uint32Array(t);for(let r=0;r<t;++r)n[r]=r;return n}function jh(e,t){return Pt(t,n=>e[n],e.constructor)}function Tu(e){return e.length===1?(t,n)=>e(jh(n,t)):e}function ps(e,t,n){return e.subarray?e.subarray(t,n):e.slice(t,n)}function ms(e){return e!==null&&typeof e=="object"?e.valueOf():e}function Ib(e,t){if(t[e]!==void 0)return t[e];switch(e){case"x1":case"x2":e="x";break;case"y1":case"y2":e="y";break}return t[e]}function pn(e){let t;return[{transform:()=>t,label:lr(e)},n=>t=n]}function kn(e){return e==null?[e]:pn(e)}function lr(e,t){return typeof e=="string"?e:e&&e.label!==void 0?e.label:t}function Iu(e,t){return{transform(n){let r=e.transform(n),i=t.transform(n);return Se(r)||Se(i)?Pt(r,(o,s)=>new Date((+r[s]+ +i[s])/2)):Pt(r,(o,s)=>(+r[s]+ +i[s])/2,Float64Array)},label:e.label}}function Ll(e,t){let n=_2(t?.interval,t?.type);return n?Pt(e,n):e}function _2(e,t){let n=Eb(e,t);return n&&(r=>Be(r)?n.floor(r):r)}function Eb(e,t){if(e!=null){if(typeof e=="number"){0<e&&e<1&&Number.isInteger(1/e)&&(e=-1/e);let n=Math.abs(e);return e<0?{floor:r=>Math.floor(r*n)/n,offset:r=>(r*n+1)/n,range:(r,i)=>Ke(Math.ceil(r*n),i*n).map(o=>o/n)}:{floor:r=>Math.floor(r/n)*n,offset:r=>r+n,range:(r,i)=>Ke(Math.ceil(r/n),i/n).map(o=>o*n)}}if(typeof e=="string")return(t==="time"?c2:zh)(e);if(typeof e.floor!="function")throw new Error("invalid interval; missing floor method");if(typeof e.offset!="function")throw new Error("invalid interval; missing offset method");return e}}function bo(e,t){if(e=Eb(e,t),e&&typeof e.range!="function")throw new Error("invalid interval: missing range method");return e}function g4(e,t){if(e=bo(e,t),e&&typeof e.ceil!="function")throw new Error("invalid interval: missing ceil method");return e}function b4(e){return ma(e)&&typeof e?.floor=="function"&&e.floor()instanceof Date}function ma(e){return typeof e?.range=="function"}function _o(e){return e===void 0||Lr(e)?e:{value:e}}function _4(e){return e==null?null:{transform:t=>st(t,e,Float64Array),label:lr(e)}}function x4(e){if(!cr(e))return!1;for(let t of e)if(t!=null)return typeof t=="object"&&"0"in t&&"1"in t}function cr(e){return e&&typeof e[Symbol.iterator]=="function"}function Mb(e){for(let t of e)if(t!=null)return typeof t!="object"||t instanceof Date}function _e(e){for(let t of e){if(t==null)continue;let n=typeof t;return n==="string"||n==="boolean"}}function Se(e){for(let t of e)if(t!=null)return t instanceof Date}function w4(e){for(let t of e)if(t!=null)return typeof t=="string"&&isNaN(t)&&$h(t)}function v4(e){for(let t of e)if(t!=null){if(typeof t!="string")return!1;if(!!t.trim())return!isNaN(t)}}function ys(e){for(let t of e)if(t!=null)return typeof t=="number"}function Ab(e,t){let n;for(let r of e)if(r!=null){if(!t(r))return!1;n=!0}return n}var sU=new Set("none,currentcolor,transparent,aliceblue,antiquewhite,aqua,aquamarine,azure,beige,bisque,black,blanchedalmond,blue,blueviolet,brown,burlywood,cadetblue,chartreuse,chocolate,coral,cornflowerblue,cornsilk,crimson,cyan,darkblue,darkcyan,darkgoldenrod,darkgray,darkgreen,darkgrey,darkkhaki,darkmagenta,darkolivegreen,darkorange,darkorchid,darkred,darksalmon,darkseagreen,darkslateblue,darkslategray,darkslategrey,darkturquoise,darkviolet,deeppink,deepskyblue,dimgray,dimgrey,dodgerblue,firebrick,floralwhite,forestgreen,fuchsia,gainsboro,ghostwhite,gold,goldenrod,gray,green,greenyellow,grey,honeydew,hotpink,indianred,indigo,ivory,khaki,lavender,lavenderblush,lawngreen,lemonchiffon,lightblue,lightcoral,lightcyan,lightgoldenrodyellow,lightgray,lightgreen,lightgrey,lightpink,lightsalmon,lightseagreen,lightskyblue,lightslategray,lightslategrey,lightsteelblue,lightyellow,lime,limegreen,linen,magenta,maroon,mediumaquamarine,mediumblue,mediumorchid,mediumpurple,mediumseagreen,mediumslateblue,mediumspringgreen,mediumturquoise,mediumvioletred,midnightblue,mintcream,mistyrose,moccasin,navajowhite,navy,oldlace,olive,olivedrab,orange,orangered,orchid,palegoldenrod,palegreen,paleturquoise,palevioletred,papayawhip,peachpuff,peru,pink,plum,powderblue,purple,rebeccapurple,red,rosybrown,royalblue,saddlebrown,salmon,sandybrown,seagreen,seashell,sienna,silver,skyblue,slateblue,slategray,slategrey,snow,springgreen,steelblue,tan,teal,thistle,tomato,turquoise,violet,wheat,white,whitesmoke,yellow".split(","));function ya(e){return typeof e!="string"?!1:(e=e.toLowerCase().trim(),/^#[0-9a-f]{3,8}$/.test(e)||/^(?:url|var|rgb|rgba|hsl|hsla|hwb|lab|lch|oklab|oklch|color|color-mix)\(.*\)$/.test(e)||sU.has(e))}function S4(e){return typeof e=="number"&&(0<=e&&e<=1||isNaN(e))}function ne(e){return e==null||gs(e)}function gs(e){return/^\s*none\s*$/i.test(e)}function T4(e){return/^\s*round\s*$/i.test(e)}function x2(e,t){return m2(e,t,["middle","top-left","top","top-right","right","bottom-right","bottom","bottom-left","left"])}function xo(e="middle"){return x2(e,"frameAnchor")}function ds(e){if(e==null)return;let t=e[0],n=e[e.length-1];return Xn(t,n)}function I4(e={},...t){let n=e;for(let r of t)for(let i in r)if(n[i]===void 0){let o=r[i];n===e?n={...n,[i]:o}:n[i]=o}return n}function aU(e){console.warn("named iterables are deprecated; please use an object instead");let t=new Set;return Object.fromEntries(Array.from(e,n=>{let{name:r}=n;if(r==null)throw new Error("missing name");let i=`${r}`;if(i==="__proto__")throw new Error(`illegal name: ${i}`);if(t.has(i))throw new Error(`duplicate name: ${i}`);return t.add(i),[r,n]}))}function Yh(e){return cr(e)?aU(e):e}var ii=Symbol("position"),Rr=Symbol("color"),Rl=Symbol("radius"),Pl=Symbol("length"),Ul=Symbol("opacity"),Eu=Symbol("symbol"),E4=Symbol("projection"),re=new Map([["x",ii],["y",ii],["fx",ii],["fy",ii],["r",Rl],["color",Rr],["opacity",Ul],["symbol",Eu],["length",Pl],["projection",E4]]);function M4(e){return e===ii||e===E4}function A4(e){return e===ii||e===Rl||e===Pl||e===Ul}var w2=Math.sqrt(3),v2=2/w2,lU={draw(e,t){let n=Math.sqrt(t/Math.PI),r=n*v2,i=r/2;e.moveTo(0,r),e.lineTo(n,i),e.lineTo(n,-i),e.lineTo(0,-r),e.lineTo(-n,-i),e.lineTo(-n,i),e.closePath()}},S2=new Map([["asterisk",Eh],["circle",cs],["cross",Mh],["diamond",Ah],["diamond2",Fh],["hexagon",lU],["plus",kh],["square",Nh],["square2",Oh],["star",Ch],["times",mu],["triangle",Bh],["triangle2",Dh],["wye",Lh]]);function T2(e){return e&&typeof e.draw=="function"}function F4(e){return T2(e)?!0:typeof e!="string"?!1:S2.has(e.toLowerCase())}function Mu(e){if(e==null||T2(e))return e;let t=S2.get(`${e}`.toLowerCase());if(t)return t;throw new Error(`invalid symbol: ${e}`)}function k4(e){if(e==null||T2(e))return[void 0,e];if(typeof e=="string"){let t=S2.get(`${e}`.toLowerCase());if(t)return[void 0,t]}return[e,void 0]}function mn({filter:e,sort:t,reverse:n,transform:r,initializer:i,...o}={},s){if(r===void 0&&(e!=null&&(r=M2(e)),t!=null&&!go(t)&&(r=I2(r,F2(t))),n&&(r=I2(r,A2))),s!=null&&i!=null)throw new Error("transforms cannot be applied after initializers");return{...o,...(t===null||go(t))&&{sort:t},transform:I2(r,s)}}function ye({filter:e,sort:t,reverse:n,initializer:r,...i}={},o){return r===void 0&&(e!=null&&(r=M2(e)),t!=null&&!go(t)&&(r=E2(r,F2(t))),n&&(r=E2(r,A2))),{...i,...(t===null||go(t))&&{sort:t},initializer:E2(r,o)}}function I2(e,t){return e==null?t===null?void 0:t:t==null?e===null?void 0:e:function(n,r,i){return{data:n,facets:r}=e.call(this,n,r,i),t.call(this,Re(n),r,i)}}function E2(e,t){return e==null?t===null?void 0:t:t==null?e===null?void 0:e:function(n,r,i,...o){let s,a,l,c,u,d;return{data:a=n,facets:l=r,channels:s}=e.call(this,n,r,i,...o),{data:u=a,facets:d=l,channels:c}=t.call(this,a,l,{...i,...s},...o),{data:u,facets:d,channels:{...s,...c}}}}function Fb(e,t){return(e.initializer!=null?ye:mn)(e,t)}function N4(e,t){return Fb(t,M2(e))}function M2(e){return(t,n)=>{let r=st(t,e);return{data:t,facets:n.map(i=>i.filter(o=>r[o]))}}}function O4({sort:e,...t}={}){return{...Fb(t,A2),sort:go(e)?e:null}}function A2(e,t){return{data:e,facets:t.map(n=>n.slice().reverse())}}function C4({seed:e,sort:t,...n}={}){return{...Fb(n,B4(e==null?Math.random:xl(e))),sort:go(t)?t:null}}function kb(e,{sort:t,...n}={}){return{...(Lr(e)&&e.channel!==void 0?ye:Fb)(n,F2(e)),sort:go(t)?t:null}}function F2(e){return(typeof e=="function"&&e.length!==1?cU:B4)(e)}function cU(e){return(t,n)=>{let r=(i,o)=>e(t[i],t[o]);return{data:t,facets:n.map(i=>i.slice().sort(r))}}}function B4(e){let t,n;({channel:t,value:e,order:n}={..._o(e)});let r=t?.startsWith("-");if(r&&(t=t.slice(1)),n===void 0&&(n=r?Nl:fn),typeof n!="function")switch(`${n}`.toLowerCase()){case"ascending":n=fn;break;case"descending":n=Nl;break;default:throw new Error(`invalid order: ${n}`)}return(i,o,s)=>{let a;if(t===void 0)a=st(i,e);else{if(s===void 0)throw new Error("channel sort requires an initializer");if(a=s[t],!a)return{};a=a.value}let l=(c,u)=>n(a[c],a[u]);return{data:i,facets:o.map(c=>c.slice().sort(l))}}}function Wh(e,t){return Nb(null,null,e,t)}function ba(e={y:"count"},t={}){let{x:n=Y}=t;if(n==null)throw new Error("missing channel: x");return Nb(n,null,e,t)}function _a(e={x:"count"},t={}){let{y:n=Y}=t;if(n==null)throw new Error("missing channel: y");return Nb(null,n,e,t)}function Gh(e={fill:"count"},t={}){let{x:n,y:r}=t;if([n,r]=Fe(n,r),n==null)throw new Error("missing channel: x");if(r==null)throw new Error("missing channel: y");return Nb(n,r,e,t)}function Nb(e,t,{data:n=Bb,filter:r,sort:i,reverse:o,...s}={},a={}){s=Hh(s,a),n=Au(n,Y),i=i==null?void 0:Ob("sort",i,a),r=r==null?void 0:Cb("filter",r,a);let[l,c]=kn(e),[u,d]=kn(t),{z:f,fill:h,stroke:p,x1:m,x2:g,y1:b,y2:y,...x}=a,[_,v]=kn(f),[w]=De(h),[T]=De(p),[M,F]=kn(w),[S,I]=kn(T);return{..."z"in a&&{z:_||f},..."fill"in a&&{fill:M||h},..."stroke"in a&&{stroke:S||p},...mn(x,(k,O,N)=>{let A=Ll(st(k,e),N?.x),C=Ll(st(k,t),N?.y),L=st(k,f),U=st(k,w),B=st(k,T),$=Xh(s,{z:L,fill:U,stroke:B}),V=[],z=[],Q=A&&c([]),Ft=C&&d([]),ft=L&&v([]),ht=U&&F([]),G=B&&I([]),ct=0;for(let R of s)R.initialize(k);i&&i.initialize(k),r&&r.initialize(k);for(let R of O){let Z=[];for(let K of s)K.scope("facet",R);i&&i.scope("facet",R),r&&r.scope("facet",R);for(let[K,D]of ga(R,$))for(let[$t,ot]of ga(D,C))for(let[qt,Zt]of ga(ot,A))if(!(r&&!r.reduce(Zt))){Z.push(ct++),z.push(n.reduceIndex(Zt,k)),A&&Q.push(qt),C&&Ft.push($t),L&&ft.push($===L?K:L[Zt[0]]),U&&ht.push($===U?K:U[Zt[0]]),B&&G.push($===B?K:B[Zt[0]]);for(let tn of s)tn.reduce(Zt);i&&i.reduce(Zt)}V.push(Z)}return k2(V,i,o),{data:z,facets:V}}),...!wo(s,"x")&&(l?{x:l}:{x1:m,x2:g}),...!wo(s,"y")&&(u?{y:u}:{y1:b,y2:y}),...Object.fromEntries(s.map(({name:k,output:O})=>[k,O]))}}function wo(e,...t){for(let{name:n}of e)if(t.includes(n))return!0;return!1}function Hh(e,t,n=Ob){let r=Object.entries(e);return t.title!=null&&e.title===void 0&&r.push(["title",pU]),t.href!=null&&e.href===void 0&&r.push(["href",Db]),r.filter(([,i])=>i!==void 0).map(([i,o])=>o===null?uU(i):n(i,o,t))}function Ob(e,t,n,r=Cb){let i;hn(t)&&"reduce"in t&&(i=t.scale,t=t.reduce);let o=r(e,t,n),[s,a]=pn(o.label),l;return{name:e,output:i===void 0?s:{value:s,scale:i},initialize(c){o.initialize(c),l=a([])},scope(c,u){o.scope(c,u)},reduce(c,u){l.push(o.reduce(c,u))}}}function uU(e){return{name:e,initialize(){},scope(){},reduce(){}}}function Cb(e,t,n,r=Au){let i=Ib(e,n),o=r(t,i),s,a;return{label:lr(o===qh?null:i,o.label),initialize(l){s=i===void 0?l:st(l,i),o.scope==="data"&&(a=o.reduceIndex(ar(l),s))},scope(l,c){o.scope===l&&(a=o.reduceIndex(c,s))},reduce(l,c){return o.scope==null?o.reduceIndex(l,s,c):o.reduceIndex(l,s,a,c)}}}function ga(e,t){return t?Ki(ln(e,n=>t[n]),hs):[[,e]]}function Au(e,t,n=fU){if(e==null)return n(e);if(typeof e.reduceIndex=="function")return e;if(typeof e.reduce=="function"&&hn(e))return dU(e);if(typeof e=="function")return hU(e);if(/^p\d{2}$/i.test(e))return bs(vu(e));switch(`${e}`.toLowerCase()){case"first":return Db;case"last":return mU;case"identity":return Bb;case"count":return qh;case"distinct":return yU;case"sum":return t==null?qh:gU;case"proportion":return L4(t,"data");case"proportion-facet":return L4(t,"facet");case"deviation":return bs(Hr);case"min":return bs(ge);case"min-index":return bs(v0);case"max":return bs(Jt);case"max-index":return bs(w0);case"mean":return D4(Zo);case"median":return D4(Si);case"variance":return bs(qs);case"mode":return bs(Dc)}return n(e)}function fU(e){throw new Error(`invalid reduce: ${e}`)}function Xh(e,t){for(let n in t){let r=t[n];if(r!==void 0&&!e.some(i=>i.name===n))return r}}function k2(e,t,n){if(t){let r=t.output.transform(),i=(o,s)=>fn(r[o],r[s]);e.forEach(o=>o.sort(i))}n&&e.forEach(r=>r.reverse())}function dU(e){return console.warn("deprecated reduce interface; implement reduceIndex instead."),{...e,reduceIndex:e.reduce.bind(e)}}function hU(e){return{reduceIndex(t,n,r){return e(jh(n,t),r)}}}function bs(e){return{reduceIndex(t,n){return e(t,r=>n[r])}}}function D4(e){return{reduceIndex(t,n){let r=e(t,i=>n[i]);return Se(n)?new Date(r):r}}}var Bb={reduceIndex(e,t){return jh(t,e)}},Db={reduceIndex(e,t){return t[e[0]]}},pU={reduceIndex(e,t){let r=Ki(vi(e,o=>o.length,o=>t[o]),ha),i=r.slice(-5).reverse();if(i.length<r.length){let o=r.slice(0,-4);i[5-1]=[`\u2026 ${o.length.toLocaleString("en-US")} more`,In(o,ha)]}return i.map(([o,s])=>`${o} (${s.toLocaleString("en-US")})`).join(`
`)}},mU={reduceIndex(e,t){return t[e[e.length-1]]}},qh={label:"Frequency",reduceIndex(e){return e.length}},yU={label:"Distinct",reduceIndex(e,t){let n=new Or;for(let r of e)n.add(t[r]);return n.size}},gU=bs(In);function L4(e,t){return e==null?{scope:t,label:"Frequency",reduceIndex:(n,r,i=1)=>n.length/i}:{scope:t,reduceIndex:(n,r,i=1)=>In(n,o=>r[o])/i}}function Fu(e,{scale:t,type:n,value:r,filter:i,hint:o,label:s=lr(r)},a){return o===void 0&&typeof r?.transform=="function"&&(o=r.hint),O2(a,{scale:t,type:n,value:st(e,r),label:s,filter:i,hint:o})}function Lb(e,t){return Object.fromEntries(Object.entries(e).map(([n,r])=>[n,Fu(t,r,n)]))}function ku(e,t){let n=Object.fromEntries(Object.entries(e).map(([r,{scale:i,value:o}])=>{let s=i==null?null:t[i];return[r,s==null?o:Pt(o,s)]}));return n.channels=e,n}function O2(e,t){let{scale:n,value:r}=t;if(n===!0||n==="auto")switch(e){case"fill":case"stroke":case"color":t.scale=n!==!0&&Ab(r,ya)?null:"color";break;case"fillOpacity":case"strokeOpacity":case"opacity":t.scale=n!==!0&&Ab(r,S4)?null:"opacity";break;case"symbol":n!==!0&&Ab(r,F4)?(t.scale=null,t.value=Pt(r,Mu)):t.scale="symbol";break;default:t.scale=re.has(e)?e:null;break}else if(n===!1)t.scale=null;else if(n!=null&&!re.has(n))throw new Error(`unknown scale: ${n}`);return t}function P4(e,t,n,r,i){let{order:o,reverse:s,reduce:a=!0,limit:l}=i;for(let c in i){if(!re.has(c))continue;let{value:u,order:d=o,reverse:f=s,reduce:h=a,limit:p=l}=_o(i[c]),m=u?.startsWith("-");if(m&&(u=u.slice(1)),d=d===void 0?m!==(u==="width"||u==="height")?$4:U4:xU(d),h==null||h===!1)continue;let g=c==="fx"||c==="fy"?_U(t,r[c]):bU(n,c);if(!g)throw new Error(`missing channel for scale: ${c}`);let b=g.value,[y=0,x=1/0]=cr(p)?p:p<0?[p]:[0,p];if(u==null)g.domain=()=>{let _=Array.from(new Or(b));return f&&(_=_.reverse()),(y!==0||x!==1/0)&&(_=_.slice(y,x)),_};else{let _=u==="data"?e:u==="height"?R4(n,"y1","y2"):u==="width"?R4(n,"x1","x2"):N2(n,u,u==="y"?"y2":u==="x"?"x2":void 0),v=Au(h===!0?"max":h,_);g.domain=()=>{let w=hx(ar(b),T=>v.reduceIndex(T,_),T=>b[T]);return d&&w.sort(d),f&&w.reverse(),(y!==0||x!==1/0)&&(w=w.slice(y,x)),w.map(hs)}}}}function bU(e,t){for(let n in e){let r=e[n];if(r.scale===t)return r}}function _U(e,t){let n=e.original;if(n===e)return t;let r=t.value,i=t.value=[];for(let o=0;o<n.length;++o){let s=r[n[o][0]];for(let a of e[o])i[a]=s}return t}function R4(e,t,n){let r=N2(e,t),i=N2(e,n);return Pt(i,(o,s)=>Math.abs(o-r[s]),Float64Array)}function N2(e,t,n){let r=e[t];if(!r&&n!==void 0&&(r=e[n]),r)return r.value;throw new Error(`missing channel: ${t}`)}function xU(e){if(e==null||typeof e=="function")return e;switch(`${e}`.toLowerCase()){case"ascending":return U4;case"descending":return $4}throw new Error(`invalid order: ${e}`)}function U4([e,t],[n,r]){return fn(t,r)||fn(e,n)}function $4([e,t],[n,r]){return Nl(t,r)||fn(e,n)}function Zh(e,t){let n=e[t];if(!!n){for(;n.source;)n=n.source;return n.source===null?null:n}}function Rb(e){let t,n;return(...r)=>((n?.length!==r.length||n.some((i,o)=>i!==r[o]))&&(n=r,t=e(...r)),t)}var wU=Rb(e=>new Intl.NumberFormat(e)),vU=Rb((e,t)=>new Intl.DateTimeFormat(e,{timeZone:"UTC",...t&&{month:t}})),SU=Rb((e,t)=>new Intl.DateTimeFormat(e,{timeZone:"UTC",...t&&{weekday:t}}));function TU(e="en-US"){let t=wU(e);return n=>n!=null&&!isNaN(n)?t.format(n):void 0}function z4(e="en-US",t="short"){let n=vU(e,t);return r=>r!=null&&!isNaN(r=+new Date(Date.UTC(2e3,+r)))?n.format(r):void 0}function V4(e="en-US",t="short"){let n=SU(e,t);return r=>r!=null&&!isNaN(r=+new Date(Date.UTC(2001,0,+r)))?n.format(r):void 0}function C2(e){return Sb(e,"Invalid Date")}function IU(e="en-US"){let t=TU(e);return n=>(n instanceof Date?C2:typeof n=="number"?t:Le)(n)}var ki=IU();var B2=0,D2;function j4(){let e=B2;return B2=0,D2=void 0,e}function Yn(e){e!==D2&&(D2=e,console.warn(e),++B2)}var Te=(typeof window<"u"?window.devicePixelRatio>1:typeof it>"u")?0:.5,EU=0;function Y4(){return`plot-clip-${++EU}`}function Pb(e,{title:t,href:n,ariaLabel:r,ariaDescription:i,ariaHidden:o,target:s,fill:a,fillOpacity:l,stroke:c,strokeWidth:u,strokeOpacity:d,strokeLinejoin:f,strokeLinecap:h,strokeMiterlimit:p,strokeDasharray:m,strokeDashoffset:g,opacity:b,mixBlendMode:y,imageFilter:x,paintOrder:_,pointerEvents:v,shapeRendering:w,channels:T},{ariaLabel:M,fill:F="currentColor",fillOpacity:S,stroke:I="none",strokeOpacity:k,strokeWidth:O,strokeLinecap:N,strokeLinejoin:A,strokeMiterlimit:C,paintOrder:L}){F===null&&(a=null,l=null),I===null&&(c=null,d=null),ne(F)?!ne(I)&&(!ne(a)||T?.fill)&&(I="none"):ne(I)&&(!ne(c)||T?.stroke)&&(F="none");let[U,B]=De(a,F),[$,V]=Kt(l,S),[z,Q]=De(c,I),[Ft,ft]=Kt(d,k),[ht,G]=Kt(b);gs(Q)||(u===void 0&&(u=O),h===void 0&&(h=N),f===void 0&&(f=A),p===void 0&&!T4(f)&&(p=C),!gs(B)&&_===void 0&&(_=L));let[ct,R]=Kt(u);return F!==null&&(e.fill=te(B,"currentColor"),e.fillOpacity=Kh(V,1)),I!==null&&(e.stroke=te(Q,"none"),e.strokeWidth=Kh(R,1),e.strokeOpacity=Kh(ft,1),e.strokeLinejoin=te(f,"miter"),e.strokeLinecap=te(h,"butt"),e.strokeMiterlimit=Kh(p,4),e.strokeDasharray=te(m,"none"),e.strokeDashoffset=te(g,"0")),e.target=Le(s),e.ariaLabel=Le(M),e.ariaDescription=Le(i),e.ariaHidden=Le(o),e.opacity=Kh(G,1),e.mixBlendMode=te(y,"normal"),e.imageFilter=te(x,"none"),e.paintOrder=te(_,"normal"),e.pointerEvents=te(v,"auto"),e.shapeRendering=te(w,"auto"),{title:{value:t,optional:!0,filter:null},href:{value:n,optional:!0,filter:null},ariaLabel:{value:r,optional:!0,filter:null},fill:{value:U,scale:"auto",optional:!0},fillOpacity:{value:$,scale:"auto",optional:!0},stroke:{value:z,scale:"auto",optional:!0},strokeOpacity:{value:Ft,scale:"auto",optional:!0},strokeWidth:{value:ct,optional:!0},opacity:{value:ht,scale:"auto",optional:!0}}}function MU(e,t){t&&e.filter(n=>Uh(t[n])).append("title").call(FU,t)}function AU(e,t){t&&e.filter(([n])=>Uh(t[n])).append("title").call(kU,t)}function FU(e,t){t&&e.text(n=>ki(t[n]))}function kU(e,t){t&&e.text(([n])=>ki(t[n]))}function zt(e,{target:t,tip:n},{ariaLabel:r,title:i,fill:o,fillOpacity:s,stroke:a,strokeOpacity:l,strokeWidth:c,opacity:u,href:d}){r&&et(e,"aria-label",f=>r[f]),o&&et(e,"fill",f=>o[f]),s&&et(e,"fill-opacity",f=>s[f]),a&&et(e,"stroke",f=>a[f]),l&&et(e,"stroke-opacity",f=>l[f]),c&&et(e,"stroke-width",f=>c[f]),u&&et(e,"opacity",f=>u[f]),d&&q4(e,f=>d[f],t),n||MU(e,i)}function $l(e,{target:t,tip:n},{ariaLabel:r,title:i,fill:o,fillOpacity:s,stroke:a,strokeOpacity:l,strokeWidth:c,opacity:u,href:d}){r&&et(e,"aria-label",([f])=>r[f]),o&&et(e,"fill",([f])=>o[f]),s&&et(e,"fill-opacity",([f])=>s[f]),a&&et(e,"stroke",([f])=>a[f]),l&&et(e,"stroke-opacity",([f])=>l[f]),c&&et(e,"stroke-width",([f])=>c[f]),u&&et(e,"opacity",([f])=>u[f]),d&&q4(e,([f])=>d[f],t),n||AU(e,i)}function NU({ariaLabel:e,title:t,fill:n,fillOpacity:r,stroke:i,strokeOpacity:o,strokeWidth:s,opacity:a,href:l},{tip:c}){return[e,c?void 0:t,n,r,i,o,s,a,l].filter(u=>u!==void 0)}function Qh(e,t,n){let r=ln(e,i=>t[i]);return n===void 0&&r.size>1+e.length>>1&&Yn("Warning: the implicit z channel has high cardinality. This may occur when the fill or stroke channel is associated with quantitative data rather than ordinal or categorical data. You can suppress this warning by setting the z option explicitly; if this data represents a single series, set z to null."),r.values()}function*Ub(e,t,n,r){let{z:i}=n,{z:o}=r,s=NU(r,n),a=[...t,...s];for(let l of o?Qh(e,o,i):[e]){let c,u;t:for(let d of l){for(let f of a)if(!Be(f[d])){u&&u.push(-1);continue t}if(c===void 0){u&&(yield u),c=s.map(f=>ms(f[d])),u=[d];continue}u.push(d);for(let f=0;f<s.length;++f)if(ms(s[f][d])!==c[f]){yield u,c=s.map(p=>ms(p[d])),u=[d];continue t}}u&&(yield u)}}function $b(e){return e===!0?e="frame":e===!1?e=null:e!=null&&(e=Xe(e,"clip",["frame","sphere"])),e}function OU(e,t,n,r){let i,{clip:o=r.clip}=t;switch(o){case"frame":{let{width:s,height:a,marginLeft:l,marginRight:c,marginTop:u,marginBottom:d}=n,f=Y4();i=`url(#${f})`,e=J("svg:g",r).call(h=>h.append("svg:clipPath").attr("id",f).append("rect").attr("x",l).attr("y",u).attr("width",s-c-l).attr("height",a-u-d)).each(function(){this.appendChild(e.node()),e.node=()=>this});break}case"sphere":{let{projection:s}=r;if(!s)throw new Error('the "sphere" clip option requires a projection');let a=Y4();i=`url(#${a})`,e.append("clipPath").attr("id",a).append("path").attr("d",Mn(s)({type:"Sphere"}));break}}et(e,"aria-label",t.ariaLabel),et(e,"aria-description",t.ariaDescription),et(e,"aria-hidden",t.ariaHidden),et(e,"clip-path",i)}function St(e,t,n,r){OU(e,t,n,r),et(e,"fill",t.fill),et(e,"fill-opacity",t.fillOpacity),et(e,"stroke",t.stroke),et(e,"stroke-width",t.strokeWidth),et(e,"stroke-opacity",t.strokeOpacity),et(e,"stroke-linejoin",t.strokeLinejoin),et(e,"stroke-linecap",t.strokeLinecap),et(e,"stroke-miterlimit",t.strokeMiterlimit),et(e,"stroke-dasharray",t.strokeDasharray),et(e,"stroke-dashoffset",t.strokeDashoffset),et(e,"shape-rendering",t.shapeRendering),et(e,"filter",t.imageFilter),et(e,"paint-order",t.paintOrder);let{pointerEvents:i=r.pointerSticky===!1?"none":void 0}=t;et(e,"pointer-events",i)}function _t(e,t){CU(e,"mix-blend-mode",t.mixBlendMode),et(e,"opacity",t.opacity)}function q4(e,t,n){e.each(function(r){let i=t(r);if(i!=null){let o=this.ownerDocument.createElementNS(Xr.svg,"a");o.setAttribute("fill","inherit"),o.setAttributeNS(Xr.xlink,"href",i),n!=null&&o.setAttribute("target",n),this.parentNode.insertBefore(o,this).appendChild(this)}})}function et(e,t,n){n!=null&&e.attr(t,n)}function CU(e,t,n){n!=null&&e.style(t,n)}function ut(e,t,{x:n,y:r},i=Te,o=Te){i+=t.dx,o+=t.dy,n?.bandwidth&&(i+=n.bandwidth()/2),r?.bandwidth&&(o+=r.bandwidth()/2),(i||o)&&e.attr("transform",`translate(${i},${o})`)}function te(e,t){if((e=Le(e))!==t)return e}function Kh(e,t){if((e=bt(e))!==t)return e}var BU=/^-?([_a-z]|[\240-\377]|\\[0-9a-f]{1,6}(\r\n|[ \t\r\n\f])?|\\[^\r\n\f0-9a-f])([_a-z0-9-]|[\240-\377]|\\[0-9a-f]{1,6}(\r\n|[ \t\r\n\f])?|\\[^\r\n\f0-9a-f])*$/i;function Nu(e){if(e===void 0)return"plot-d6a7b5";if(e=`${e}`,!BU.test(e))throw new Error(`invalid class name: ${e}`);return e}function Ou(e,t){if(typeof t=="string")e.property("style",t);else if(t!=null)for(let n of e)Object.assign(n.style,t)}function yn({frameAnchor:e},{width:t,height:n,marginTop:r,marginRight:i,marginBottom:o,marginLeft:s}){return[/left$/.test(e)?s:/right$/.test(e)?t-i:(s+t-i)/2,/^top/.test(e)?r:/^bottom/.test(e)?n-o:(r+n-o)/2]}function xa(e={}){let{document:t=typeof window<"u"?window.document:void 0,clip:n}=e;return{document:t,clip:$b(n)}}function J(e,{document:t}){return Ce(Ti(e).call(t.documentElement))}var G4=Math.PI,_s=2*G4,W4=.618;function H4({projection:e,inset:t=0,insetTop:n=t,insetRight:r=t,insetBottom:i=t,insetLeft:o=t}={},s){if(e==null)return;if(typeof e.stream=="function")return e;let a,l,c="frame";if(hn(e)){let v;if({type:e,domain:l,inset:v,insetTop:n=v!==void 0?v:n,insetRight:r=v!==void 0?v:r,insetBottom:i=v!==void 0?v:i,insetLeft:o=v!==void 0?v:o,clip:c=c,...a}=e,e==null)return}typeof e!="function"&&({type:e}=X4(e));let{width:u,height:d,marginLeft:f,marginRight:h,marginTop:p,marginBottom:m}=s,g=u-f-h-o-r,b=d-p-m-n-i;if(e=e?.({width:g,height:b,clip:c,...a}),e==null)return;c=DU(c,f,p,u-h,d-m);let y=f+o,x=p+n,_;if(l!=null){let[[v,w],[T,M]]=Mn(e).bounds(l),F=Math.min(g/(T-v),b/(M-w));F>0?(y-=(F*(v+T)-g)/2,x-=(F*(w+M)-b)/2,_=bl({point(S,I){this.stream.point(S*F+y,I*F+x)}})):Yn("Warning: the projection could not be fit to the specified domain; using the default scale.")}return _??(_=y===0&&x===0?Z4():bl({point(v,w){this.stream.point(v+y,w+x)}})),{stream:v=>e.stream(_.stream(c(v)))}}function X4(e){switch(`${e}`.toLowerCase()){case"albers-usa":return Ni(Bw,.7463,.4673);case"albers":return zb(Jd,.7463,.4673);case"azimuthal-equal-area":return Ni(Lw,4,4);case"azimuthal-equidistant":return Ni(Pw,_s,_s);case"conic-conformal":return zb(zw,_s,_s);case"conic-equal-area":return zb(na,6.1702,2.9781);case"conic-equidistant":return zb(jw,7.312,3.6282);case"equal-earth":return Ni(qw,5.4133,2.6347);case"equirectangular":return Ni(Vw,_s,G4);case"gnomonic":return Ni(Gw,3.4641,3.4641);case"identity":return{type:Z4};case"reflect-y":return{type:LU};case"mercator":return Ni(Uw,_s,_s);case"orthographic":return Ni(Xw,2,2);case"stereographic":return Ni(Kw,2,2);case"transverse-mercator":return Ni(Jw,_s,_s);default:throw new Error(`unknown projection type: ${e}`)}}function DU(e,t,n,r,i){if(e===!1||e==null||typeof e=="number")return o=>o;switch(e===!0&&(e="frame"),`${e}`.toLowerCase()){case"frame":return Qc(t,n,r,i);default:throw new Error(`unknown projection clip type: ${e}`)}}function Ni(e,t,n){return{type:({width:r,height:i,rotate:o,precision:s=.15,clip:a})=>{let l=e();return s!=null&&l.precision?.(s),o!=null&&l.rotate?.(o),typeof a=="number"&&l.clipAngle?.(a),l.scale(Math.min(r/t,i/n)),l.translate([r/2,i/2]),l},aspectRatio:n/t}}function zb(e,t,n){let{type:r,aspectRatio:i}=Ni(e,t,n);return{type:o=>{let{parallels:s,domain:a,width:l,height:c}=o,u=r(o);return s!=null&&(u.parallels(s),a===void 0&&u.fitSize([l,c],{type:"Sphere"})),u},aspectRatio:i}}var Z4=dn({stream:e=>e}),LU=dn(bl({point(e,t){this.stream.point(e,-t)}}));function L2(e,t,n,r){let i=n[e],o=n[t],s=i.length,a=n[e]=new Float64Array(s).fill(NaN),l=n[t]=new Float64Array(s).fill(NaN),c,u=r.stream({point(d,f){a[c]=d,l[c]=f}});for(c=0;c<s;++c)u.point(i[c],o[c])}function K4({projection:e}={}){return e==null?!1:typeof e.stream=="function"?!0:(hn(e)&&(e=e.type),e!=null)}function Q4(e){if(typeof e?.stream=="function")return W4;if(hn(e)&&(e=e.type),e!=null){if(typeof e!="function"){let{aspectRatio:t}=X4(e);if(t)return t}return W4}}function wa(e,t,{projection:n}){let{x:r,y:i}=e,o={};return r&&(o.x=r),i&&(o.y=i),o=ku(o,t),n&&r?.scale==="x"&&i?.scale==="y"&&L2("x","y",o,n),r&&(o.x=He(o.x)),i&&(o.y=He(o.y)),o}function J4(e){let t=[],n=[],r={scale:"x",value:t},i={scale:"y",value:n},o={point(s,a){t.push(s),n.push(a)},lineStart(){},lineEnd(){},polygonStart(){},polygonEnd(){},sphere(){}};for(let s of e.value)Cr(s,o);return[r,i]}var i8=new Map([["accent",Iv],["category10",Tv],["dark2",Ev],["paired",Mv],["pastel1",Av],["pastel2",Fv],["set1",kv],["set2",Nv],["set3",Ov],["tableau10",Cv]]);function o8(e){return e!=null&&i8.has(`${e}`.toLowerCase())}var t8=new Map([...i8,["brbg",xs(ng,rg)],["prgn",xs(ig,og)],["piyg",xs(sg,ag)],["puor",xs(lg,cg)],["rdbu",xs(vh,uu)],["rdgy",xs(ug,fg)],["rdylbu",xs(Sh,fu)],["rdylgn",xs(dg,hg)],["spectral",xs(pg,mg)],["burd",e8(vh,uu)],["buylrd",e8(Sh,fu)],["blues",gn($g,zg)],["greens",gn(Vg,jg)],["greys",gn(Yg,qg)],["oranges",gn(Zg,Kg)],["purples",gn(Wg,Gg)],["reds",gn(Hg,Xg)],["turbo",ws(sb)],["viridis",ws(lb)],["magma",ws(cb)],["inferno",ws(ub)],["plasma",ws(fb)],["cividis",ws(Qg)],["cubehelix",ws(Jg)],["warm",ws(eb)],["cool",ws(nb)],["bugn",gn(yg,gg)],["bupu",gn(bg,_g)],["gnbu",gn(xg,wg)],["orrd",gn(vg,Sg)],["pubu",gn(Eg,Mg)],["pubugn",gn(Tg,Ig)],["purd",gn(Ag,Fg)],["rdpu",gn(kg,Ng)],["ylgn",gn(Bg,Dg)],["ylgnbu",gn(Og,Cg)],["ylorbr",gn(Lg,Rg)],["ylorrd",gn(Pg,Ug)],["rainbow",n8(rb)],["sinebow",n8(ob)]]);function gn(e,t){return({length:n})=>n===1?[e[3][1]]:n===2?[e[3][1],e[3][2]]:(n=Math.max(3,Math.floor(n)),n>9?Pn(t,n):e[n])}function xs(e,t){return({length:n})=>n===2?[e[3][0],e[3][2]]:(n=Math.max(3,Math.floor(n)),n>11?Pn(t,n):e[n])}function e8(e,t){return({length:n})=>n===2?[e[3][2],e[3][0]]:(n=Math.max(3,Math.floor(n)),n>11?Pn(r=>t(1-r),n):e[n].slice().reverse())}function ws(e){return({length:t})=>Pn(e,Math.max(2,Math.floor(t)))}function n8(e){return({length:t})=>Pn(e,Math.floor(t)+1).slice(0,-1)}function R2(e){let t=`${e}`.toLowerCase();if(!t8.has(t))throw new Error(`unknown ordinal scheme: ${t}`);return t8.get(t)}function Jh(e,t){let n=R2(e),r=typeof n=="function"?n({length:t}):n;return r.length!==t?r.slice(0,t):r}function s8(e,t="greys"){let n=new Set,[r,i]=Jh(t,2);for(let o of e)if(o!=null)if(o===!0)n.add(i);else if(o===!1)n.add(r);else return;return[...n]}var r8=new Map([["brbg",rg],["prgn",og],["piyg",ag],["puor",cg],["rdbu",uu],["rdgy",fg],["rdylbu",fu],["rdylgn",hg],["spectral",mg],["burd",e=>uu(1-e)],["buylrd",e=>fu(1-e)],["blues",zg],["greens",jg],["greys",qg],["purples",Gg],["reds",Xg],["oranges",Kg],["turbo",sb],["viridis",lb],["magma",cb],["inferno",ub],["plasma",fb],["cividis",Qg],["cubehelix",Jg],["warm",eb],["cool",nb],["bugn",gg],["bupu",_g],["gnbu",wg],["orrd",Sg],["pubugn",Ig],["pubu",Mg],["purd",Fg],["rdpu",Ng],["ylgnbu",Cg],["ylgn",Dg],["ylorbr",Rg],["ylorrd",Ug],["rainbow",rb],["sinebow",ob]]);function Cu(e){let t=`${e}`.toLowerCase();if(!r8.has(t))throw new Error(`unknown quantitative scheme: ${t}`);return r8.get(t)}var RU=new Set(["brbg","prgn","piyg","puor","rdbu","rdgy","rdylbu","rdylgn","spectral","burd","buylrd"]);function a8(e){return e!=null&&RU.has(`${e}`.toLowerCase())}var U2=e=>t=>e(1-t),P2=[0,1],l8=new Map([["number",pe],["rgb",Zr],["hsl",zx],["hcl",Vx],["lab",V0]]);function $2(e){let t=`${e}`.toLowerCase();if(!l8.has(t))throw new Error(`unknown interpolator: ${t}`);return l8.get(t)}function Du(e,t,n,{type:r,nice:i,clamp:o,zero:s,domain:a=y8(e,n),unknown:l,round:c,scheme:u,interval:d,range:f=re.get(e)===Rl?zU(n,a):re.get(e)===Pl?VU(n,a):re.get(e)===Ul?P2:void 0,interpolate:h=re.get(e)===Rr?u==null&&f!==void 0?Zr:Cu(u!==void 0?u:r==="cyclical"?"rainbow":"turbo"):c?cl:pe,reverse:p}){if(d=bo(d,r),(r==="cyclical"||r==="sequential")&&(r="linear"),typeof h!="function"&&(h=$2(h)),p=!!p,f!==void 0){let m=(a=Re(a)).length,g=(f=Re(f)).length;if(m!==g){if(h.length===1)throw new Error("invalid piecewise interpolator");h=eo(h,f),f=void 0}}if(h.length===1?(p&&(h=U2(h),p=!1),f===void 0&&(f=Float64Array.from(a,(m,g)=>g/(a.length-1)),f.length===2&&(f=P2)),t.interpolate((f===P2?dn:tp)(h))):t.interpolate(h),s){let[m,g]=Qt(a);(m>0||g<0)&&(a=pa(a),ds(a)!==Math.sign(m)?a[a.length-1]=0:a[0]=0)}return p&&(a=Gs(a)),t.domain(a).unknown(l),i&&(t.nice(PU(i,r)),a=t.domain()),f!==void 0&&t.range(f),o&&t.clamp(o),{type:r,domain:a,range:f,scale:t,interpolate:h,interval:d}}function PU(e,t){return e===!0?void 0:typeof e=="number"?e:g4(e,t)}function c8(e,t,n){return Du(e,Sl(),t,n)}function u8(e,t,n){return z2(e,t,{...n,exponent:.5})}function z2(e,t,{exponent:n=1,...r}){return Du(e,fh().exponent(n),t,{...r,type:"pow"})}function f8(e,t,{base:n=10,domain:r=jU(t),...i}){return Du(e,ch().base(n),t,{...i,domain:r})}function d8(e,t,{constant:n=1,...r}){return Du(e,uh().constant(n),t,r)}function h8(e,t,{range:n,quantiles:r=n===void 0?5:(n=[...n]).length,n:i=r,scheme:o="rdylbu",domain:s=YU(t),unknown:a,interpolate:l,reverse:c}){return n===void 0&&(n=l!==void 0?Pn(l,i):re.get(e)===Rr?Jh(o,i):void 0),s.length>0&&(s=dh(s,n===void 0?{length:i}:n).quantiles()),Vb(e,t,{domain:s,range:n,reverse:c,unknown:a})}function p8(e,t,{range:n,n:r=n===void 0?5:(n=[...n]).length,scheme:i="rdylbu",domain:o=y8(e,t),unknown:s,interpolate:a,reverse:l}){let[c,u]=Qt(o),d;return n===void 0?(d=Tn(c,u,r),d[0]<=c&&d.splice(0,1),d[d.length-1]>=u&&d.pop(),r=d.length+1,n=a!==void 0?Pn(a,r):re.get(e)===Rr?Jh(i,r):void 0):(d=Pn(pe(c,u),r+1).slice(1,-1),c instanceof Date&&(d=d.map(f=>new Date(f)))),ds(Re(o))<0&&d.reverse(),Vb(e,t,{domain:d,range:n,reverse:l,unknown:s})}function Vb(e,t,{domain:n=[0],unknown:r,scheme:i="rdylbu",interpolate:o,range:s=o!==void 0?Pn(o,n.length+1):re.get(e)===Rr?Jh(i,n.length+1):void 0,reverse:a}){n=Re(n);let l=ds(n);if(!isNaN(l)&&!UU(n,l))throw new Error(`the ${e} scale has a non-monotonic domain`);return a&&(s=Gs(s)),{type:"threshold",scale:hh(l<0?Gs(n):n,s===void 0?[]:s).unknown(r),domain:n,range:s}}function UU(e,t){for(let n=1,r=e.length,i=e[0];n<r;++n){let o=Xn(i,i=e[n]);if(o!==0&&o!==t)return!1}return!0}function m8(e){return{type:"identity",scale:A4(re.get(e))?ah():t=>t}}function Bu(e,t=bu){return e.length?[ge(e,({value:n})=>n===void 0?n:ge(n,t)),Jt(e,({value:n})=>n===void 0?n:Jt(n,t))]:[0,1]}function y8(e,t){let n=re.get(e);return(n===Rl||n===Ul||n===Pl?$U:Bu)(t)}function $U(e){return[0,e.length?Jt(e,({value:t})=>t===void 0?t:Jt(t,bu)):1]}function zU(e,t){let n=e.find(({radius:s})=>s!==void 0);if(n!==void 0)return[0,n.radius];let r=Kn(e,.5,({value:s})=>s===void 0?NaN:Kn(s,.25,sr)),i=t.map(s=>3*Math.sqrt(s/r)),o=30/Jt(i);return o<1?i.map(s=>s*o):i}function VU(e,t){let n=Si(e,({value:o})=>o===void 0?NaN:Si(o,Math.abs)),r=t.map(o=>12*o/n),i=60/Jt(r);return i<1?r.map(o=>o*i):r}function jU(e){for(let{value:t}of e)if(t!==void 0)for(let n of t){if(n>0)return Bu(e,sr);if(n<0)return Bu(e,ua)}return[1,10]}function YU(e){let t=[];for(let{value:n}of e)if(n!==void 0)for(let r of n)t.push(r);return t}function tp(e){return(t,n)=>r=>e(t+r*(n-t))}function jb(e,t,n,r,{type:i,nice:o,clamp:s,domain:a=Bu(r),unknown:l,pivot:c=0,scheme:u,range:d,symmetric:f=!0,interpolate:h=re.get(e)===Rr?u==null&&d!==void 0?Zr:Cu(u!==void 0?u:"rdbu"):pe,reverse:p}){c=+c,a=Re(a);let[m,g]=a;if(a.length>2&&Yn(`Warning: the diverging ${e} scale domain contains extra elements.`),Xn(m,g)<0&&([m,g]=[g,m],p=!p),m=Math.min(m,c),g=Math.max(g,c),typeof h!="function"&&(h=$2(h)),d!==void 0&&(h=h.length===1?tp(h)(...d):eo(h,d)),p&&(h=U2(h)),f){let b=n.apply(c),y=b-n.apply(m),x=n.apply(g)-b;y<x?m=n.invert(b-x):y>x&&(g=n.invert(b+y))}return t.domain([m,c,g]).unknown(l).interpolator(h),s&&t.clamp(s),o&&t.nice(o),{type:i,domain:[m,g],pivot:c,interpolate:h,scale:t}}function g8(e,t,n){return jb(e,wh(),qU,t,n)}function b8(e,t,n){return V2(e,t,{...n,exponent:.5})}function V2(e,t,{exponent:n=1,...r}){return jb(e,eg().exponent(n=+n),HU(n),t,{...r,type:"diverging-pow"})}function _8(e,t,{base:n=10,pivot:r=1,domain:i=Bu(t,r<0?ua:sr),...o}){return jb(e,Jy().base(n=+n),WU,t,{domain:i,pivot:r,...o})}function x8(e,t,{constant:n=1,...r}){return jb(e,tg().constant(n=+n),XU(n),t,r)}var qU={apply(e){return e},invert(e){return e}},WU={apply:Math.log,invert:Math.exp},GU={apply(e){return Math.sign(e)*Math.sqrt(Math.abs(e))},invert(e){return Math.sign(e)*(e*e)}};function HU(e){return e===.5?GU:{apply(t){return Math.sign(t)*Math.pow(Math.abs(t),e)},invert(t){return Math.sign(t)*Math.pow(Math.abs(t),1/e)}}}function XU(e){return{apply(t){return Math.sign(t)*Math.log1p(Math.abs(t/e))},invert(t){return Math.sign(t)*Math.expm1(Math.abs(t))*e}}}function w8(e,t,n,r){return Du(e,t,n,r)}function v8(e,t,n){return w8(e,Zy(),t,n)}function S8(e,t,n){return w8(e,Ky(),t,n)}var Lu=Symbol("ordinal");function I8(e,t,n,{type:r,interval:i,domain:o,range:s,reverse:a,hint:l}){return i=bo(i,r),o===void 0&&(o=k8(n,i,e)),(r==="categorical"||r===Lu)&&(r="ordinal"),a&&(o=Gs(o)),o=t.domain(o).domain(),s!==void 0&&(typeof s=="function"&&(s=s(o)),t.range(s)),{type:r,domain:o,range:s,scale:t,hint:l,interval:i}}function E8(e,t,{type:n,interval:r,domain:i,range:o,scheme:s,unknown:a,...l}){r=bo(r,n),i===void 0&&(i=k8(t,r,e));let c;if(re.get(e)===Eu)c=ZU(t),o=o===void 0?KU(c):Pt(o,Mu);else if(re.get(e)===Rr&&(o===void 0&&(n==="ordinal"||n===Lu)&&(o=s8(i,s),o!==void 0&&(s=void 0)),s===void 0&&o===void 0&&(s=n==="ordinal"?"turbo":"tableau10"),s!==void 0))if(o!==void 0){let u=Cu(s),d=o[0],f=o[1]-o[0];o=({length:h})=>Pn(p=>u(d+f*p),h)}else o=R2(s);if(a===oh)throw new Error(`implicit unknown on ${e} scale is not supported`);return I8(e,wl().unknown(a),t,{...l,type:n,domain:i,range:o,hint:c})}function M8(e,t,{align:n=.5,padding:r=.5,...i}){return F8(lv().align(n).padding(r),t,i,e)}function A8(e,t,{align:n=.5,padding:r=.1,paddingInner:i=r,paddingOuter:o=e==="fx"||e==="fy"?0:r,...s}){return F8(ia().align(n).paddingInner(i).paddingOuter(o),t,s,e)}function F8(e,t,n,r){let{round:i}=n;return i!==void 0&&e.round(i=!!i),e=I8(r,e,t,n),e.round=i,e}function k8(e,t,n){let r=new Or;for(let{value:i,domain:o}of e){if(o!==void 0)return o();if(i!==void 0)for(let s of i)r.add(s)}if(t!==void 0){let[i,o]=Qt(r).map(t.floor,t);return t.range(i,t.offset(o))}if(r.size>1e4&&re.get(n)===ii)throw new Error(`implicit ordinal domain of ${n} scale has more than 10,000 values`);return Ki(r,fn)}function T8(e,t){let n;for(let{hint:r}of e){let i=r?.[t];if(i!==void 0){if(n===void 0)n=i;else if(n!==i)return}}return n}function ZU(e){return{fill:T8(e,"fill"),stroke:T8(e,"stroke")}}function KU(e){return ne(e.fill)?$v:gb}function ep(e,{label:t,inset:n=0,insetTop:r=n,insetRight:i=n,insetBottom:o=n,insetLeft:s=n,round:a,nice:l,clamp:c,zero:u,align:d,padding:f,projection:h,facet:{label:p=t}={},...m}={}){let g={};for(let[b,y]of e){let x=m[b],_=R8(b,y,{round:re.get(b)===ii?a:void 0,nice:l,clamp:c,zero:u,align:d,padding:f,projection:h,...x});if(_){let{label:v=b==="fx"||b==="fy"?p:t,percent:w,transform:T,inset:M,insetTop:F=M!==void 0?M:b==="y"?r:0,insetRight:S=M!==void 0?M:b==="x"?i:0,insetBottom:I=M!==void 0?M:b==="y"?o:0,insetLeft:k=M!==void 0?M:b==="x"?s:0}=x||{};if(T==null)T=void 0;else if(typeof T!="function")throw new Error("invalid scale transform; not a function");_.percent=!!w,_.label=v===void 0?QU(y,_):v,_.transform=T,b==="x"||b==="fx"?(_.insetLeft=+k,_.insetRight=+S):(b==="y"||b==="fy")&&(_.insetTop=+F,_.insetBottom=+I),g[b]=_}}return g}function Y2(e){let t={},n={scales:t};for(let[r,i]of Object.entries(e)){let{scale:o,type:s,interval:a,label:l}=i;t[r]=$8(i),n[r]=o,o.type=s,a!=null&&(o.interval=a),l!=null&&(o.label=l)}return n}function B8(e,t){let{x:n,y:r,fx:i,fy:o}=e,s=i||o?qb(t):t;i&&N8(i,s),o&&O8(o,s);let a=i||o?q2(e,t):t;n&&N8(n,a),r&&O8(r,a)}function QU(e=[],t){let n;for(let{label:r}of e)if(r!==void 0){if(n===void 0)n=r;else if(n!==r)return}if(n!==void 0)return!vo(t)&&t.percent&&(n=`${n} (%)`),{inferred:!0,toString:()=>n}}function qb(e){let{marginTop:t,marginRight:n,marginBottom:r,marginLeft:i,width:o,height:s,facet:{marginTop:a,marginRight:l,marginBottom:c,marginLeft:u}}=e;return{marginTop:Math.max(t,a),marginRight:Math.max(n,l),marginBottom:Math.max(r,c),marginLeft:Math.max(i,u),width:o,height:s}}function q2({fx:e,fy:t},n){let{marginTop:r,marginRight:i,marginBottom:o,marginLeft:s,width:a,height:l}=qb(n);return{marginTop:r,marginRight:i,marginBottom:o,marginLeft:s,width:e?e.scale.bandwidth()+s+i:a,height:t?t.scale.bandwidth()+r+o:l,facet:{width:a,height:l}}}function N8(e,t){if(e.range===void 0){let{insetLeft:n,insetRight:r}=e,{width:i,marginLeft:o=0,marginRight:s=0}=t,a=o+n,l=i-s-r;e.range=[a,Math.max(a,l)],vo(e)||(e.range=L8(e)),e.scale.range(e.range)}D8(e)}function O8(e,t){if(e.range===void 0){let{insetTop:n,insetBottom:r}=e,{height:i,marginTop:o=0,marginBottom:s=0}=t,a=o+n,l=i-s-r;e.range=[Math.max(a,l),a],vo(e)?e.range.reverse():e.range=L8(e),e.scale.range(e.range)}D8(e)}function D8(e){e.round===void 0&&e$(e)&&JU(e)<=30&&e.scale.round(!0)}function JU({scale:e}){let t=e.domain().length,[n,r]=e.range(),i=e.paddingInner?e.paddingInner():1,o=e.paddingOuter?e.paddingOuter():e.padding(),s=t-i,a=Math.abs(r-n)/Math.max(1,s+o*2);return(a-Math.floor(a))*s}function L8(e){let t=e.scale.domain().length+W2(e);if(!(t>2))return e.range;let[n,r]=e.range;return Array.from({length:t},(i,o)=>n+o/(t-1)*(r-n))}function Wb(e,t,n){return R8(e,n===void 0?void 0:[{hint:n}],{...t})}function R8(e,t=[],n={}){let r=t$(e,t,n);if(n.type===void 0&&n.domain===void 0&&n.range===void 0&&n.interval==null&&e!=="fx"&&e!=="fy"&&vo({type:r})){let i=t.map(({value:o})=>o).filter(o=>o!==void 0);i.some(Se)?Yn(`Warning: some data associated with the ${e} scale are dates. Dates are typically associated with a "utc" or "time" scale rather than a "${Ru(r)}" scale. If you are using a bar mark, you probably want a rect mark with the interval option instead; if you are using a group transform, you probably want a bin transform instead. If you want to treat this data as ordinal, you can specify the interval of the ${e} scale (e.g., d3.utcDay), or you can suppress this warning by setting the type of the ${e} scale to "${Ru(r)}".`):i.some(w4)?Yn(`Warning: some data associated with the ${e} scale are strings that appear to be dates (e.g., YYYY-MM-DD). If these strings represent dates, you should parse them to Date objects. Dates are typically associated with a "utc" or "time" scale rather than a "${Ru(r)}" scale. If you are using a bar mark, you probably want a rect mark with the interval option instead; if you are using a group transform, you probably want a bin transform instead. If you want to treat this data as ordinal, you can suppress this warning by setting the type of the ${e} scale to "${Ru(r)}".`):i.some(v4)&&Yn(`Warning: some data associated with the ${e} scale are strings that appear to be numbers. If these strings represent numbers, you should parse or coerce them to numbers. Numbers are typically associated with a "linear" scale rather than a "${Ru(r)}" scale. If you want to treat this data as ordinal, you can specify the interval of the ${e} scale (e.g., 1 for integers), or you can suppress this warning by setting the type of the ${e} scale to "${Ru(r)}".`)}switch(n.type=r,r){case"diverging":case"diverging-sqrt":case"diverging-pow":case"diverging-log":case"diverging-symlog":case"cyclical":case"sequential":case"linear":case"sqrt":case"threshold":case"quantile":case"pow":case"log":case"symlog":n=Yb(t,n,He);break;case"identity":switch(re.get(e)){case ii:n=Yb(t,n,He);break;case Eu:n=Yb(t,n,n$);break}break;case"utc":case"time":n=Yb(t,n,y4);break}switch(r){case"diverging":return g8(e,t,n);case"diverging-sqrt":return b8(e,t,n);case"diverging-pow":return V2(e,t,n);case"diverging-log":return _8(e,t,n);case"diverging-symlog":return x8(e,t,n);case"categorical":case"ordinal":case Lu:return E8(e,t,n);case"cyclical":case"sequential":case"linear":return c8(e,t,n);case"sqrt":return u8(e,t,n);case"threshold":return Vb(e,t,n);case"quantile":return h8(e,t,n);case"quantize":return p8(e,t,n);case"pow":return z2(e,t,n);case"log":return f8(e,t,n);case"symlog":return d8(e,t,n);case"utc":return S8(e,t,n);case"time":return v8(e,t,n);case"point":return M8(e,t,n);case"band":return A8(e,t,n);case"identity":return m8(e);case void 0:return;default:throw new Error(`unknown scale type: ${r}`)}}function Ru(e){return typeof e=="symbol"?e.description:e}var C8={toString:()=>"projection"};function t$(e,t,{type:n,domain:r,range:i,scheme:o,pivot:s,projection:a}){if(e==="fx"||e==="fy")return"band";(e==="x"||e==="y")&&a!=null&&(n=C8);for(let{type:c}of t)if(c!==void 0){if(n===void 0)n=c;else if(n!==c)throw new Error(`scale incompatible with channel: ${n} !== ${c}`)}if(n===C8)return;if(n!==void 0)return n;if(r===void 0&&!t.some(({value:c})=>c!==void 0))return;let l=re.get(e);if(l===Rl)return"sqrt";if(l===Ul||l===Pl)return"linear";if(l===Eu)return"ordinal";if((r||i||[]).length>2)return j2(l);if(r!==void 0){if(_e(r))return j2(l);if(Se(r))return"utc"}else{let c=t.map(({value:u})=>u).filter(u=>u!==void 0);if(c.some(_e))return j2(l);if(c.some(Se))return"utc"}if(l===Rr){if(s!=null||a8(o))return"diverging";if(o8(o))return"categorical"}return"linear"}function j2(e){switch(e){case ii:return"point";case Rr:return Lu;default:return"ordinal"}}function vo({type:e}){return e==="ordinal"||e==="point"||e==="band"||e===Lu}function W2({type:e}){return e==="threshold"}function e$({type:e}){return e==="point"||e==="band"}function ur(e){if(e===void 0)return!0;let t=e.domain(),n=e(t[0]);for(let r=1,i=t.length;r<i;++r)if(e(t[r])-n)return!1;return!0}function Yb(e,{domain:t,...n},r){for(let i of e)i.value!==void 0&&(i.value=r(i.value));return{domain:t===void 0?t:r(t),...n}}function n$(e){return Pt(e,Mu)}function P8(e={}){let t;for(let n in e)if(!!re.has(n)&&!!yo(e[n])){if(t!==void 0)throw new Error("ambiguous scale definition; multiple scales found");t=$8(Wb(n,e[n]))}if(t===void 0)throw new Error("invalid scale definition; no scale found");return t}function U8(e){return t=>{if(!re.has(t=`${t}`))throw new Error(`unknown scale: ${t}`);return e[t]}}function $8({scale:e,type:t,domain:n,range:r,interpolate:i,interval:o,transform:s,percent:a,pivot:l}){if(t==="identity")return{type:"identity",apply:u=>u,invert:u=>u};let c=e.unknown?e.unknown():void 0;return{type:t,domain:pa(n),...r!==void 0&&{range:pa(r)},...s!==void 0&&{transform:s},...a&&{percent:a},...c!==void 0&&{unknown:c},...o!==void 0&&{interval:o},...i!==void 0&&{interpolate:i},...e.clamp&&{clamp:e.clamp()},...l!==void 0&&{pivot:l,symmetric:!1},...e.base&&{base:e.base()},...e.exponent&&{exponent:e.exponent()},...e.constant&&{constant:e.constant()},...e.align&&{align:e.align(),round:e.round()},...e.padding&&(e.paddingInner?{paddingInner:e.paddingInner(),paddingOuter:e.paddingOuter()}:{padding:e.padding()}),...e.bandwidth&&{bandwidth:e.bandwidth(),step:e.step()},apply:u=>e(u),...e.invert&&{invert:u=>e.invert(u)}}}function V8(e,t,n={}){let r=.5-Te,i=.5+Te,o=.5+Te,s=.5-Te;for(let{marginTop:m,marginRight:g,marginBottom:b,marginLeft:y}of t)m>r&&(r=m),g>i&&(i=g),b>o&&(o=b),y>s&&(s=y);let{margin:a,marginTop:l=a!==void 0?a:r,marginRight:c=a!==void 0?a:i,marginBottom:u=a!==void 0?a:o,marginLeft:d=a!==void 0?a:s}=n;l=+l,c=+c,u=+u,d=+d;let{width:f=640,height:h=r$(e,n,{width:f,marginTopDefault:r,marginRightDefault:i,marginBottomDefault:o,marginLeftDefault:s})+Math.max(0,l-r+u-o)}=n;f=+f,h=+h;let p={width:f,height:h,marginTop:l,marginRight:c,marginBottom:u,marginLeft:d};if(e.fx||e.fy){let{margin:m,marginTop:g=m!==void 0?m:l,marginRight:b=m!==void 0?m:c,marginBottom:y=m!==void 0?m:u,marginLeft:x=m!==void 0?m:d}=n.facet??{};g=+g,b=+b,y=+y,x=+x,p.facet={marginTop:g,marginRight:b,marginBottom:y,marginLeft:x}}return p}function r$({x:e,y:t,fy:n,fx:r},{projection:i,aspectRatio:o},{width:s,marginTopDefault:a,marginRightDefault:l,marginBottomDefault:c,marginLeftDefault:u}){let d=n?n.scale.domain().length:1,f=Q4(i);if(f){let p=r?r.scale.domain().length:1,m=(1.1*d-.1)/(1.1*p-.1)*f,g=Math.max(.1,Math.min(10,m));return Math.round((s-u-l)*g+a+c)}let h=t?vo(t)?t.scale.domain().length:Math.max(7,17/d):1;if(o!=null){if(o=+o,!(isFinite(o)&&o>0))throw new Error(`invalid aspectRatio: ${o}`);let p=z8("y",t)/(z8("x",e)*o),m=r?r.scale.bandwidth():1,g=n?n.scale.bandwidth():1,b=m*(s-u-l)-e.insetLeft-e.insetRight;return(p*b+t.insetTop+t.insetBottom)/g+a+c}return!!(t||n)*Math.max(1,Math.min(60,h*d))*20+!!r*30+60}function z8(e,t){if(!t)throw new Error(`aspectRatio requires ${e} scale`);let{type:n,domain:r}=t,i;switch(n){case"linear":case"utc":case"time":i=Number;break;case"pow":{let a=t.scale.exponent();i=l=>Math.pow(l,a);break}case"log":i=Math.log;break;case"point":case"band":return r.length;default:throw new Error(`unsupported ${e} scale for aspectRatio: ${n}`)}let[o,s]=Qt(r);return Math.abs(i(s)-i(o))}function Y8(e,t){let{fx:n,fy:r}=ep(e,t),i=n?.scale.domain(),o=r?.scale.domain();return i&&o?b0(i,o).map(([s,a],l)=>({x:s,y:a,i:l})):i?i.map((s,a)=>({x:s,i:a})):o?o.map((s,a)=>({y:s,i:a})):void 0}function q8(e,{x:t,y:n}){return t&&(t=K2(t)),n&&(n=K2(n)),e.filter(t&&n?r=>t.has(r.x)&&n.has(r.y):t?r=>t.has(r.x):r=>n.has(r.y)).sort(t&&n?(r,i)=>t.get(r.x)-t.get(i.x)||n.get(r.y)-n.get(i.y):t?(r,i)=>t.get(r.x)-t.get(i.x):(r,i)=>n.get(r.y)-n.get(i.y))}function Hb(e,{fx:t,fy:n}){let r=ar(e),i=t?.value,o=n?.value;return t&&n?vi(r,s=>(s.fx=i[s[0]],s.fy=o[s[0]],s),s=>i[s],s=>o[s]):t?vi(r,s=>(s.fx=i[s[0]],s),s=>i[s]):vi(r,s=>(s.fy=o[s[0]],s),s=>o[s])}function W8(e,t,{marginTop:n,marginLeft:r}){return e&&t?({x:i,y:o})=>`translate(${e(i)-r},${t(o)-n})`:e?({x:i})=>`translate(${e(i)-r},0)`:({y:i})=>`translate(0,${t(i)-n})`}function G8(e){let t=[],n=new Uint32Array(In(e,r=>r.length));for(let r of e){let i=0;for(let o of e)r!==o&&(n.set(o,i),i+=o.length);t.push(n.slice(0,i))}return t}var i$=new Map([["top",G2],["right",Z2],["bottom",H2],["left",X2],["top-left",Gb(G2,X2)],["top-right",Gb(G2,Z2)],["bottom-left",Gb(H2,X2)],["bottom-right",Gb(H2,Z2)],["top-empty",s$],["right-empty",c$],["bottom-empty",a$],["left-empty",l$],["empty",u$]]);function H8(e){if(e==null)return null;let t=i$.get(`${e}`.toLowerCase());if(t)return t;throw new Error(`invalid facet anchor: ${e}`)}var j8=new WeakMap;function K2(e){let t=j8.get(e);return t||j8.set(e,t=new Zn(Pt(e,(n,r)=>[n,r]))),t}function va(e,t){return K2(e).get(t)}function o$(e,t,n){return t=ms(t),n=ms(n),e.find(r=>Object.is(ms(r.x),t)&&Object.is(ms(r.y),n))}function Xb(e,t,n){return o$(e,t,n)?.empty}function G2(e,{y:t},{y:n}){return t?va(t,n)===0:!0}function H2(e,{y:t},{y:n}){return t?va(t,n)===t.length-1:!0}function X2(e,{x:t},{x:n}){return t?va(t,n)===0:!0}function Z2(e,{x:t},{x:n}){return t?va(t,n)===t.length-1:!0}function s$(e,{y:t},{x:n,y:r,empty:i}){if(i)return!1;if(!t)return;let o=va(t,r);if(o>0)return Xb(e,n,t[o-1])}function a$(e,{y:t},{x:n,y:r,empty:i}){if(i)return!1;if(!t)return;let o=va(t,r);if(o<t.length-1)return Xb(e,n,t[o+1])}function l$(e,{x:t},{x:n,y:r,empty:i}){if(i)return!1;if(!t)return;let o=va(t,n);if(o>0)return Xb(e,t[o-1],r)}function c$(e,{x:t},{x:n,y:r,empty:i}){if(i)return!1;if(!t)return;let o=va(t,n);if(o<t.length-1)return Xb(e,t[o+1],r)}function u$(e,t,{empty:n}){return n}function Gb(e,t){return function(){return e.apply(null,arguments)&&t.apply(null,arguments)}}function Zb(e,{channels:{fx:t,fy:n},groups:r}){return t&&n?e.map(({x:i,y:o})=>r.get(i)?.get(o)??[]):t?e.map(({x:i})=>r.get(i)??[]):e.map(({y:i})=>r.get(i)??[])}var at=class{constructor(t,n={},r={},i){let{facet:o="auto",facetAnchor:s,fx:a,fy:l,sort:c,dx:u=0,dy:d=0,margin:f=0,marginTop:h=f,marginRight:p=f,marginBottom:m=f,marginLeft:g=f,clip:b=i?.clip,channels:y,tip:x,render:_}=r;if(this.data=t,this.sort=go(c)?c:null,this.initializer=ye(r).initializer,this.transform=this.initializer?r.transform:mn(r).transform,o===null||o===!1?this.facet=null:(this.facet=Xe(o===!0?"include":o,"facet",["auto","include","exclude","super"]),this.fx=t===da&&typeof a=="string"?[a]:a,this.fy=t===da&&typeof l=="string"?[l]:l),this.facetAnchor=H8(s),n=Yh(n),y!==void 0&&(n={...f$(y),...n}),i!==void 0&&(n={...Pb(this,r,i),...n}),this.channels=Object.fromEntries(Object.entries(n).map(([v,w])=>{if(Lr(w.value)){let{value:T,label:M=w.label,scale:F=w.scale}=w.value;w={...w,label:M,scale:F,value:T}}if(t===da&&typeof w.value=="string"){let{value:T}=w;w={...w,value:[T]}}return[v,w]}).filter(([v,{value:w,optional:T}])=>{if(w!=null)return!0;if(T)return!1;throw new Error(`missing channel value: ${v}`)})),this.dx=+u,this.dy=+d,this.marginTop=+h,this.marginRight=+p,this.marginBottom=+m,this.marginLeft=+g,this.clip=$b(b),this.tip=d$(x),this.facet==="super"){if(a||l)throw new Error("super-faceting cannot use fx or fy");for(let v in this.channels){let{scale:w}=n[v];if(!(w!=="x"&&w!=="y"))throw new Error("super-faceting cannot use x or y")}}_!=null&&(this.render=Q2(_,this.render))}initialize(t,n,r){let i=Re(this.data);t===void 0&&i!=null&&(t=[ar(i)]);let o=t;this.transform!=null&&({facets:t,data:i}=this.transform(i,t,r),i=Re(i)),t!==void 0&&(t.original=o);let s=Lb(this.channels,i);return this.sort!=null&&P4(i,t,s,n,this.sort),{data:i,facets:t,channels:s}}filter(t,n,r){for(let i in n){let{filter:o=Be}=n[i];if(o!==null){let s=r[i];t=t.filter(a=>o(s[a]))}}return t}project(t,n,r){for(let i in t)if(t[i].scale==="x"&&/^x|x$/.test(i)){let o=i.replace(/^x|x$/,"y");o in t&&t[o].scale==="y"&&L2(i,o,n,r.projection)}}scale(t,n,r){let i=ku(t,n);return r.projection&&this.project(t,i,r),i}};function bn(...e){return e.plot=at.prototype.plot,e}function Q2(e,t){if(e==null)return t===null?void 0:t;if(t==null)return e===null?void 0:e;if(typeof e!="function")throw new TypeError(`invalid render transform: ${e}`);if(typeof t!="function")throw new TypeError(`invalid render transform: ${t}`);return function(n,r,i,o,s,a){return e.call(this,n,r,i,o,s,(l,c,u,d,f)=>t.call(this,l,c,u,d,f,a))}}function f$(e){return Object.fromEntries(Object.entries(Yh(e)).map(([t,n])=>(n=typeof n=="string"?{value:n,label:t}:_o(n),n.filter===void 0&&n.scale==null&&(n={...n,filter:null}),[t,n])))}function d$(e){return e===!0?"xy":e===!1||e==null?null:typeof e=="string"?Xe(e,"tip",["x","y","xy"]):e}function vs(e,t){return e?.tip===!0?{...e,tip:t}:hn(e?.tip)&&e.tip.pointer===void 0?{...e,tip:{...e.tip,pointer:t}}:e}var X8=new WeakMap;function J2(e,t,{x:n,y:r,px:i,py:o,maxRadius:s=40,channels:a,render:l,...c}={}){return s=+s,i!=null&&(n??(n=null),a={...a,px:{value:i,scale:"x"}}),o!=null&&(r??(r=null),a={...a,py:{value:o,scale:"y"}}),{x:n,y:r,channels:a,...c,render:Q2(function(u,d,f,h,p,m){p={...p,pointerSticky:!1};let g=p.ownerSVGElement,{data:b}=p.getMarkState(this),y=X8.get(g);y||X8.set(g,y={sticky:!1,roots:[],renders:[]});let x=y.renders.push(Q)-1,{x:_,y:v,fx:w,fy:T}=d,M=w?w(u.fx)-h.marginLeft:0,F=T?T(u.fy)-h.marginTop:0;_?.bandwidth&&(M+=_.bandwidth()/2),v?.bandwidth&&(F+=v.bandwidth()/2);let S=u.fi!=null,I;if(S){let G=y.facetStates;G||(y.facetStates=G=new Map),I=G.get(this),I||G.set(this,I=new Map)}let[k,O]=yn(this,h),{px:N,py:A}=f,C=N?G=>N[G]:tS(f,k),L=A?G=>A[G]:eS(f,O),U,B,$,V;function z(G,ct){if(S)if(V&&(V=cancelAnimationFrame(V)),G==null)I.delete(u.fi);else{I.set(u.fi,ct),V=requestAnimationFrame(()=>{V=null;for(let[R,Z]of I)if(Z<ct||Z===ct&&R<u.fi){G=null;break}Q(G)});return}Q(G)}function Q(G){if(U===G&&$===y.sticky)return;U=G,$=p.pointerSticky=y.sticky;let ct=U==null?[]:[U];S&&(ct.fx=u.fx,ct.fy=u.fy,ct.fi=u.fi);let R=m(ct,d,f,h,p);if(B){if(S){let Z=B.parentNode,K=B.getAttribute("transform"),D=R.getAttribute("transform");K?R.setAttribute("transform",K):R.removeAttribute("transform"),D?Z.setAttribute("transform",D):Z.removeAttribute("transform"),R.removeAttribute("aria-label"),R.removeAttribute("aria-description"),R.removeAttribute("aria-hidden")}B.replaceWith(R)}return y.roots[x]=B=R,U==null&&I?.size>1||p.dispatchValue(U==null?null:b[U]),R}function Ft(G){if(y.sticky||G.pointerType==="mouse"&&G.buttons===1)return;let[ct,R]=Ex(G);ct-=M,R-=F;let Z=ct<h.marginLeft||ct>h.width-h.marginRight?1:e,K=R<h.marginTop||R>h.height-h.marginBottom?1:t,D=null,$t=s*s;for(let ot of u){let qt=Z*(C(ot)-ct),Zt=K*(L(ot)-R),tn=qt*qt+Zt*Zt;tn<=$t&&(D=ot,$t=tn)}if(D!=null&&(e!==1||t!==1)){let ot=C(D)-ct,qt=L(D)-R;$t=ot*ot+qt*qt}z(D,$t)}function ft(G){G.pointerType==="mouse"&&U!=null&&(y.sticky&&y.roots.some(ct=>ct?.contains(G.target))||(y.sticky?(y.sticky=!1,y.renders.forEach(ct=>ct(null))):(y.sticky=!0,Q(U)),G.stopImmediatePropagation()))}function ht(G){G.pointerType==="mouse"&&(y.sticky||z(null))}return g.addEventListener("pointerenter",Ft),g.addEventListener("pointermove",Ft),g.addEventListener("pointerdown",ft),g.addEventListener("pointerleave",ht),Q(null)},l)}}function Sa(e){return J2(1,1,e)}function Pu(e){return J2(1,.01,e)}function Uu(e){return J2(.01,1,e)}function tS({x1:e,x2:t,x:n=e},r){return e&&t?i=>(e[i]+t[i])/2:n?i=>n[i]:()=>r}function eS({y1:e,y2:t,y:n=e},r){return e&&t?i=>(e[i]+t[i])/2:n?i=>n[i]:()=>r}function Kb(e){return vo(e)&&e.interval===void 0?void 0:"tabular-nums"}function Z8(e,t){let{label:n=e.label,tickSize:r=6,width:i=240,height:o=44+r,marginTop:s=18,marginRight:a=0,marginBottom:l=16+r,marginLeft:c=0,style:u,ticks:d=(i-c-a)/64,tickFormat:f,fontVariant:h=Kb(e),round:p=!0,opacity:m,className:g}=t,b=xa(t);g=Nu(g),m=Kt(m)[1],f===null&&(f=()=>null);let y=J("svg",b).attr("class",`${g}-ramp`).attr("font-family","system-ui, sans-serif").attr("font-size",10).attr("width",i).attr("height",o).attr("viewBox",`0 0 ${i} ${o}`).call(k=>k.append("style").text(`.${g}-ramp {
  display: block;
  background: white;
  height: auto;
  height: intrinsic;
  max-width: 100%;
  overflow: visible;
}
.${g}-ramp text {
  white-space: pre;
}`)).call(Ou,u),x=k=>k.selectAll(".tick line").attr("y1",s+l-o),_,v=p?(k,O)=>k.rangeRound(O):(k,O)=>k.range(O),{type:w,domain:T,range:M,interpolate:F,scale:S,pivot:I}=e;if(F){let k=M===void 0?F:eo(F.length===1?tp(F):F,M);_=v(S.copy(),Pn(pe(c,i-a),Math.min(T.length+(I!==void 0),M===void 0?1/0:M.length)));let O=256,N=b.document.createElement("canvas");N.width=O,N.height=1;let A=N.getContext("2d");for(let C=0,L=O-1;C<O;++C)A.fillStyle=k(C/L),A.fillRect(C,0,1,1);y.append("image").attr("opacity",m).attr("x",c).attr("y",s).attr("width",i-c-a).attr("height",o-s-l).attr("preserveAspectRatio","none").attr("xlink:href",N.toDataURL())}else if(w==="threshold"){let k=T,O=f===void 0?N=>N:typeof f=="string"?Qr(f):f;_=v(Sl().domain([-1,M.length-1]),[c,i-a]),y.append("g").attr("fill-opacity",m).selectAll().data(M).enter().append("rect").attr("x",(N,A)=>_(A-1)).attr("y",s).attr("width",(N,A)=>_(A)-_(A-1)).attr("height",o-s-l).attr("fill",N=>N),d=Pt(k,(N,A)=>A),f=N=>O(k[N],N)}else _=v(ia().domain(T),[c,i-a]),y.append("g").attr("fill-opacity",m).selectAll().data(T).enter().append("rect").attr("x",_).attr("y",s).attr("width",Math.max(0,_.bandwidth()-1)).attr("height",o-s-l).attr("fill",S),x=()=>{};return y.append("g").attr("transform",`translate(0,${o-l})`).call(xx(_).ticks(Array.isArray(d)?null:d,typeof f=="string"?f:void 0).tickFormat(typeof f=="function"?f:void 0).tickSize(r).tickValues(Array.isArray(d)?d:null)).attr("font-size",null).attr("font-family",null).attr("font-variant",te(h,"normal")).call(x).call(k=>k.select(".domain").remove()),n!==void 0&&y.append("text").attr("x",c).attr("y",s-6).attr("fill","currentColor").attr("font-weight","bold").text(n),y.node()}var $u=Math.PI/180;function Oi(e,{marker:t,markerStart:n=t,markerMid:r=t,markerEnd:i=t}={}){e.markerStart=nS(n),e.markerMid=nS(r),e.markerEnd=nS(i)}function nS(e){if(e==null||e===!1)return null;if(e===!0)return Q8;if(typeof e=="function")return e;switch(`${e}`.toLowerCase()){case"none":return null;case"arrow":return K8("auto");case"arrow-reverse":return K8("auto-start-reverse");case"dot":return h$;case"circle":case"circle-fill":return Q8;case"circle-stroke":return p$}throw new Error(`invalid marker: ${e}`)}function K8(e){return(t,n)=>J("svg:marker",n).attr("viewBox","-5 -5 10 10").attr("markerWidth",6.67).attr("markerHeight",6.67).attr("orient",e).attr("fill","none").attr("stroke",t).attr("stroke-width",1.5).attr("stroke-linecap","round").attr("stroke-linejoin","round").call(r=>r.append("path").attr("d","M-1.5,-3l3,3l-3,3")).node()}function h$(e,t){return J("svg:marker",t).attr("viewBox","-5 -5 10 10").attr("markerWidth",6.67).attr("markerHeight",6.67).attr("fill",e).attr("stroke","none").call(n=>n.append("circle").attr("r",2.5)).node()}function Q8(e,t){return J("svg:marker",t).attr("viewBox","-5 -5 10 10").attr("markerWidth",6.67).attr("markerHeight",6.67).attr("fill",e).attr("stroke","white").attr("stroke-width",1.5).call(n=>n.append("circle").attr("r",3)).node()}function p$(e,t){return J("svg:marker",t).attr("viewBox","-5 -5 10 10").attr("markerWidth",6.67).attr("markerHeight",6.67).attr("fill","white").attr("stroke",e).attr("stroke-width",1.5).call(n=>n.append("circle").attr("r",3)).node()}var m$=0;function Ss(e,t,{stroke:n},r){return tF(e,t,n&&(i=>n[i]),r)}function J8(e,t,{stroke:n},r){return tF(e,t,n&&(([i])=>n[i]),r)}function tF(e,{markerStart:t,markerMid:n,markerEnd:r,stroke:i},o=()=>i,s){let a=new Map;function l(c){return function(u){let d=o(u),f=a.get(c);f||a.set(c,f=new Map);let h=f.get(d);if(!h){let p=this.parentNode.insertBefore(c(d,s),this),m=`plot-marker-${++m$}`;p.setAttribute("id",m),f.set(d,h=`url(#${m})`)}return h}}t&&e.attr("marker-start",l(t)),n&&e.attr("marker-mid",l(n)),r&&e.attr("marker-end",l(r))}function zl({inset:e,insetLeft:t,insetRight:n,...r}={}){return[t,n]=eF(e,t,n),{inset:e,insetLeft:t,insetRight:n,...r}}function Vl({inset:e,insetTop:t,insetBottom:n,...r}={}){return[t,n]=eF(e,t,n),{inset:e,insetTop:t,insetBottom:n,...r}}function eF(e,t,n){return e===void 0&&t===void 0&&n===void 0?Te?[1,0]:[.5,.5]:[t,n]}function nF(e,{interval:t}){return e={..._o(e)},e.interval=Eb(e.interval===void 0?t:e.interval),e}function Qb(e,t,n,r){let{[e]:i,[`${e}1`]:o,[`${e}2`]:s}=n,{value:a,interval:l}=nF(i,n);if(a==null||l==null&&!r)return n;let c=lr(i);if(l==null){let h,p={transform:m=>h||(h=st(m,a)),label:c};return{...n,[e]:void 0,[`${e}1`]:o===void 0?p:o,[`${e}2`]:s===void 0?p:s}}let u,d;function f(h){return d!==void 0&&h===u?d:d=Pt(st(u=h,a),p=>l.floor(p))}return t({...n,[e]:void 0,[`${e}1`]:o===void 0?{transform:f,label:c}:o,[`${e}2`]:s===void 0?{transform:h=>f(h).map(p=>l.offset(p)),label:c}:s})}function rF(e,t,n){let{[e]:r}=n,{value:i,interval:o}=nF(r,n);return i==null||o==null?n:t({...n,[e]:{label:lr(r),transform:s=>{let a=Pt(st(s,i),c=>o.floor(c)),l=a.map(c=>o.offset(c));return a.map(Se(a)?(c,u)=>c==null||isNaN(c=+c)||(u=l[u],u==null)||isNaN(u=+u)?void 0:new Date((c+u)/2):(c,u)=>c==null||(u=l[u],u==null)?NaN:(+c+ +u)/2)}}})}function rS(e={}){return Qb("x",zl,e,!0)}function iS(e={}){return Qb("y",Vl,e,!0)}function Jb(e={}){return Qb("x",zl,e)}function t1(e={}){return Qb("y",Vl,e)}function e1(e={}){return rF("x",zl,e)}function n1(e={}){return rF("y",Vl,e)}var iF={ariaLabel:"rule",fill:null,stroke:"currentColor"},np=class extends at{constructor(t,n={}){let{x:r,y1:i,y2:o,inset:s=0,insetTop:a=s,insetBottom:l=s}=n;super(t,{x:{value:r,scale:"x",optional:!0},y1:{value:i,scale:"y",optional:!0},y2:{value:o,scale:"y",optional:!0}},vs(n,"x"),iF),this.insetTop=bt(a),this.insetBottom=bt(l),Oi(this,n)}render(t,n,r,i,o){let{x:s,y:a}=n,{x:l,y1:c,y2:u}=r,{width:d,height:f,marginTop:h,marginRight:p,marginLeft:m,marginBottom:g}=i,{insetTop:b,insetBottom:y}=this;return J("svg:g",o).call(St,this,i,o).call(ut,this,{x:l&&s},Te,0).call(x=>x.selectAll().data(t).enter().append("line").call(_t,this).attr("x1",l?_=>l[_]:(m+d-p)/2).attr("x2",l?_=>l[_]:(m+d-p)/2).attr("y1",c&&!ur(a)?_=>c[_]+b:h+b).attr("y2",u&&!ur(a)?a.bandwidth?_=>u[_]+a.bandwidth()-y:_=>u[_]-y:f-g-y).call(zt,this,r).call(Ss,this,r,o)).node()}},rp=class extends at{constructor(t,n={}){let{x1:r,x2:i,y:o,inset:s=0,insetRight:a=s,insetLeft:l=s}=n;super(t,{y:{value:o,scale:"y",optional:!0},x1:{value:r,scale:"x",optional:!0},x2:{value:i,scale:"x",optional:!0}},vs(n,"y"),iF),this.insetRight=bt(a),this.insetLeft=bt(l),Oi(this,n)}render(t,n,r,i,o){let{x:s,y:a}=n,{y:l,x1:c,x2:u}=r,{width:d,height:f,marginTop:h,marginRight:p,marginLeft:m,marginBottom:g}=i,{insetLeft:b,insetRight:y}=this;return J("svg:g",o).call(St,this,i,o).call(ut,this,{y:l&&a},0,Te).call(x=>x.selectAll().data(t).enter().append("line").call(_t,this).attr("x1",c&&!ur(s)?_=>c[_]+b:m+b).attr("x2",u&&!ur(s)?s.bandwidth?_=>u[_]+s.bandwidth()-y:_=>u[_]-y:d-p-y).attr("y1",l?_=>l[_]:(h+f-g)/2).attr("y2",l?_=>l[_]:(h+f-g)/2).call(zt,this,r).call(Ss,this,r,o)).node()}};function Pr(e,t){let{x:n=Y,y:r,y1:i,y2:o,...s}=t1(t);return[i,o]=oF(r,i,o),new np(e,{...s,x:n,y1:i,y2:o})}function Ur(e,t){let{y:n=Y,x:r,x1:i,x2:o,...s}=Jb(t);return[i,o]=oF(r,i,o),new rp(e,{...s,y:n,x1:i,x2:o})}function oF(e,t,n){if(e==null){if(t===void 0){if(n!==void 0)return[0,n]}else if(n===void 0)return[0,t]}else{if(t===void 0)return n===void 0?[0,e]:[e,n];if(n===void 0)return[e,t]}return[t,n]}function Ta(e,...t){let n=t.length;for(let r=0,i=!0;r<n;++r)typeof t[r]!="function"&&(i&&(e=e.slice(),i=!1),e.splice(r,2,e[r]+t[r]+e[r+1]),t.splice(r,1),--r,--n);return r=>{let i=e[0];for(let o=0;o<n;++o)i+=t[o](r)+e[o+1];return i}}var y$={ariaLabel:"text",strokeLinejoin:"round",strokeWidth:3,paintOrder:"stroke"},uF="\xAD",Yl=class extends at{constructor(t,n={}){let{x:r,y:i,text:o=cr(t)&&Mb(t)?Y:Ae,frameAnchor:s,textAnchor:a=/right$/i.test(s)?"end":/left$/i.test(s)?"start":"middle",lineAnchor:l=/^top/i.test(s)?"top":/^bottom/i.test(s)?"bottom":"middle",lineHeight:c=1,lineWidth:u=1/0,textOverflow:d,monospace:f,fontFamily:h=f?"ui-monospace, monospace":void 0,fontSize:p,fontStyle:m,fontVariant:g,fontWeight:b,rotate:y}=n,[x,_]=Kt(y,0),[v,w]=x$(p);if(super(t,{x:{value:r,scale:"x",optional:!0},y:{value:i,scale:"y",optional:!0},fontSize:{value:v,optional:!0},rotate:{value:_4(x),optional:!0},text:{value:o,filter:Uh,optional:!0}},n,y$),this.rotate=_,this.textAnchor=te(a,"middle"),this.lineAnchor=Xe(l,"lineAnchor",["top","middle","bottom"]),this.lineHeight=+c,this.lineWidth=+u,this.textOverflow=sS(d),this.monospace=!!f,this.fontFamily=Le(h),this.fontSize=w,this.fontStyle=Le(m),this.fontVariant=Le(g),this.fontWeight=Le(b),this.frameAnchor=xo(s),!(this.lineWidth>=0))throw new Error(`invalid lineWidth: ${u}`);this.splitLines=lS(this),this.clipLine=cS(this)}render(t,n,r,i,o){let{x:s,y:a}=n,{x:l,y:c,rotate:u,text:d,title:f,fontSize:h}=r,{rotate:p}=this,[m,g]=yn(this,i);return J("svg:g",o).call(St,this,i,o).call(aS,this,d,i).call(ut,this,{x:l&&s,y:c&&a}).call(b=>b.selectAll().data(t).enter().append("text").call(_t,this).call(g$,this,d,f).attr("transform",Ta`translate(${l?y=>l[y]:m},${c?y=>c[y]:g})${u?y=>` rotate(${u[y]})`:p?` rotate(${p})`:""}`).call(et,"font-size",h&&(y=>h[y])).call(zt,this,r)).node()}};function sS(e){return e==null?null:Xe(e,"textOverflow",["clip","ellipsis","clip-start","clip-end","ellipsis-start","ellipsis-middle","ellipsis-end"]).replace(/^(clip|ellipsis)$/,"$1-end")}function g$(e,t,n,r){if(!n)return;let{lineAnchor:i,lineHeight:o,textOverflow:s,splitLines:a,clipLine:l}=t;e.each(function(c){let u=a(ki(n[c])??"").map(l),d=u.length,f=i==="top"?.71:i==="bottom"?1-d:(164-d*100)/200;if(d>1){let h=0;for(let p=0;p<d;++p){if(++h,!u[p])continue;let m=this.ownerDocument.createElementNS(Xr.svg,"tspan");m.setAttribute("x",0),p===h-1?m.setAttribute("y",`${(f+p)*o}em`):m.setAttribute("dy",`${h*o}em`),m.textContent=u[p],this.appendChild(m),h=0}}else f&&this.setAttribute("y",`${f*o}em`),this.textContent=u[0];if(s&&!r&&u[0]!==n[c]){let h=this.ownerDocument.createElementNS(Xr.svg,"title");h.textContent=n[c],this.appendChild(h)}})}function $r(e,{x:t,y:n,...r}={}){return r.frameAnchor===void 0&&([t,n]=Fe(t,n)),new Yl(e,{...r,x:t,y:n})}function r1(e,{x:t=Y,...n}={}){return new Yl(e,n1({...n,x:t}))}function i1(e,{y:t=Y,...n}={}){return new Yl(e,e1({...n,y:t}))}function aS(e,t,n){et(e,"text-anchor",t.textAnchor),et(e,"font-family",t.fontFamily),et(e,"font-size",t.fontSize),et(e,"font-style",t.fontStyle),et(e,"font-variant",t.fontVariant===void 0?b$(n):t.fontVariant),et(e,"font-weight",t.fontWeight)}function b$(e){return e&&(ys(e)||Se(e))?"tabular-nums":void 0}var _$=new Set(["inherit","initial","revert","unset","xx-small","x-small","small","medium","large","x-large","xx-large","xxx-large","larger","smaller"]);function x$(e){return e==null||typeof e=="number"?[void 0,e]:typeof e!="string"?[e,void 0]:(e=e.trim().toLowerCase(),_$.has(e)||/^[+-]?\d*\.?\d+(e[+-]?\d+)?(\w*|%)$/.test(e)?[void 0,e]:[e,void 0])}function w$(e,t,n){let r=[],i,o=0;for(let[s,a,l]of v$(e)){if(i===void 0&&(i=s),o>i&&n(e,i,a)>t&&(r.push(e.slice(i,o)+(e[o-1]===uF?"-":"")),i=s),l){r.push(e.slice(i,a)),i=void 0;continue}o=a}return r}function*v$(e){let t=0,n=0,r=e.length;for(;n<r;){let i=1;switch(e[n]){case uF:case"-":++n,yield[t,n,!1],t=n;break;case" ":for(yield[t,n,!1];e[++n]===" ";);t=n;break;case"\r":e[n+1]===`
`&&++i;case`
`:yield[t,n,!0],n+=i,t=n;break;default:++n;break}}yield[t,n,!0]}var sF={a:56,b:63,c:57,d:63,e:58,f:37,g:62,h:60,i:26,j:26,k:55,l:26,m:88,n:60,o:60,p:62,q:62,r:39,s:54,t:38,u:60,v:55,w:79,x:54,y:55,z:55,A:69,B:67,C:73,D:74,E:61,F:58,G:76,H:75,I:28,J:55,K:67,L:58,M:89,N:75,O:78,P:65,Q:78,R:67,S:65,T:65,U:75,V:69,W:98,X:69,Y:67,Z:67,0:64,1:48,2:62,3:64,4:66,5:63,6:65,7:58,8:65,9:65," ":29,"!":32,'"':49,"'":31,"(":39,")":39,",":31,"-":48,".":31,"/":32,":":31,";":31,"?":52,"\u2018":31,"\u2019":31,"\u201C":47,"\u201D":47,"\u2026":82};function o1(e,t=0,n=e.length){let r=0;for(let i=t;i<n;i=zu(e,i))r+=sF[e[i]]??(dF(e,i)?120:sF.e);return r}function s1(e,t=0,n=e.length){let r=0;for(let i=t;i<n;i=zu(e,i))r+=dF(e,i)?200:100;return r}function lS({monospace:e,lineWidth:t,textOverflow:n}){if(n!=null||t==1/0)return o=>o.split(/\r\n?|\n/g);let r=e?s1:o1,i=t*100;return o=>w$(o,i,r)}function cS({monospace:e,lineWidth:t,textOverflow:n}){if(n==null||t==1/0)return o=>o;let r=e?s1:o1,i=t*100;switch(n){case"clip-start":return o=>lF(o,i,r,"");case"clip-end":return o=>aF(o,i,r,"");case"ellipsis-start":return o=>lF(o,i,r,jl);case"ellipsis-middle":return o=>S$(o,i,r,jl);case"ellipsis-end":return o=>aF(o,i,r,jl)}}var jl="\u2026";function ql(e,t,n,r){let i=[],o=0;for(let s=0,a=0,l=e.length;s<l;s=a){a=zu(e,s);let c=n(e,s,a);if(o+c>t){for(o+=r;o>t&&s>0;)a=s,s=i.pop(),o-=n(e,s,a);return[s,t-o]}o+=c,i.push(s)}return[-1,0]}function aF(e,t,n,r){e=e.trim();let i=n(r),[o]=ql(e,t,n,i);return o<0?e:e.slice(0,o).trimEnd()+r}function S$(e,t,n,r){e=e.trim();let i=n(e);if(i<=t)return e;let o=n(r)/2,[s,a]=ql(e,t/2,n,o),[l]=ql(e,i-t/2-a+o,n,-o);return l<0?r:e.slice(0,s).trimEnd()+r+e.slice(zu(e,l)).trimStart()}function lF(e,t,n,r){e=e.trim();let i=n(e);if(i<=t)return e;let o=n(r),[s]=ql(e,i-t+o,n,-o);return s<0?r:r+e.slice(zu(e,s)).trimStart()}var oS=/[\p{Combining_Mark}\p{Emoji_Modifier}]+/uy,cF=/\p{Extended_Pictographic}/uy;function zu(e,t){return t+=T$(e,t)?2:1,E$(e,t)&&(t=oS.lastIndex),I$(e,t)?zu(e,t+1):t}function fF(e,t){return e.charCodeAt(t)<128}function T$(e,t){let n=e.charCodeAt(t);if(n>=55296&&n<56320){let r=e.charCodeAt(t+1);return r>=56320&&r<57344}return!1}function I$(e,t){return e.charCodeAt(t)===8205}function E$(e,t){return fF(e,t)?!1:(oS.lastIndex=t,oS.test(e))}function dF(e,t){return fF(e,t)?!1:(cF.lastIndex=t,cF.test(e))}var hF={ariaLabel:"vector",fill:"none",stroke:"currentColor",strokeWidth:1.5,strokeLinejoin:"round",strokeLinecap:"round"},pF=3.5,M$=pF*5,mF={draw(e,t,n){let r=t*n/M$;e.moveTo(0,0),e.lineTo(0,-t),e.moveTo(-r,r-t),e.lineTo(0,-t),e.lineTo(r,r-t)}},yF={draw(e,t,n){e.moveTo(-n,0),e.lineTo(0,-t),e.lineTo(n,0)}},A$=new Map([["arrow",mF],["spike",yF]]);function F$(e){return e&&typeof e.draw=="function"}function k$(e){if(F$(e))return e;let t=A$.get(`${e}`.toLowerCase());if(t)return t;throw new Error(`invalid shape: ${e}`)}var Wl=class extends at{constructor(t,n={}){let{x:r,y:i,r:o=pF,length:s,rotate:a,shape:l=mF,anchor:c="middle",frameAnchor:u}=n,[d,f]=Kt(s,12),[h,p]=Kt(a,0);super(t,{x:{value:r,scale:"x",optional:!0},y:{value:i,scale:"y",optional:!0},length:{value:d,scale:"length",optional:!0},rotate:{value:h,optional:!0}},n,hF),this.r=+o,this.length=f,this.rotate=p,this.shape=k$(l),this.anchor=Xe(c,"anchor",["start","middle","end"]),this.frameAnchor=xo(u)}render(t,n,r,i,o){let{x:s,y:a}=n,{x:l,y:c,length:u,rotate:d}=r,{length:f,rotate:h,anchor:p,shape:m,r:g}=this,[b,y]=yn(this,i);return J("svg:g",o).call(St,this,i,o).call(ut,this,{x:l&&s,y:c&&a}).call(x=>x.selectAll().data(t).enter().append("path").call(_t,this).attr("transform",Ta`translate(${l?_=>l[_]:b},${c?_=>c[_]:y})${d?_=>` rotate(${d[_]})`:h?` rotate(${h})`:""}${p==="start"?"":p==="end"?u?_=>` translate(0,${u[_]})`:` translate(0,${f})`:u?_=>` translate(0,${u[_]/2})`:` translate(0,${f/2})`}`).attr("d",u?_=>{let v=er();return m.draw(v,u[_],g),v}:(()=>{let _=er();return m.draw(_,f,g),_})()).call(zt,this,r)).node()}};function uS(e,t={}){let{x:n,y:r,...i}=t;return t.frameAnchor===void 0&&([n,r]=Fe(n,r)),new Wl(e,{...i,x:n,y:r})}function a1(e,t={}){let{x:n=Y,...r}=t;return new Wl(e,{...r,x:n})}function l1(e,t={}){let{y:n=Y,...r}=t;return new Wl(e,{...r,y:n})}function gF(e,t={}){let{shape:n=yF,stroke:r=hF.stroke,strokeWidth:i=1,fill:o=r,fillOpacity:s=.3,anchor:a="start",...l}=t;return uS(e,{...l,shape:n,stroke:r,strokeWidth:i,fill:o,fillOpacity:s,anchor:a})}function Ia(e,t){return arguments.length<2&&!cr(e)&&(t=e,e=null),t===void 0&&(t={}),[e,t]}function c1({anchor:e}={},t){return e===void 0?t[0]:Xe(e,"anchor",t)}function bF(e){return c1(e,["left","right"])}function _F(e){return c1(e,["right","left"])}function xF(e){return c1(e,["bottom","top"])}function wF(e){return c1(e,["top","bottom"])}function ip(){let[e,t]=Ia(...arguments);return vF("y",bF(t),e,t)}function u1(){let[e,t]=Ia(...arguments);return vF("fy",_F(t),e,t)}function op(){let[e,t]=Ia(...arguments);return SF("x",xF(t),e,t)}function f1(){let[e,t]=Ia(...arguments);return SF("fx",wF(t),e,t)}function vF(e,t,n,{color:r="currentColor",opacity:i=1,stroke:o=r,strokeOpacity:s=i,strokeWidth:a=1,fill:l=r,fillOpacity:c=i,textAnchor:u,textStroke:d,textStrokeOpacity:f,textStrokeWidth:h,tickSize:p=e==="y"?6:0,tickPadding:m,tickRotate:g,x:b,margin:y,marginTop:x=y===void 0?20:y,marginRight:_=y===void 0?t==="right"?40:0:y,marginBottom:v=y===void 0?20:y,marginLeft:w=y===void 0?t==="left"?40:0:y,label:T,labelAnchor:M,labelArrow:F,labelOffset:S,...I}){return p=bt(p),m=bt(m),g=bt(g),M!==void 0&&(M=Xe(M,"labelAnchor",["center","top","bottom"])),F=NF(F),bn(p&&!ne(o)?N$(e,t,n,{stroke:o,strokeOpacity:s,strokeWidth:a,tickSize:p,tickPadding:m,tickRotate:g,x:b,...I}):null,ne(l)?null:C$(e,t,n,{fill:l,fillOpacity:c,stroke:d,strokeOpacity:f,strokeWidth:h,textAnchor:u,tickSize:p,tickPadding:m,tickRotate:g,x:b,marginTop:x,marginRight:_,marginBottom:v,marginLeft:w,...I}),!ne(l)&&T!==null?$r([],MF({fill:l,fillOpacity:c,...I},function(k,O,N,A,C){let L=A[e],{marginTop:U,marginRight:B,marginBottom:$,marginLeft:V}=e==="y"&&C.inset||C,z=M??(L.bandwidth?"center":"top"),Q=S??(t==="right"?B:V)-3;return z==="center"?(this.textAnchor=void 0,this.lineAnchor=t==="right"?"bottom":"top",this.frameAnchor=t,this.rotate=-90):(this.textAnchor=t==="right"?"end":"start",this.lineAnchor=z,this.frameAnchor=`${z}-${t}`,this.rotate=0),this.dy=z==="top"?3-U:z==="bottom"?$-3:0,this.dx=t==="right"?Q:-Q,this.ariaLabel=`${e}-axis label`,{facets:[[0]],channels:{text:{value:[kF(e,L,{anchor:t,label:T,labelAnchor:z,labelArrow:F})]}}}})):null)}function SF(e,t,n,{color:r="currentColor",opacity:i=1,stroke:o=r,strokeOpacity:s=i,strokeWidth:a=1,fill:l=r,fillOpacity:c=i,textAnchor:u,textStroke:d,textStrokeOpacity:f,textStrokeWidth:h,tickSize:p=e==="x"?6:0,tickPadding:m,tickRotate:g,y:b,margin:y,marginTop:x=y===void 0?t==="top"?30:0:y,marginRight:_=y===void 0?20:y,marginBottom:v=y===void 0?t==="bottom"?30:0:y,marginLeft:w=y===void 0?20:y,label:T,labelAnchor:M,labelArrow:F,labelOffset:S,...I}){return p=bt(p),m=bt(m),g=bt(g),M!==void 0&&(M=Xe(M,"labelAnchor",["center","left","right"])),F=NF(F),bn(p&&!ne(o)?O$(e,t,n,{stroke:o,strokeOpacity:s,strokeWidth:a,tickSize:p,tickPadding:m,tickRotate:g,y:b,...I}):null,ne(l)?null:B$(e,t,n,{fill:l,fillOpacity:c,stroke:d,strokeOpacity:f,strokeWidth:h,textAnchor:u,tickSize:p,tickPadding:m,tickRotate:g,y:b,marginTop:x,marginRight:_,marginBottom:v,marginLeft:w,...I}),!ne(l)&&T!==null?$r([],MF({fill:l,fillOpacity:c,...I},function(k,O,N,A,C){let L=A[e],{marginTop:U,marginRight:B,marginBottom:$,marginLeft:V}=e==="x"&&C.inset||C,z=M??(L.bandwidth?"center":"right"),Q=S??(t==="top"?U:$)-3;return z==="center"?(this.frameAnchor=t,this.textAnchor=void 0):(this.frameAnchor=`${t}-${z}`,this.textAnchor=z==="right"?"end":"start"),this.lineAnchor=t,this.dy=t==="top"?-Q:Q,this.dx=z==="right"?B-3:z==="left"?3-V:0,this.ariaLabel=`${e}-axis label`,{facets:[[0]],channels:{text:{value:[kF(e,L,{anchor:t,label:T,labelAnchor:z,labelArrow:F})]}}}})):null)}function N$(e,t,n,{strokeWidth:r=1,strokeLinecap:i=null,strokeLinejoin:o=null,facetAnchor:s=t+(e==="y"?"-empty":""),frameAnchor:a=t,tickSize:l,inset:c=0,insetLeft:u=c,insetRight:d=c,dx:f=0,y:h=e==="y"?void 0:null,...p}){return Vu(l1,e,t,`${e}-axis tick`,n,{strokeWidth:r,strokeLinecap:i,strokeLinejoin:o,facetAnchor:s,frameAnchor:a,y:h,...p,dx:t==="left"?+f-Te+ +u:+f+Te-d,anchor:"start",length:l,shape:t==="left"?P$:U$})}function O$(e,t,n,{strokeWidth:r=1,strokeLinecap:i=null,strokeLinejoin:o=null,facetAnchor:s=t+(e==="x"?"-empty":""),frameAnchor:a=t,tickSize:l,inset:c=0,insetTop:u=c,insetBottom:d=c,dy:f=0,x:h=e==="x"?void 0:null,...p}){return Vu(a1,e,t,`${e}-axis tick`,n,{strokeWidth:r,strokeLinejoin:o,strokeLinecap:i,facetAnchor:s,frameAnchor:a,x:h,...p,dy:t==="bottom"?+f-Te-d:+f+Te+ +u,anchor:"start",length:l,shape:t==="bottom"?L$:R$})}function C$(e,t,n,{facetAnchor:r=t+(e==="y"?"-empty":""),frameAnchor:i=t,tickSize:o,tickRotate:s=0,tickPadding:a=Math.max(3,9-o)+(Math.abs(s)>60?4*Math.cos(s*$u):0),text:l,textAnchor:c=Math.abs(s)>60?"middle":t==="left"?"end":"start",lineAnchor:u=s>60?"top":s<-60?"bottom":"middle",fontVariant:d,inset:f=0,insetLeft:h=f,insetRight:p=f,dx:m=0,y:g=e==="y"?void 0:null,...b}){return Vu(i1,e,t,`${e}-axis tick label`,n,{facetAnchor:r,frameAnchor:i,text:l,textAnchor:c,lineAnchor:u,fontVariant:d,rotate:s,y:g,...b,dx:t==="left"?+m-o-a+ +h:+m+ +o+ +a-p},function(y,x,_,v,w){d===void 0&&(this.fontVariant=FF(y)),l===void 0&&(w.text=AF(y,x,_,v,t))})}function B$(e,t,n,{facetAnchor:r=t+(e==="x"?"-empty":""),frameAnchor:i=t,tickSize:o,tickRotate:s=0,tickPadding:a=Math.max(3,9-o)+(Math.abs(s)>=10?4*Math.cos(s*$u):0),text:l,textAnchor:c=Math.abs(s)>=10?s<0^t==="bottom"?"start":"end":"middle",lineAnchor:u=Math.abs(s)>=10?"middle":t==="bottom"?"top":"bottom",fontVariant:d,inset:f=0,insetTop:h=f,insetBottom:p=f,dy:m=0,x:g=e==="x"?void 0:null,...b}){return Vu(r1,e,t,`${e}-axis tick label`,n,{facetAnchor:r,frameAnchor:i,text:l===void 0?null:l,textAnchor:c,lineAnchor:u,fontVariant:d,rotate:s,x:g,...b,dy:t==="bottom"?+m+ +o+ +a-p:+m-o-a+ +h},function(y,x,_,v,w){d===void 0&&(this.fontVariant=FF(y)),l===void 0&&(w.text=AF(y,x,_,v,t))})}function d1(){let[e,t]=Ia(...arguments);return TF("y",bF(t),e,t)}function h1(){let[e,t]=Ia(...arguments);return TF("fy",_F(t),e,t)}function p1(){let[e,t]=Ia(...arguments);return IF("x",xF(t),e,t)}function m1(){let[e,t]=Ia(...arguments);return IF("fx",wF(t),e,t)}function TF(e,t,n,{y:r=e==="y"?void 0:null,x:i=null,x1:o=t==="left"?i:null,x2:s=t==="right"?i:null,...a}){return Vu(Ur,e,t,`${e}-grid`,n,{y:r,x1:o,x2:s,...EF(a)})}function IF(e,t,n,{x:r=e==="x"?void 0:null,y:i=null,y1:o=t==="top"?i:null,y2:s=t==="bottom"?i:null,...a}){return Vu(Pr,e,t,`${e}-grid`,n,{x:r,y1:o,y2:s,...EF(a)})}function EF({color:e="currentColor",opacity:t=.1,stroke:n=e,strokeOpacity:r=t,strokeWidth:i=1,...o}){return{stroke:n,strokeOpacity:r,strokeWidth:i,...o}}function MF({fill:e,fillOpacity:t,fontFamily:n,fontSize:r,fontStyle:i,fontVariant:o,fontWeight:s,monospace:a,pointerEvents:l,shapeRendering:c,clip:u=!1},d){return[,e]=De(e),[,t]=Kt(t),{facet:"super",x:null,y:null,fill:e,fillOpacity:t,fontFamily:n,fontSize:r,fontStyle:i,fontVariant:o,fontWeight:s,monospace:a,pointerEvents:l,shapeRendering:c,clip:u,initializer:d}}function Vu(e,t,n,r,i,o,s){let a;function l(d,f,h,p,m,g){let b=d==null&&(t==="fx"||t==="fy"),{[t]:y}=p;if(!y)throw new Error(`missing scale: ${t}`);let x=y.domain(),{interval:_,ticks:v,tickFormat:w,tickSpacing:T=t==="x"?80:35}=o;if(typeof v=="string"&&OF(y)&&(_=v,v=void 0),v===void 0&&(v=bo(_,y.type)??D$(y,T)),d==null){if(cr(v))d=Re(v);else if(ma(v))d=fS(v,...Qt(x));else if(y.interval){let F=y.interval;if(y.ticks){let[S,I]=Qt(x),k=(I-S)/F[wu];F=u2(F,k/v)??F,d=fS(F,S,I)}else{d=x;let S=d.length;F=u2(F,S/v)??F,F!==y.interval&&(d=fS(F,...Qt(d)))}if(F===y.interval){let S=Math.round(d.length/v);S>1&&(d=d.filter((I,k)=>k%S===0))}}else y.ticks?d=y.ticks(v):d=x;if(!y.ticks&&d.length&&d!==x){let F=new Or(x);d=d.filter(S=>F.has(S)),d.length||Yn(`Warning: the ${t}-axis ticks appear to not align with the scale domain, resulting in no ticks. Try different ticks?`)}t==="y"||t==="x"?f=[ar(d)]:a[t]={scale:t,value:Y}}s?.call(this,y,d,v,w,a);let M=Object.fromEntries(Object.entries(a).map(([F,S])=>[F,{...S,value:st(d,S.value)}]));return b&&(f=g.filterFacets(d,M)),{data:d,facets:f,channels:M}}let c=ye(o).initializer,u=e(i,ye({...o,initializer:l},c));return i==null?(a=u.channels,u.channels={}):a={},u.ariaLabel=r,u.clip===void 0&&(u.clip=!1),u}function D$(e,t){let[n,r]=Qt(e.range());return(r-n)/t}function AF(e,t,n,r,i){return{value:sp(e,t,n,r,i)}}function sp(e,t,n,r,i){return typeof r=="function"?r:r===void 0&&t&&Se(t)?f4(t,i)??ki:e.tickFormat?e.tickFormat(typeof n=="number"?n:null,r):r===void 0?ki:typeof r=="string"?(Se(e.domain())?po:Qr)(r):dn(r)}function fS(e,t,n){return e.range(t,e.offset(e.floor(n)))}var L$={draw(e,t){e.moveTo(0,0),e.lineTo(0,t)}},R$={draw(e,t){e.moveTo(0,0),e.lineTo(0,-t)}},P$={draw(e,t){e.moveTo(0,0),e.lineTo(-t,0)}},U$={draw(e,t){e.moveTo(0,0),e.lineTo(t,0)}};function FF(e){return e.bandwidth&&!e.interval?void 0:"tabular-nums"}function $$(e){return Math.sign(ds(e.domain()))*Math.sign(ds(e.range()))}function kF(e,t,{anchor:n,label:r=t.label,labelAnchor:i,labelArrow:o}={}){if(!(r==null||r.inferred&&OF(t)&&/^(date|time|year)$/i.test(r))){if(r=String(r),o==="auto"&&(o=(!t.bandwidth||t.interval)&&!/[↑↓→←]/.test(r)),!o)return r;if(o===!0){let s=$$(t);s&&(o=/x$/.test(e)||i==="center"?/x$/.test(e)===s<0?"left":"right":s<0?"up":"down")}switch(o){case"left":return`\u2190 ${r}`;case"right":return`${r} \u2192`;case"up":return n==="right"?`${r} \u2191`:`\u2191 ${r}`;case"down":return n==="right"?`${r} \u2193`:`\u2193 ${r}`}return r}}function NF(e="auto"){return ne(e)?!1:typeof e=="boolean"?e:Xe(e,"labelArrow",["auto","up","right","down","left"])}function OF(e){return Se(e.domain())}function CF(e,t){if(t==null)return t;let n=e(t);if(!n)throw new Error(`scale not found: ${t}`);return n}function BF(e,{opacity:t,...n}={}){if(!vo(e)&&!W2(e))throw new Error(`swatches legend requires ordinal or threshold color scale (not ${e.type})`);return LF(e,n,(r,i,o,s)=>r.append("svg").attr("width",o).attr("height",s).attr("fill",i.scale).attr("fill-opacity",Kt(t)[1]).append("rect").attr("width","100%").attr("height","100%"))}function DF(e,{fill:t=e.hint?.fill!==void 0?e.hint.fill:"none",fillOpacity:n=1,stroke:r=e.hint?.stroke!==void 0?e.hint.stroke:ne(t)?"currentColor":"none",strokeOpacity:i=1,strokeWidth:o=1.5,r:s=4.5,...a}={},l){let[c,u]=De(t),[d,f]=De(r),h=CF(l,c),p=CF(l,d),m=s*s*Math.PI;return n=Kt(n)[1],i=Kt(i)[1],o=Kt(o)[1],LF(e,a,(g,b,y,x)=>g.append("svg").attr("viewBox","-8 -8 16 16").attr("width",y).attr("height",x).attr("fill",c==="color"?_=>h.scale(_):u).attr("fill-opacity",n).attr("stroke",d==="color"?_=>p.scale(_):f).attr("stroke-opacity",i).attr("stroke-width",o).append("path").attr("d",_=>{let v=er();return e.scale(_).draw(v,m),v}))}function LF(e,t={},n){let{columns:r,tickFormat:i,fontVariant:o=Kb(e),swatchSize:s=15,swatchWidth:a=s,swatchHeight:l=s,marginLeft:c=0,className:u,style:d,width:f}=t,h=xa(t);u=Nu(u),i=sp(e.scale,e.domain,void 0,i);let p=J("div",h).attr("class",`${u}-swatches ${u}-swatches-${r!=null?"columns":"wrap"}`),m;return r!=null?(m=`.${u}-swatches-columns .${u}-swatch {
  display: flex;
  align-items: center;
  break-inside: avoid;
  padding-bottom: 1px;
}
.${u}-swatches-columns .${u}-swatch::before {
  flex-shrink: 0;
}
.${u}-swatches-columns .${u}-swatch-label {
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}`,p.style("columns",r).selectAll().data(e.domain).enter().append("div").attr("class",`${u}-swatch`).call(n,e,a,l).call(g=>g.append("div").attr("class",`${u}-swatch-label`).attr("title",i).text(i))):(m=`.${u}-swatches-wrap {
  display: flex;
  align-items: center;
  min-height: 33px;
  flex-wrap: wrap;
}
.${u}-swatches-wrap .${u}-swatch {
  display: inline-flex;
  align-items: center;
  margin-right: 1em;
}`,p.selectAll().data(e.domain).enter().append("span").attr("class",`${u}-swatch`).call(n,e,a,l).append(function(){return this.ownerDocument.createTextNode(i.apply(this,arguments))})),p.call(g=>g.insert("style","*").text(`.${u}-swatches {
  font-family: system-ui, sans-serif;
  font-size: 10px;
  margin-bottom: 0.5em;
}
.${u}-swatch > svg {
  margin-right: 0.5em;
  overflow: visible;
}
${m}`)).style("margin-left",c?`${+c}px`:null).style("width",f===void 0?null:`${+f}px`).style("font-variant",te(o,"normal")).call(Ou,d).node()}var y1=new Map([["symbol",DF],["color",UF],["opacity",z$]]);function RF(e={}){for(let[t,n]of y1){let r=e[t];if(yo(r)){let i=xa(e),o;if(t==="symbol"){let{fill:s,stroke:a=s===void 0&&yo(e.color)?"color":void 0}=e;o={fill:s,stroke:a}}return n(Wb(t,r,o),dS(i,r,e),s=>yo(e[s])?Wb(s,e[s]):null)}}throw new Error("unknown legend type; no scale found")}function PF(e,t,n={}){return(r,i)=>{if(!y1.has(r))throw new Error(`unknown legend type: ${r}`);if(r in e)return y1.get(r)(e[r],dS(t,n[r],i),o=>e[o])}}function dS({className:e,...t},{label:n,ticks:r,tickFormat:i}={},o){return I4(o,{className:e,...t},{label:n,ticks:r,tickFormat:i})}function UF(e,{legend:t=!0,...n}){if(t===!0&&(t=e.type==="ordinal"?"swatches":"ramp"),e.domain!==void 0)switch(`${t}`.toLowerCase()){case"swatches":return BF(e,n);case"ramp":return Z8(e,n);default:throw new Error(`unknown legend type: ${t}`)}}function z$({type:e,interpolate:t,...n},{legend:r=!0,color:i=Qn(0,0,0),...o}){if(!t)throw new Error(`${e} opacity scales are not supported`);if(r===!0&&(r="ramp"),`${r}`.toLowerCase()!=="ramp")throw new Error(`${r} opacity legends are not supported`);return UF({type:e,...n,interpolate:V$(i)},{legend:r,...o})}function V$(e){let{r:t,g:n,b:r}=Qn(e)||Qn(0,0,0);return i=>`rgba(${t},${n},${r},${i})`}function $F(e,t,n){let r=[];for(let[i,o]of y1){let s=n[i];if(s?.legend&&i in e){let a=o(e[i],dS(t,e[i],s),l=>e[l]);a!=null&&r.push(a)}}return r}var j$={ariaLabel:"frame",fill:"none",stroke:"currentColor",clip:!1},Y$={ariaLabel:"frame",fill:null,stroke:"currentColor",strokeLinecap:"square",clip:!1},ap=class extends at{constructor(t={}){let{anchor:n=null,inset:r=0,insetTop:i=r,insetRight:o=r,insetBottom:s=r,insetLeft:a=r,rx:l,ry:c}=t;super(da,void 0,t,n==null?j$:Y$),this.anchor=m2(n,"anchor",["top","right","bottom","left"]),this.insetTop=bt(i),this.insetRight=bt(o),this.insetBottom=bt(s),this.insetLeft=bt(a),this.rx=bt(l),this.ry=bt(c)}render(t,n,r,i,o){let{marginTop:s,marginRight:a,marginBottom:l,marginLeft:c,width:u,height:d}=i,{anchor:f,insetTop:h,insetRight:p,insetBottom:m,insetLeft:g,rx:b,ry:y}=this,x=c+g,_=u-a-p,v=s+h,w=d-l-m;return J(f?"svg:line":"svg:rect",o).datum(0).call(St,this,i,o).call(_t,this).call(zt,this,r).call(ut,this,{}).call(f==="left"?T=>T.attr("x1",x).attr("x2",x).attr("y1",v).attr("y2",w):f==="right"?T=>T.attr("x1",_).attr("x2",_).attr("y1",v).attr("y2",w):f==="top"?T=>T.attr("x1",x).attr("x2",_).attr("y1",v).attr("y2",v):f==="bottom"?T=>T.attr("x1",x).attr("x2",_).attr("y1",w).attr("y2",w):T=>T.attr("x",x).attr("y",v).attr("width",_-x).attr("height",w-v).attr("rx",b).attr("ry",y)).node()}};function ju(e){return new ap(e)}var hS={ariaLabel:"tip",fill:"white",stroke:"currentColor"},q$=new Set(["geometry","href","src","ariaLabel","scales"]),lp=class extends at{constructor(t,n={}){n.tip&&(n={...n,tip:!1}),n.title===void 0&&cr(t)&&Mb(t)&&(n={...n,title:Y});let{x:r,y:i,x1:o,x2:s,y1:a,y2:l,anchor:c,monospace:u,fontFamily:d=u?"ui-monospace, monospace":void 0,fontSize:f,fontStyle:h,fontVariant:p,fontWeight:m,lineHeight:g=1,lineWidth:b=20,frameAnchor:y,format:x,textAnchor:_="start",textOverflow:v,textPadding:w=8,title:T,pointerSize:M=12,pathFilter:F="drop-shadow(0 3px 4px rgba(0,0,0,0.2))"}=n;super(t,{x:{value:o!=null&&s!=null?null:r,scale:"x",optional:!0},y:{value:a!=null&&l!=null?null:i,scale:"y",optional:!0},x1:{value:o,scale:"x",optional:s==null},y1:{value:a,scale:"y",optional:l==null},x2:{value:s,scale:"x",optional:o==null},y2:{value:l,scale:"y",optional:a==null},title:{value:T,optional:!0}},n,hS),this.anchor=x2(c,"anchor"),this.previousAnchor=this.anchor??"top-left",this.frameAnchor=xo(y),this.textAnchor=te(_,"middle"),this.textPadding=+w,this.pointerSize=+M,this.pathFilter=Le(F),this.lineHeight=+g,this.lineWidth=+b,this.textOverflow=sS(v),this.monospace=!!u,this.fontFamily=Le(d),this.fontSize=bt(f),this.fontStyle=Le(h),this.fontVariant=Le(p),this.fontWeight=Le(m);for(let S in hS)S in this.channels&&(this[S]=hS[S]);this.splitLines=lS(this),this.clipLine=cS(this),this.format={...x}}render(t,n,r,i,o){let s=this,{x:a,y:l,fx:c,fy:u}=n,{ownerSVGElement:d,document:f}=o,{anchor:h,monospace:p,lineHeight:m,lineWidth:g}=this,{textPadding:b,pointerSize:y,pathFilter:x}=this,{marginTop:_,marginLeft:v}=i,{x1:w,y1:T,x2:M,y2:F,x:S=w??M,y:I=T??F}=r,k=c?c(t.fx)-v:0,O=u?u(t.fy)-_:0,[N,A]=yn(this,i),C=tS(r,N),L=eS(r,A),U=p?s1:o1,B=U(jl),$,V;"title"in r?($=r.channels,V=Z$):($=X$.call(this,r,n),V=K$);let z=J("svg:g",o).call(St,this,i,o).call(aS,this).call(ut,this,{x:S&&a,y:I&&l}).call(ft=>ft.selectAll().data(t).enter().append("g").attr("transform",ht=>`translate(${Math.round(C(ht))},${Math.round(L(ht))})`).call(_t,this).call(ht=>ht.append("path").attr("filter",x)).call(ht=>ht.append("text").each(function(G){let ct=Ce(this);this.setAttribute("fill","currentColor"),this.setAttribute("fill-opacity",1),this.setAttribute("stroke","none");let R=V.call(s,G,t,$,n,r);if(typeof R=="string")for(let Z of s.splitLines(R))Q(ct,{value:s.clipLine(Z)});else{let Z=new Set;for(let K of R){let{label:D=""}=K;D&&Z.has(D)||(Z.add(D),Q(ct,K))}}})));function Q(ft,{label:ht,value:G,color:ct,opacity:R}){ht??(ht=""),G??(G="");let Z=ct!=null||R!=null,K,D=g*100,[$t]=ql(ht,D,U,B);if($t>=0)ht=ht.slice(0,$t).trimEnd()+jl,K=G.trim(),G="";else{(ht||!G&&!Z)&&(G=" "+G);let[qt]=ql(G,D-U(ht),U,B);qt>=0&&(G=G.slice(0,qt).trimEnd()+jl,K=G.trim())}let ot=ft.append("tspan").attr("x",0).attr("dy",`${m}em`).text("\u200B");ht&&ot.append("tspan").attr("font-weight","bold").text(ht),G&&ot.append(()=>f.createTextNode(G)),Z&&ot.append("tspan").text(" \u25A0").attr("fill",ct).attr("fill-opacity",R).style("user-select","none"),K&&ot.append("title").text(K)}function Ft(){let{width:ft,height:ht}=i.facet??i;z.selectChildren().each(function(G){let{x:ct,width:R,height:Z}=this.getBBox();R=Math.round(R),Z=Math.round(Z);let K=h;if(K===void 0){K=s.previousAnchor;let ot=C(G)+k,qt=L(G)+O,Zt=ot+R+b*2<ft,tn=ot-R-b*2>0,Ra=qt+Z+y+b*2+7<ht,zp=qt-Z-y-b*2>0,n_=(/-left$/.test(K)?Zt||!tn:Zt&&!tn)?"left":"right",r_=(/^top-/.test(K)?Ra||!zp:Ra&&!zp)?"top":"bottom";K=s.previousAnchor=`${r_}-${n_}`}let D=this.firstChild,$t=this.lastChild;if(D.setAttribute("d",H$(K,y,b,R,Z)),ct)for(let ot of $t.childNodes)ot.setAttribute("x",-ct);$t.setAttribute("y",`${+W$(K,$t.childNodes.length,m).toFixed(6)}em`),$t.setAttribute("transform",`translate(${G$(K,y,b,R,Z)})`)}),z.attr("visibility",null)}return t.length&&(z.attr("visibility","hidden"),d.isConnected?Promise.resolve().then(Ft):typeof requestAnimationFrame<"u"&&requestAnimationFrame(Ft)),z.node()}};function Yu(e,{x:t,y:n,...r}={}){return r.frameAnchor===void 0&&([t,n]=Fe(t,n)),new lp(e,{...r,x:t,y:n})}function W$(e,t,n){return/^top(?:-|$)/.test(e)?.94-n:-.29-t*n}function G$(e,t,n,r,i){switch(e){case"middle":return[-r/2,i/2];case"top-left":return[n,t+n];case"top":return[-r/2,t/2+n];case"top-right":return[-r-n,t+n];case"right":return[-t/2-r-n,i/2];case"bottom-left":return[n,-t-n];case"bottom":return[-r/2,-t/2-n];case"bottom-right":return[-r-n,-t-n];case"left":return[n+t/2,i/2]}}function H$(e,t,n,r,i){let o=r+n*2,s=i+n*2;switch(e){case"middle":return`M${-o/2},${-s/2}h${o}v${s}h${-o}z`;case"top-left":return`M0,0l${t},${t}h${o-t}v${s}h${-o}z`;case"top":return`M0,0l${t/2},${t/2}h${(o-t)/2}v${s}h${-o}v${-s}h${(o-t)/2}z`;case"top-right":return`M0,0l${-t},${t}h${t-o}v${s}h${o}z`;case"right":return`M0,0l${-t/2},${-t/2}v${t/2-s/2}h${-o}v${s}h${o}v${t/2-s/2}z`;case"bottom-left":return`M0,0l${t},${-t}h${o-t}v${-s}h${-o}z`;case"bottom":return`M0,0l${t/2},${-t/2}h${(o-t)/2}v${-s}h${-o}v${s}h${(o-t)/2}z`;case"bottom-right":return`M0,0l${-t},${-t}h${t-o}v${-s}h${o}z`;case"left":return`M0,0l${t/2},${-t/2}v${t/2-s/2}h${o}v${s}h${-o}v${t/2-s/2}z`}}function X$({channels:e},t){let n={},r=this.format;r=zF(r,e,"x"),r=zF(r,e,"y"),this.format=r;for(let i in r){let o=r[i];if(!(o===null||o===!1))if(i==="fx"||i==="fy")n[i]=!0;else{let s=Zh(e,i);s&&(n[i]=s)}}for(let i in e){if(i in n||i in r||q$.has(i))continue;let o=Zh(e,i);o&&(n[i]=o)}this.facet&&(t.fx&&!("fx"in r)&&(n.fx=!0),t.fy&&!("fy"in r)&&(n.fy=!0));for(let i in n){let o=this.format[i];if(typeof o=="string"){let s=n[i]?.value??t[i]?.domain()??[];this.format[i]=(Se(s)?po:Qr)(o)}else if(o===void 0||o===!0){let s=t[i];this.format[i]=s?.bandwidth?sp(s,s.domain()):ki}}return n}function zF(e,t,n){if(!(n in e))return e;let r=`${n}1`,i=`${n}2`;if((r in e||!(r in t))&&(i in e||!(i in t)))return e;let o=Object.entries(e),s=e[n];return o.splice(o.findIndex(([a])=>a===n)+1,0,[r,s],[i,s]),Object.fromEntries(o)}function Z$(e,t,{title:n}){return ki(n.value[e],e)}function*K$(e,t,n,r,i){for(let o in n){if(o==="fx"||o==="fy"){yield{label:g1(r,n,o),value:this.format[o](t[o],e)};continue}if(o==="x1"&&"x2"in n||o==="y1"&&"y2"in n)continue;let s=n[o];if(o==="x2"&&"x1"in n)yield{label:jF(r,n,"x"),value:VF(this.format.x2,n.x1,s,e)};else if(o==="y2"&&"y1"in n)yield{label:jF(r,n,"y"),value:VF(this.format.y2,n.y1,s,e)};else{let a=s.value[e],l=s.scale;if(!Be(a)&&l==null)continue;yield{label:g1(r,n,o),value:this.format[o](a,e),color:l==="color"?i[o][e]:null,opacity:l==="opacity"?i[o][e]:null}}}}function VF(e,t,n,r){return n.hint?.length?`${e(n.value[r]-t.value[r],r)}`:`${e(t.value[r],r)}\u2013${e(n.value[r],r)}`}function jF(e,t,n){let r=g1(e,t,`${n}1`,n),i=g1(e,t,`${n}2`,n);return r===i?r:`${r}\u2013${i}`}function g1(e,t,n,r=n){let i=t[n],o=e[i?.scale??n];return String(o?.label??i?.label??r)}function up(e={}){let{facet:t,style:n,title:r,subtitle:i,caption:o,ariaLabel:s,ariaDescription:a}=e,l=Nu(e.className),c=e.marks===void 0?[]:qF(e.marks);c.push(...iz(c));let u=nz(t,e),d=new Map;for(let B of c){let $=WF(B,u,e);$&&d.set(B,$)}let f=new Map;u&&cp(f,[u],e),cp(f,d,e);let h=qF(oz(c,f,e));for(let B of h){let $=WF(B,u,e);$&&d.set(B,$)}c.unshift(...h);let p=Y8(f,e);if(p!==void 0){let B=u?Zb(p,u):void 0;for(let V of c){if(V.facet===null||V.facet==="super")continue;let z=d.get(V);z!==void 0&&(z.facetsIndex=V.fx!=null||V.fy!=null?Zb(p,z):B)}let $=new Set;for(let{facetsIndex:V}of d.values())V?.forEach((z,Q)=>{z?.length>0&&$.add(Q)});p.forEach(0<$.size&&$.size<p.length?(V,z)=>V.empty=!$.has(z):V=>V.empty=!1);for(let V of c)if(V.facet==="exclude"){let z=d.get(V);z!==void 0&&(z.facetsIndex=G8(z.facetsIndex))}}for(let B of re.keys())yo(e[B])&&B!=="fx"&&B!=="fy"&&f.set(B,[]);let m=new Map;for(let B of c){if(m.has(B))throw new Error("duplicate mark; each mark must be unique");let{facetsIndex:$,channels:V}=d.get(B)??{},{data:z,facets:Q,channels:Ft}=B.initialize($,V,e);yS(Ft,e),m.set(B,{data:z,facets:Q,channels:Ft})}let g=ep(cp(f,m,e),e),b=V8(g,c,e);B8(g,b);let y=Y2(g),{fx:x,fy:_}=y,v=x||_?q2(g,b):b,w=x||_?dz(y,b):b,T=xa(e),M=T.document,F=Ti("svg").call(M.documentElement),S=F;T.ownerSVGElement=F,T.className=l,T.projection=H4(e,v),T.filterFacets=(B,$)=>Zb(p,{channels:$,groups:Hb(B,$)}),T.getMarkState=B=>{let $=m.get(B),V=d.get(B);return{...$,channels:{...$.channels,...V?.channels}}},T.dispatchValue=B=>{S.value!==B&&(S.value=B,S.dispatchEvent(new Event("input",{bubbles:!0})))};let I=new Set;for(let[B,$]of m)if(B.initializer!=null){let V=B.facet==="super"?w:v,z=B.initializer($.data,$.facets,$.channels,y,V,T);if(z.data!==void 0&&($.data=z.data),z.facets!==void 0&&($.facets=z.facets),z.channels!==void 0){let{fx:Q,fy:Ft,...ft}=z.channels;ez(ft),Object.assign($.channels,ft);for(let ht of Object.values(ft)){let{scale:G}=ht;G!=null&&!M4(re.get(G))&&(XF(ht,e),I.add(G))}(Q!=null||Ft!=null)&&d.set(B,!0)}}if(I.size){let B=new Map;cp(B,m,e,Q=>I.has(Q)),cp(f,m,e,Q=>I.has(Q));let $=fz(ep(B,e),g),{scales:V,...z}=Y2($);Object.assign(g,$),Object.assign(y,z),Object.assign(y.scales,V)}let k,O;p!==void 0&&(k={x:x?.domain(),y:_?.domain()},p=q8(p,k),O=W8(x,_,b));for(let[B,$]of m)$.values=B.scale($.channels,y,T);let{width:N,height:A}=b;Ce(F).attr("class",l).attr("fill","currentColor").attr("font-family","system-ui, sans-serif").attr("font-size",10).attr("text-anchor","middle").attr("width",N).attr("height",A).attr("viewBox",`0 0 ${N} ${A}`).attr("aria-label",s).attr("aria-description",a).call(B=>B.append("style").text(`.${l} {
  display: block;
  background: white;
  height: auto;
  height: intrinsic;
  max-width: 100%;
}
.${l} text,
.${l} tspan {
  white-space: pre;
}`)).call(Ou,n);for(let B of c){let{channels:$,values:V,facets:z}=m.get(B);if(p===void 0||B.facet==="super"){let Q=null;if(z&&(Q=z[0],Q=B.filter(Q,$,V),Q.length===0))continue;let Ft=B.render(Q,y,V,w,T);if(Ft==null)continue;F.appendChild(Ft)}else{let Q;for(let Ft of p){if(!(B.facetAnchor?.(p,k,Ft)??!Ft.empty))continue;let ft=null;if(z){let G=d.has(B);if(ft=z[G?Ft.i:0],ft=B.filter(ft,$,V),ft.length===0)continue;!G&&ft===z[0]&&(ft=ps(ft)),ft.fx=Ft.x,ft.fy=Ft.y,ft.fi=Ft.i}let ht=B.render(ft,y,V,v,T);if(ht!=null){(Q??(Q=Ce(F).append("g"))).append(()=>ht).datum(Ft);for(let G of["aria-label","aria-description","aria-hidden","transform"])ht.hasAttribute(G)&&(Q.attr(G,ht.getAttribute(G)),ht.removeAttribute(G))}}Q?.selectChildren().attr("transform",O)}}let C=$F(g,T,e),{figure:L=r!=null||i!=null||o!=null||C.length>0}=e;L&&(S=M.createElement("figure"),S.className=`${l}-figure`,S.style.maxWidth="initial",r!=null&&S.append(YF(M,r,"h2")),i!=null&&S.append(YF(M,i,"h3")),S.append(...C,F),o!=null&&S.append(Q$(M,o))),S.scale=U8(y.scales),S.legend=PF(g,T,e);let U=j4();return U>0&&Ce(F).append("text").attr("x",N).attr("y",20).attr("dy","-1em").attr("text-anchor","end").attr("font-family","initial").text("\u26A0\uFE0F").append("title").text(`${U.toLocaleString("en-US")} warning${U===1?"":"s"}. Please check the console.`),S}function YF(e,t,n){if(t.ownerDocument)return t;let r=e.createElement(n);return r.append(t),r}function Q$(e,t){let n=e.createElement("figcaption");return n.append(t),n}function J$({marks:e=[],...t}={}){return up({...t,marks:[...e,this]})}at.prototype.plot=J$;function qF(e){return e.flat(1/0).filter(t=>t!=null).map(tz)}function tz(e){return typeof e.render=="function"?e:new mS(e)}var mS=class extends at{constructor(t){if(typeof t!="function")throw new TypeError("invalid mark; missing render function");super(),this.render=t}render(){}};function yS(e,t){for(let n in e)XF(e[n],t);return e}function XF(e,t){let{scale:n,transform:r=!0}=e;if(n==null||!r)return;let{type:i,percent:o,interval:s,transform:a=o?l=>l*100:_2(s,i)}=t[n]??{};a!=null&&(e.value=Pt(e.value,a),e.transform=!1)}function ez(e){for(let t in e)O2(t,e[t])}function cp(e,t,n,r=p4){for(let{channels:i}of t.values())for(let o in i){let s=i[o],{scale:a}=s;if(a!=null&&r(a))if(a==="projection"){if(!K4(n)){let l=n.x?.domain===void 0,c=n.y?.domain===void 0;if(l||c){let[u,d]=J4(s);l&&pS(e,"x",u),c&&pS(e,"y",d)}}}else pS(e,a,s)}return e}function pS(e,t,n){let r=e.get(t);r!==void 0?r.push(n):e.set(t,[n])}function nz(e,t){if(e==null)return;let{x:n,y:r}=e;if(n==null&&r==null)return;let i=Re(e.data);if(i==null)throw new Error("missing facet data");let o={};n!=null&&(o.fx=Fu(i,{value:n,scale:"fx"})),r!=null&&(o.fy=Fu(i,{value:r,scale:"fy"})),yS(o,t);let s=Hb(i,o);return{channels:o,groups:s,data:e.data}}function WF(e,t,n){if(e.facet===null||e.facet==="super")return;let{fx:r,fy:i}=e;if(r!=null||i!=null){let l=Re(e.data??r??i);if(l===void 0)throw new Error(`missing facet data in ${e.ariaLabel}`);if(l===null)return;let c={};return r!=null&&(c.fx=Fu(l,{value:r,scale:"fx"})),i!=null&&(c.fy=Fu(l,{value:i,scale:"fy"})),yS(c,n),{channels:c,groups:Hb(l,c)}}if(t===void 0)return;let{channels:o,groups:s,data:a}=t;if(e.facet!=="auto"||e.data===a)return{channels:o,groups:s};a.length>0&&(s.size>1||s.size===1&&o.fx&&o.fy&&[...s][0][1].size>1)&&Re(e.data)?.length===a.length&&Yn(`Warning: the ${e.ariaLabel} mark appears to use faceted data, but isn\u2019t faceted. The mark data has the same length as the facet data and the mark facet option is "auto", but the mark data and facet data are distinct. If this mark should be faceted, set the mark facet option to true; otherwise, suppress this warning by setting the mark facet option to false.`)}function rz(e,t={}){return ye({...t,x:null,y:null},(n,r,i,o,s,a)=>a.getMarkState(e))}function iz(e){let t=[];for(let n of e){let r=n.tip;if(r){r===!0?r={}:typeof r=="string"&&(r={pointer:r});let{pointer:i}=r;i=/^x$/i.test(i)?Pu:/^y$/i.test(i)?Uu:Sa,r=i(rz(n,r)),r.title=null;let o=Yu(n.data,r);o.facet=n.facet,o.facetAnchor=n.facetAnchor,t.push(o)}}return t}function oz(e,t,n){let{projection:r,x:i={},y:o={},fx:s={},fy:a={},axis:l,grid:c,facet:u={},facet:{axis:d=l,grid:f}=u,x:{axis:h=l,grid:p=h===null?null:c}=i,y:{axis:m=l,grid:g=m===null?null:c}=o,fx:{axis:b=d,grid:y=b===null?null:f}=s,fy:{axis:x=d,grid:_=x===null?null:f}=a}=n;(r||!yo(i)&&!GF("x",e))&&(h=p=null),(r||!yo(o)&&!GF("y",e))&&(m=g=null),t.has("fx")||(b=y=null),t.has("fy")||(x=_=null),h===void 0&&(h=!x1(e,"x")),m===void 0&&(m=!x1(e,"y")),b===void 0&&(b=!x1(e,"fx")),x===void 0&&(x=!x1(e,"fy")),h===!0&&(h="bottom"),m===!0&&(m="left"),b===!0&&(b=h==="top"||h===null?"bottom":"top"),x===!0&&(x=m==="right"||m===null?"left":"right");let v=[];return _1(v,_,h1,a),b1(v,x,u1,"right","left",u,a),_1(v,y,m1,s),b1(v,b,f1,"top","bottom",u,s),_1(v,g,d1,o),b1(v,m,ip,"left","right",n,o),_1(v,p,p1,i),b1(v,h,op,"bottom","top",n,i),v}function b1(e,t,n,r,i,o,s){if(!t)return;let a=sz(t);s=az(a?r:t,o,s);let{line:l}=s;(n===ip||n===op)&&l&&!gs(l)&&e.push(ju(lz(s))),e.push(n(s)),a&&e.push(n({...s,anchor:i,label:null}))}function _1(e,t,n,r){!t||gs(t)||e.push(n(cz(t,r)))}function sz(e){return/^\s*both\s*$/i.test(e)}function az(e,t,{line:n=t.line,ticks:r,tickSize:i,tickSpacing:o,tickPadding:s,tickFormat:a,tickRotate:l,fontVariant:c,ariaLabel:u,ariaDescription:d,label:f=t.label,labelAnchor:h,labelArrow:p=t.labelArrow,labelOffset:m}){return{anchor:e,line:n,ticks:r,tickSize:i,tickSpacing:o,tickPadding:s,tickFormat:a,tickRotate:l,fontVariant:c,ariaLabel:u,ariaDescription:d,label:f,labelAnchor:h,labelArrow:p,labelOffset:m}}function lz(e){let{anchor:t,line:n}=e;return{anchor:t,facetAnchor:t+"-empty",stroke:n===!0?void 0:n}}function cz(e,{stroke:t=ya(e)?e:void 0,ticks:n=uz(e)?e:void 0,tickSpacing:r,ariaLabel:i,ariaDescription:o}){return{stroke:t,ticks:n,tickSpacing:r,ariaLabel:i,ariaDescription:o}}function uz(e){switch(typeof e){case"number":return!0;case"string":return!ya(e)}return cr(e)||typeof e?.range=="function"}function x1(e,t){let n=`${t}-axis `;return e.some(r=>r.ariaLabel?.startsWith(n))}function GF(e,t){for(let n of t)for(let r in n.channels){let{scale:i}=n.channels[r];if(i===e||i==="projection")return!0}return!1}function fz(e,t){for(let n in e){let r=e[n],i=t[n];r.label===void 0&&i&&(r.label=i.label)}return e}function dz({fx:e,fy:t},n){let{marginTop:r,marginRight:i,marginBottom:o,marginLeft:s,width:a,height:l}=qb(n),c=e&&HF(e),u=t&&HF(t);return{marginTop:t?u[0]:r,marginRight:e?a-c[1]:i,marginBottom:t?l-u[1]:o,marginLeft:e?c[0]:s,inset:{marginTop:n.marginTop,marginRight:n.marginRight,marginBottom:n.marginBottom,marginLeft:n.marginLeft},width:a,height:l}}function HF(e){let t=e.domain(),n=e(t[0]),r=e(t[t.length-1]);return r<n&&([n,r]=[r,n]),[n,r+e.bandwidth()]}var hz=new Map([["basis",zv],["basis-closed",Vv],["basis-open",jv],["bundle",Yv],["bump-x",Lv],["bump-y",Rv],["cardinal",qv],["cardinal-closed",Wv],["cardinal-open",Gv],["catmull-rom",Hv],["catmull-rom-closed",Xv],["catmull-rom-open",Zv],["linear",ls],["linear-closed",Kv],["monotone-x",Jv],["monotone-y",t2],["natural",e2],["step",n2],["step-after",i2],["step-before",r2]]);function fp(e=ls,t){if(typeof e=="function")return e;let n=hz.get(`${e}`.toLowerCase());if(!n)throw new Error(`unknown curve: ${e}`);if(t!==void 0){if("beta"in n)return n.beta(t);if("tension"in n)return n.tension(t);if("alpha"in n)return n.alpha(t)}return n}function w1(e=Ea,t){return typeof e!="function"&&`${e}`.toLowerCase()==="auto"?Ea:fp(e,t)}function Ea(e){return ls(e)}function So(e={y:"count"},t={}){[e,t]=bS(e,t);let{x:n,y:r}=t;return gS(v1(n,t,Y),null,null,r,e,zl(t))}function To(e={x:"count"},t={}){[e,t]=bS(e,t);let{x:n,y:r}=t;return gS(null,v1(r,t,Y),n,null,e,Vl(t))}function Ts(e={fill:"count"},t={}){[e,t]=bS(e,t);let{x:n,y:r}=pz(t);return gS(n,r,null,null,e,zl(Vl(t)))}function QF(e,t,n={}){if(n?.interval==null)return n;let{reduce:r=Db}=n,i={filter:null};return n[t]!=null&&(i[t]=r),n[`${t}1`]!=null&&(i[`${t}1`]=r),n[`${t}2`]!=null&&(i[`${t}2`]=r),e(i,n)}function qu(e={}){return QF(So,"y",vs(e,"x"))}function Wu(e={}){return QF(To,"x",vs(e,"y"))}function gS(e,t,n,r,{data:i=Bb,filter:o=qh,sort:s,reverse:a,...l}={},c={}){e=ZF(e),t=ZF(t),l=mz(l,c),i=e5(i,Y),s=s==null?void 0:JF("sort",s,c),o=o==null?void 0:t5("filter",o,c),n!=null&&wo(l,"x","x1","x2")&&(n=null),r!=null&&wo(l,"y","y1","y2")&&(r=null);let[u,d]=kn(e),[f,h]=kn(e),[p,m]=kn(t),[g,b]=kn(t),[y,x]=n!=null?[n,"x"]:r!=null?[r,"y"]:[],[_,v]=kn(y),{x:w,y:T,z:M,fill:F,stroke:S,x1:I,x2:k,y1:O,y2:N,domain:A,cumulative:C,thresholds:L,interval:U,...B}=c,[$,V]=kn(M),[z]=De(F),[Q]=De(S),[Ft,ft]=kn(z),[ht,G]=kn(Q);return{..."z"in c&&{z:$||M},..."fill"in c&&{fill:Ft||F},..."stroke"in c&&{stroke:ht||S},...mn(B,(ct,R,Z)=>{let K=Ll(st(ct,y),Z?.[x]),D=st(ct,M),$t=st(ct,z),ot=st(ct,Q),qt=Xh(l,{z:D,fill:$t,stroke:ot}),Zt=[],tn=[],Ra=K&&v([]),zp=D&&V([]),n_=$t&&ft([]),r_=ot&&G([]),mT=e&&d([]),$N=e&&h([]),yT=t&&m([]),zN=t&&b([]),VN=bz(e?.(ct),t?.(ct)),jN=0;for(let tc of l)tc.initialize(ct);s&&s.initialize(ct),o&&o.initialize(ct);for(let tc of R){let gT=[];for(let bf of l)bf.scope("facet",tc);s&&s.scope("facet",tc),o&&o.scope("facet",tc);for(let[bf,YN]of ga(tc,qt))for(let[qN,Vp]of ga(YN,K))for(let[Ci,Pa]of VN(Vp))if(!(o&&!o.reduce(Ci,Pa))){gT.push(jN++),tn.push(i.reduceIndex(Ci,ct,Pa)),K&&Ra.push(qN),D&&zp.push(qt===D?bf:D[(Ci.length>0?Ci:Vp)[0]]),$t&&n_.push(qt===$t?bf:$t[(Ci.length>0?Ci:Vp)[0]]),ot&&r_.push(qt===ot?bf:ot[(Ci.length>0?Ci:Vp)[0]]),mT&&(mT.push(Pa.x1),$N.push(Pa.x2)),yT&&(yT.push(Pa.y1),zN.push(Pa.y2));for(let WN of l)WN.reduce(Ci,Pa);s&&s.reduce(Ci)}Zt.push(gT)}return k2(Zt,s,a),{data:tn,facets:Zt}}),...!wo(l,"x")&&(u?{x1:u,x2:f,x:Iu(u,f)}:{x:w,x1:I,x2:k}),...!wo(l,"y")&&(p?{y1:p,y2:g,y:Iu(p,g)}:{y:T,y1:O,y2:N}),..._&&{[x]:_},...Object.fromEntries(l.map(({name:ct,output:R})=>[ct,R]))}}function bS({cumulative:e,domain:t,thresholds:n,interval:r,...i},o){return[i,{cumulative:e,domain:t,thresholds:n,interval:r,...o}]}function v1(e,{cumulative:t,domain:n,thresholds:r,interval:i},o){return e={..._o(e)},e.domain===void 0&&(e.domain=n),e.cumulative===void 0&&(e.cumulative=t),e.thresholds===void 0&&(e.thresholds=r),e.interval===void 0&&(e.interval=i),e.value===void 0&&(e.value=o),e.thresholds=_S(e.thresholds,e.interval),e}function pz(e){let{x:t,y:n}=e;return t=v1(t,e),n=v1(n,e),[t.value,n.value]=Fe(t.value,n.value),{x:t,y:n}}function ZF(e){if(e==null)return;let{value:t,cumulative:n,domain:r=Qt,thresholds:i}=e,o=s=>{let a=st(s,t),l;if(Se(a)||gz(i)){a=Pt(a,p2,Float64Array);let[u,d]=typeof r=="function"?r(a):r,f=typeof i=="function"&&!ma(i)?i(a,u,d):i;typeof f=="number"&&(f=yh(u,d,f)),ma(f)&&(r===Qt&&(u=f.floor(u),d=f.offset(f.floor(d))),f=f.range(u,f.offset(d))),l=f}else{a=He(a);let[u,d]=typeof r=="function"?r(a):r,f=typeof i=="function"&&!ma(i)?i(a,u,d):i;if(typeof f=="number")if(r===Qt){let h=Xo(u,d,f);if(isFinite(h))if(h>0){let p=Math.round(u/h),m=Math.round(d/h);p*h<=u||--p,m*h>d||++m;let g=m-p+1;f=new Float64Array(g);for(let b=0;b<g;++b)f[b]=(p+b)*h}else if(h<0){h=-h;let p=Math.round(u*h),m=Math.round(d*h);p/h<=u||--p,m/h>d||++m;let g=m-p+1;f=new Float64Array(g);for(let b=0;b<g;++b)f[b]=(p+b)/h}else f=[u];else f=[u]}else f=Tn(u,d,f);else ma(f)&&(r===Qt&&(u=f.floor(u),d=f.offset(f.floor(d))),f=f.range(u,f.offset(d)));l=f}let c=[];if(l.length===1)c.push([l[0],l[0]]);else for(let u=1;u<l.length;++u)c.push([l[u-1],l[u]]);return c.bin=(n<0?xz:n>0?_z:xS)(c,l,a),c};return o.label=lr(t),o}function _S(e,t,n=KF){if(e===void 0)return t===void 0?n:bo(t);if(typeof e=="string"){switch(e.toLowerCase()){case"freedman-diaconis":return T0;case"scott":return pd;case"sturges":return Ws;case"auto":return KF}return zh(e)}return e}function mz(e,t){return Hh(e,t,JF)}function JF(e,t,n){return Ob(e,t,n,t5)}function t5(e,t,n){return Cb(e,t,n,e5)}function e5(e,t){return Au(e,t,yz)}function yz(e){switch(`${e}`.toLowerCase()){case"x":return wz;case"x1":return Sz;case"x2":return Tz;case"y":return vz;case"y1":return Iz;case"y2":return Ez}throw new Error(`invalid bin reduce: ${e}`)}function KF(e,t,n){return Math.min(200,pd(e,t,n))}function gz(e){return b4(e)||cr(e)&&Se(e)}function bz(e,t){return e&&t?function*(n){let r=e.bin(n);for(let[i,[o,s]]of e.entries()){let a=t.bin(r[i]);for(let[l,[c,u]]of t.entries())yield[a[l],{x1:o,y1:c,x2:s,y2:u}]}}:e?function*(n){let r=e.bin(n);for(let[i,[o,s]]of e.entries())yield[r[i],{x1:o,x2:s}]}:function*(n){let r=t.bin(n);for(let[i,[o,s]]of t.entries())yield[r[i],{y1:o,y2:s}]}}function xS(e,t,n){return t=He(t),r=>{let i=e.map(()=>[]);for(let o of r)i[Ho(t,n[o])-1]?.push(o);return i}}function _z(e,t,n){let r=xS(e,t,n);return i=>{let o=r(i);for(let s=1,a=o.length;s<a;++s){let l=o[s-1],c=o[s];for(let u of l)c.push(u)}return o}}function xz(e,t,n){let r=xS(e,t,n);return i=>{let o=r(i);for(let s=o.length-2;s>=0;--s){let a=o[s+1],l=o[s];for(let c of a)l.push(c)}return o}}function n5(e,t){let n=(+e+ +t)/2;return e instanceof Date?new Date(n):n}var wz={reduceIndex(e,t,{x1:n,x2:r}){return n5(n,r)}},vz={reduceIndex(e,t,{y1:n,y2:r}){return n5(n,r)}},Sz={reduceIndex(e,t,{x1:n}){return n}},Tz={reduceIndex(e,t,{x2:n}){return n}},Iz={reduceIndex(e,t,{y1:n}){return n}},Ez={reduceIndex(e,t,{y2:n}){return n}};function Gu(e={}){return y2(e)?e:{...e,x:Y}}function Hu(e={}){return g2(e)?e:{...e,y:Y}}function r5(e,t){if(t.length===1)return{data:e,facets:t};let n=e.length,r=new Uint8Array(n),i=0;for(let a of t)for(let l of a)r[l]&&++i,r[l]=1;if(i===0)return{data:e,facets:t};e=pa(e);let o=e[f2]=new Uint32Array(n+i);t=t.map(a=>pa(a,Uint32Array));let s=n;r.fill(0);for(let a of t)for(let l=0,c=a.length;l<c;++l){let u=a[l];r[u]?(a[l]=s,e[s]=e[u],o[s]=u,++s):o[u]=u,r[u]=1}return{data:e,facets:t}}function wS(e={},t={}){arguments.length===1&&([e,t]=Ku(e));let{y1:n,y:r=n,x:i,...o}=t,[s,a,l,c]=Qu(r,i,"y","x",e,o);return{...s,y1:n,y:a,x1:l,x2:c,x:Iu(l,c)}}function s5(e={},t={}){arguments.length===1&&([e,t]=Ku(e));let{y1:n,y:r=n,x:i}=t,[o,s,a]=Qu(r,i,"y","x",e,t);return{...o,y1:n,y:s,x:a}}function a5(e={},t={}){arguments.length===1&&([e,t]=Ku(e));let{y1:n,y:r=n,x:i}=t,[o,s,,a]=Qu(r,i,"y","x",e,t);return{...o,y1:n,y:s,x:a}}function vS(e={},t={}){arguments.length===1&&([e,t]=Ku(e));let{x1:n,x:r=n,y:i,...o}=t,[s,a,l,c]=Qu(r,i,"x","y",e,o);return{...s,x1:n,x:a,y1:l,y2:c,y:Iu(l,c)}}function l5(e={},t={}){arguments.length===1&&([e,t]=Ku(e));let{x1:n,x:r=n,y:i}=t,[o,s,a]=Qu(r,i,"x","y",e,t);return{...o,x1:n,x:s,y:a}}function c5(e={},t={}){arguments.length===1&&([e,t]=Ku(e));let{x1:n,x:r=n,y:i}=t,[o,s,,a]=Qu(r,i,"x","y",e,t);return{...o,x1:n,x:s,y:a}}function Xu({x:e,x1:t,x2:n,...r}={}){return r=vs(r,"y"),t===void 0&&n===void 0?wS({x:e,...r}):([t,n]=b2(e,t,n),{...r,x1:t,x2:n})}function Zu({y:e,y1:t,y2:n,...r}={}){return r=vs(r,"x"),t===void 0&&n===void 0?vS({y:e,...r}):([t,n]=b2(e,t,n),{...r,y1:t,y2:n})}function Ku(e){let{offset:t,order:n,reverse:r,...i}=e;return[{offset:t,order:n,reverse:r},i]}var Mz={length:!0};function Qu(e,t=Vh,n,r,{offset:i,order:o,reverse:s},a){if(t===null)throw new Error(`stack requires ${r}`);let l=jn(a),[c,u]=kn(e),[d,f]=pn(t),[h,p]=pn(t);return d.hint=h.hint=Mz,i=Az(i),o=Nz(o,i,r),[mn(a,(m,g,b)=>{({data:m,facets:g}=r5(m,g));let y=e==null?void 0:u(Ll(st(m,e),b?.[n])),x=st(m,t,Float64Array),_=st(m,l),v=o&&o(m,y,x,_),w=m.length,T=f(new Float64Array(w)),M=p(new Float64Array(w)),F=[];for(let S of g){let I=y?Array.from(ln(S,k=>y[k]).values()):[S];if(v)for(let k of I)k.sort(v);for(let k of I){let O=0,N=0;s&&k.reverse();for(let A of k){let C=x[A];C<0?O=M[A]=(T[A]=O)+C:C>0?N=M[A]=(T[A]=N)+C:M[A]=T[A]=N}}F.push(I)}return i&&i(F,T,M,_),{data:m,facets:g}}),c,d,h]}function Az(e){if(e!=null){if(typeof e=="function")return e;switch(`${e}`.toLowerCase()){case"expand":case"normalize":return Fz;case"center":case"silhouette":return kz;case"wiggle":return f5}throw new Error(`unknown offset: ${e}`)}}function u5(e,t){let n=0,r=0;for(let i of e){let o=t[i];o<n&&(n=o),o>r&&(r=o)}return[n,r]}function Fz(e,t,n){for(let r of e)for(let i of r){let[o,s]=u5(i,n);for(let a of i){let l=1/(s-o||1);t[a]=l*(t[a]-o),n[a]=l*(n[a]-o)}}}function kz(e,t,n){for(let r of e){for(let i of r){let[o,s]=u5(i,n);for(let a of i){let l=(s+o)/2;t[a]-=l,n[a]-=l}}d5(r,t,n)}h5(e,t,n)}function f5(e,t,n,r){for(let i of e){let o=new Zn,s=0;for(let a of i){let l=-1,c=a.map(h=>Math.abs(n[h]-t[h])),u=a.map(h=>{l=r?r[h]:++l;let p=n[h]-t[h],m=o.has(l)?p-o.get(l):0;return o.set(l,p),m}),d=[0,..._0(u)];for(let h of a)t[h]+=s,n[h]+=s;let f=In(c);f&&(s-=In(c,(h,p)=>(u[p]/2+d[p])*h)/f)}d5(i,t,n)}h5(e,t,n)}function d5(e,t,n){let r=ge(e,i=>ge(i,o=>t[o]));for(let i of e)for(let o of i)t[o]-=r,n[o]-=r}function h5(e,t,n){let r=e.length;if(r===1)return;let i=e.map(a=>a.flat()),o=i.map(a=>(ge(a,l=>t[l])+Jt(a,l=>n[l]))/2),s=ge(o);for(let a=0;a<r;a++){let l=s-o[a];for(let c of i[a])t[c]+=l,n[c]+=l}}function Nz(e,t,n){if(e===void 0&&t===f5)return i5(fn);if(e!=null){if(typeof e=="string"){let r=e.startsWith("-"),i=r?Nl:fn;switch((r?e.slice(1):e).toLowerCase()){case"value":case n:return Oz(i);case"z":return Cz(i);case"sum":return Bz(i);case"appearance":return Dz(i);case"inside-out":return i5(i)}return o5(d2(e))}if(typeof e=="function")return(e.length===1?o5:Lz)(e);if(Array.isArray(e))return Rz(e);throw new Error(`invalid order: ${e}`)}}function Oz(e){return(t,n,r)=>(i,o)=>e(r[i],r[o])}function Cz(e){return(t,n,r,i)=>(o,s)=>e(i[o],i[s])}function Bz(e){return S1(e,(t,n,r,i)=>Nc(ar(t),o=>In(o,s=>r[s]),o=>i[o]))}function Dz(e){return S1(e,(t,n,r,i)=>Nc(ar(t),o=>n[rl(o,s=>r[s])],o=>i[o]))}function i5(e){return S1(e,(t,n,r,i)=>{let o=ar(t),s=Nc(o,d=>n[rl(d,f=>r[f])],d=>i[d]),a=vi(o,d=>In(d,f=>r[f]),d=>i[d]),l=[],c=[],u=0;for(let d of s)u<0?(u+=a.get(d),l.push(d)):(u-=a.get(d),c.push(d));return c.reverse().concat(l)})}function o5(e){return t=>{let n=st(t,e);return(r,i)=>fn(n[r],n[i])}}function Lz(e){return t=>(n,r)=>e(t[n],t[r])}function Rz(e){return S1(fn,()=>e)}function S1(e,t){return(n,r,i,o)=>{if(!o)throw new Error("missing channel: z");let s=new Zn(t(n,r,i,o).map((a,l)=>[a,l]));return(a,l)=>e(s.get(o[a]),s.get(o[l]))}}var Pz={ariaLabel:"area",strokeWidth:1,strokeLinecap:"round",strokeLinejoin:"round",strokeMiterlimit:1},Gl=class extends at{constructor(t,n={}){let{x1:r,y1:i,x2:o,y2:s,z:a,curve:l,tension:c}=n;super(t,{x1:{value:r,scale:"x"},y1:{value:i,scale:"y"},x2:{value:o,scale:"x",optional:!0},y2:{value:s,scale:"y",optional:!0},z:{value:jn(n),optional:!0}},n,Pz),this.z=a,this.curve=fp(l,c)}filter(t){return t}render(t,n,r,i,o){let{x1:s,y1:a,x2:l=s,y2:c=a}=r;return J("svg:g",o).call(St,this,i,o).call(ut,this,n,0,0).call(u=>u.selectAll().data(Ub(t,[s,a,l,c],this,r)).enter().append("path").call(_t,this).call($l,this,r).attr("d",pu().curve(this.curve).defined(d=>d>=0).x0(d=>s[d]).y0(d=>a[d]).x1(d=>l[d]).y1(d=>c[d]))).node()}};function p5(e,t){return t===void 0?Is(e,{x:hs,y:ha}):new Gl(e,t)}function Ma(e,t){let{y:n=Ae,...r}=Wu(t);return new Gl(e,Xu(Gu({...r,y1:n,y2:void 0})))}function Is(e,t){let{x:n=Ae,...r}=qu(t);return new Gl(e,Zu(Hu({...r,x1:n,x2:void 0})))}var Uz={ariaLabel:"link",fill:"none",stroke:"currentColor",strokeMiterlimit:1},dp=class extends at{constructor(t,n={}){let{x1:r,y1:i,x2:o,y2:s,curve:a,tension:l}=n;super(t,{x1:{value:r,scale:"x"},y1:{value:i,scale:"y"},x2:{value:o,scale:"x",optional:!0},y2:{value:s,scale:"y",optional:!0}},n,Uz),this.curve=w1(a,l),Oi(this,n)}project(t,n,r){this.curve!==Ea&&super.project(t,n,r)}render(t,n,r,i,o){let{x1:s,y1:a,x2:l=s,y2:c=a}=r,{curve:u}=this;return J("svg:g",o).call(St,this,i,o).call(ut,this,n).call(d=>d.selectAll().data(t).enter().append("path").call(_t,this).attr("d",u===Ea&&o.projection?$z(o.projection,s,a,l,c):f=>{let h=er(),p=u(h);return p.lineStart(),p.point(s[f],a[f]),p.point(l[f],c[f]),p.lineEnd(),h}).call(zt,this,r).call(Ss,this,r,o)).node()}};function $z(e,t,n,r,i){let o=Mn(e);return t=He(t),n=He(n),r=He(r),i=He(i),s=>o({type:"LineString",coordinates:[[t[s],n[s]],[r[s],i[s]]]})}function T1(e,{x:t,x1:n,x2:r,y:i,y1:o,y2:s,...a}={}){return[n,r]=hp(t,n,r),[o,s]=hp(i,o,s),new dp(e,{...a,x1:n,x2:r,y1:o,y2:s})}function hp(e,t,n){if(e===void 0){if(t===void 0){if(n!==void 0)return[n]}else if(n===void 0)return[t]}else{if(t===void 0)return n===void 0?[e]:[e,n];if(n===void 0)return[e,t]}return[t,n]}var zz={ariaLabel:"arrow",fill:"none",stroke:"currentColor",strokeLinecap:"round",strokeMiterlimit:1,strokeWidth:1.5},pp=class extends at{constructor(t,n={}){let{x1:r,y1:i,x2:o,y2:s,bend:a=0,headAngle:l=60,headLength:c=8,inset:u=0,insetStart:d=u,insetEnd:f=u,sweep:h}=n;super(t,{x1:{value:r,scale:"x"},y1:{value:i,scale:"y"},x2:{value:o,scale:"x",optional:!0},y2:{value:s,scale:"y",optional:!0}},n,zz),this.bend=a===!0?22.5:Math.max(-90,Math.min(90,a)),this.headAngle=+l,this.headLength=+c,this.insetStart=+d,this.insetEnd=+f,this.sweep=Vz(h)}render(t,n,r,i,o){let{x1:s,y1:a,x2:l=s,y2:c=a,SW:u}=r,{strokeWidth:d,bend:f,headAngle:h,headLength:p,insetStart:m,insetEnd:g}=this,b=u?_=>u[_]:dn(d===void 0?1:d),y=h*$u/2,x=p/1.5;return J("svg:g",o).call(St,this,i,o).call(ut,this,n).call(_=>_.selectAll().data(t).enter().append("path").call(_t,this).attr("d",v=>{let w=s[v],T=a[v],M=l[v],F=c[v],S=Math.hypot(M-w,F-T);if(S<=m+g)return null;let I=Math.atan2(F-T,M-w),k=Math.min(x*b(v),S/3),O=this.sweep(w,T,M,F)*f*$u,N=Math.hypot(S/Math.tan(O),S)/2;if(m||g)if(N<1e5){let Ft=Math.sign(O),[ft,ht]=jz([w,T],[M,F],N,Ft);if(m&&([w,T]=m5([ft,ht,N],[w,T,m],-Ft*Math.sign(m))),g){let[G,ct]=m5([ft,ht,N],[M,F,g],Ft*Math.sign(g));I+=Math.atan2(ct-ht,G-ft)-Math.atan2(F-ht,M-ft),M=G,F=ct}}else{let Ft=M-w,ft=F-T,ht=Math.hypot(Ft,ft);m&&(w+=Ft/ht*m,T+=ft/ht*m),g&&(M-=Ft/ht*g,F-=ft/ht*g)}let A=I+O,C=A+y,L=A-y,U=M-k*Math.cos(C),B=F-k*Math.sin(C),$=M-k*Math.cos(L),V=F-k*Math.sin(L),z=N<1e5?`A${N},${N} 0,0,${O>0?1:0} `:"L",Q=k?`M${U},${B}L${M},${F}L${$},${V}`:"";return`M${w},${T}${z}${M},${F}${Q}`}).call(zt,this,r)).node()}};function Vz(e=1){if(typeof e=="number")return dn(Math.sign(e));if(typeof e=="function")return(t,n,r,i)=>Math.sign(e(t,n,r,i));switch(Xe(e,"sweep",["+x","-x","+y","-y"])){case"+x":return(t,n,r)=>Ut(t,r);case"-x":return(t,n,r)=>Xn(t,r);case"+y":return(t,n,r,i)=>Ut(n,i);case"-y":return(t,n,r,i)=>Xn(n,i)}}function jz([e,t],[n,r],i,o){let s=n-e,a=r-t,l=Math.hypot(s,a),c=o*Math.sqrt(i*i-l*l/4)/l;return[(e+n)/2-a*c,(t+r)/2+s*c]}function m5([e,t,n],[r,i,o],s){let a=r-e,l=i-t,c=Math.hypot(a,l),u=(a*a+l*l-o*o+n*n)/(2*c),d=s*Math.sqrt(n*n-u*u);return[e+(a*u+l*d)/c,t+(l*u-a*d)/c]}function y5(e,{x:t,x1:n,x2:r,y:i,y1:o,y2:s,...a}={}){return[n,r]=hp(t,n,r),[o,s]=hp(i,o,s),new pp(e,{...a,x1:n,x2:r,y1:o,y2:s})}var Ju=class extends at{constructor(t,n,r={},i){super(t,n,r,i);let{inset:o=0,insetTop:s=o,insetRight:a=o,insetBottom:l=o,insetLeft:c=o,rx:u,ry:d}=r;this.insetTop=bt(s),this.insetRight=bt(a),this.insetBottom=bt(l),this.insetLeft=bt(c),this.rx=te(u,"auto"),this.ry=te(d,"auto")}render(t,n,r,i,o){let{rx:s,ry:a}=this;return J("svg:g",o).call(St,this,i,o).call(this._transform,this,n).call(l=>l.selectAll().data(t).enter().append("rect").call(_t,this).attr("x",this._x(n,r,i)).attr("width",this._width(n,r,i)).attr("y",this._y(n,r,i)).attr("height",this._height(n,r,i)).call(et,"rx",s).call(et,"ry",a).call(zt,this,r)).node()}_x(t,{x:n},{marginLeft:r}){let{insetLeft:i}=this;return n?o=>n[o]+i:r+i}_y(t,{y:n},{marginTop:r}){let{insetTop:i}=this;return n?o=>n[o]+i:r+i}_width({x:t},{x:n},{marginRight:r,marginLeft:i,width:o}){let{insetLeft:s,insetRight:a}=this,l=n&&t?t.bandwidth():o-r-i;return Math.max(0,l-s-a)}_height({y:t},{y:n},{marginTop:r,marginBottom:i,height:o}){let{insetTop:s,insetBottom:a}=this,l=n&&t?t.bandwidth():o-r-i;return Math.max(0,l-s-a)}},g5={ariaLabel:"bar"},mp=class extends Ju{constructor(t,n={}){let{x1:r,x2:i,y:o}=n;super(t,{x1:{value:r,scale:"x"},x2:{value:i,scale:"x"},y:{value:o,scale:"y",type:"band",optional:!0}},n,g5)}_transform(t,n,{x:r}){t.call(ut,n,{x:r},0,0)}_x({x:t},{x1:n,x2:r},{marginLeft:i}){let{insetLeft:o}=this;return ur(t)?i+o:s=>Math.min(n[s],r[s])+o}_width({x:t},{x1:n,x2:r},{marginRight:i,marginLeft:o,width:s}){let{insetLeft:a,insetRight:l}=this;return ur(t)?s-i-o-a-l:c=>Math.max(0,Math.abs(r[c]-n[c])-a-l)}},yp=class extends Ju{constructor(t,n={}){let{x:r,y1:i,y2:o}=n;super(t,{y1:{value:i,scale:"y"},y2:{value:o,scale:"y"},x:{value:r,scale:"x",type:"band",optional:!0}},n,g5)}_transform(t,n,{y:r}){t.call(ut,n,{y:r},0,0)}_y({y:t},{y1:n,y2:r},{marginTop:i}){let{insetTop:o}=this;return ur(t)?i+o:s=>Math.min(n[s],r[s])+o}_height({y:t},{y1:n,y2:r},{marginTop:i,marginBottom:o,height:s}){let{insetTop:a,insetBottom:l}=this;return ur(t)?s-i-o-a-l:c=>Math.max(0,Math.abs(r[c]-n[c])-a-l)}};function Io(e,t={}){return Su(t)||(t={...t,y:Ae,x2:Y}),new mp(e,Xu(Jb(Gu(t))))}function Eo(e,t={}){return Su(t)||(t={...t,x:Ae,y2:Y}),new yp(e,Zu(t1(Hu(t))))}var Yz={ariaLabel:"cell"},Hl=class extends Ju{constructor(t,{x:n,y:r,...i}={}){super(t,{x:{value:n,scale:"x",type:"band",optional:!0},y:{value:r,scale:"y",type:"band",optional:!0}},i,Yz)}_transform(t,n){t.call(ut,n,{},0,0)}};function Aa(e,{x:t,y:n,...r}={}){return[t,n]=Fe(t,n),new Hl(e,{...r,x:t,y:n})}function b5(e,{x:t=Ae,fill:n,stroke:r,...i}={}){return n===void 0&&De(r)[0]===void 0&&(n=Y),new Hl(e,{...i,x:t,fill:n,stroke:r})}function _5(e,{y:t=Ae,fill:n,stroke:r,...i}={}){return n===void 0&&De(r)[0]===void 0&&(n=Y),new Hl(e,{...i,y:t,fill:n,stroke:r})}var qz={ariaLabel:"dot",fill:"none",stroke:"currentColor",strokeWidth:1.5};function gp(e){return e.sort===void 0&&e.reverse===void 0?kb({channel:"-r"},e):e}var Xl=class extends at{constructor(t,n={}){let{x:r,y:i,r:o,rotate:s,symbol:a=cs,frameAnchor:l}=n,[c,u]=Kt(s,0),[d,f]=k4(a),[h,p]=Kt(o,d==null?3:4.5);super(t,{x:{value:r,scale:"x",optional:!0},y:{value:i,scale:"y",optional:!0},r:{value:h,scale:"r",filter:sr,optional:!0},rotate:{value:c,optional:!0},symbol:{value:d,scale:"auto",optional:!0}},gp(n),qz),this.r=p,this.rotate=u,this.symbol=f,this.frameAnchor=xo(l);let{channels:m}=this,{symbol:g}=m;if(g){let{fill:b,stroke:y}=m;g.hint={fill:b?b.value===g.value?"color":"currentColor":this.fill??"currentColor",stroke:y?y.value===g.value?"color":"currentColor":this.stroke??"none"}}}render(t,n,r,i,o){let{x:s,y:a}=n,{x:l,y:c,r:u,rotate:d,symbol:f}=r,{r:h,rotate:p,symbol:m}=this,[g,b]=yn(this,i),y=m===cs,x=u?void 0:h*h*Math.PI;return ua(h)&&(t=[]),J("svg:g",o).call(St,this,i,o).call(ut,this,{x:l&&s,y:c&&a}).call(_=>_.selectAll().data(t).enter().append(y?"circle":"path").call(_t,this).call(y?v=>{v.attr("cx",l?w=>l[w]:g).attr("cy",c?w=>c[w]:b).attr("r",u?w=>u[w]:h)}:v=>{v.attr("transform",Ta`translate(${l?w=>l[w]:g},${c?w=>c[w]:b})${d?w=>` rotate(${d[w]})`:p?` rotate(${p})`:""}`).attr("d",u&&f?w=>{let T=er();return f[w].draw(T,u[w]*u[w]*Math.PI),T}:u?w=>{let T=er();return m.draw(T,u[w]*u[w]*Math.PI),T}:f?w=>{let T=er();return f[w].draw(T,x),T}:(()=>{let w=er();return m.draw(w,x),w})())}).call(zt,this,r)).node()}};function Nn(e,{x:t,y:n,...r}={}){return r.frameAnchor===void 0&&([t,n]=Fe(t,n)),new Xl(e,{...r,x:t,y:n})}function x5(e,{x:t=Y,...n}={}){return new Xl(e,n1({...n,x:t}))}function w5(e,{y:t=Y,...n}={}){return new Xl(e,e1({...n,y:t}))}function v5(e,t){return Nn(e,{...t,symbol:"circle"})}function S5(e,t){return Nn(e,{...t,symbol:"hexagon"})}var Wz={ariaLabel:"line",fill:"none",stroke:"currentColor",strokeWidth:1.5,strokeLinecap:"round",strokeLinejoin:"round",strokeMiterlimit:1},Zl=class extends at{constructor(t,n={}){let{x:r,y:i,z:o,curve:s,tension:a}=n;super(t,{x:{value:r,scale:"x"},y:{value:i,scale:"y"},z:{value:jn(n),optional:!0}},n,Wz),this.z=o,this.curve=w1(s,a),Oi(this,n)}filter(t){return t}project(t,n,r){this.curve!==Ea&&super.project(t,n,r)}render(t,n,r,i,o){let{x:s,y:a}=r,{curve:l}=this;return J("svg:g",o).call(St,this,i,o).call(ut,this,n).call(c=>c.selectAll().data(Ub(t,[s,a],this,r)).enter().append("path").call(_t,this).call($l,this,r).call(J8,this,r,o).attr("d",l===Ea&&o.projection?Gz(o.projection,s,a):Ih().curve(l).defined(u=>u>=0).x(u=>s[u]).y(u=>a[u]))).node()}};function Gz(e,t,n){let r=Mn(e);return t=He(t),n=He(n),i=>{let o=[],s=[o];for(let a of i)a===-1?(o=[],s.push(o)):o.push([t[a],n[a]]);return r({type:"MultiLineString",coordinates:s})}}function bp(e,{x:t,y:n,...r}={}){return[t,n]=Fe(t,n),new Zl(e,{...r,x:t,y:n})}function Fa(e,{x:t=Y,y:n=Ae,...r}={}){return new Zl(e,Wu({...r,x:t,y:n}))}function ka(e,{x:t=Ae,y:n=Y,...r}={}){return new Zl(e,qu({...r,x:t,y:n}))}var Hz={ariaLabel:"rect"},Kl=class extends at{constructor(t,n={}){let{x1:r,y1:i,x2:o,y2:s,inset:a=0,insetTop:l=a,insetRight:c=a,insetBottom:u=a,insetLeft:d=a,rx:f,ry:h}=n;super(t,{x1:{value:r,scale:"x",optional:!0},y1:{value:i,scale:"y",optional:!0},x2:{value:o,scale:"x",optional:!0},y2:{value:s,scale:"y",optional:!0}},n,Hz),this.insetTop=bt(l),this.insetRight=bt(c),this.insetBottom=bt(u),this.insetLeft=bt(d),this.rx=te(f,"auto"),this.ry=te(h,"auto")}render(t,n,r,i,o){let{x:s,y:a}=n,{x1:l,y1:c,x2:u,y2:d}=r,{marginTop:f,marginRight:h,marginBottom:p,marginLeft:m,width:g,height:b}=i,{projection:y}=o,{insetTop:x,insetRight:_,insetBottom:v,insetLeft:w,rx:T,ry:M}=this;return J("svg:g",o).call(St,this,i,o).call(ut,this,{x:l&&u&&s,y:c&&d&&a},0,0).call(F=>F.selectAll().data(t).enter().append("rect").call(_t,this).attr("x",l&&u&&(y||!ur(s))?S=>Math.min(l[S],u[S])+w:m+w).attr("y",c&&d&&(y||!ur(a))?S=>Math.min(c[S],d[S])+x:f+x).attr("width",l&&u&&(y||!ur(s))?S=>Math.max(0,Math.abs(u[S]-l[S])-w-_):g-h-m-_-w).attr("height",c&&d&&(y||!ur(a))?S=>Math.max(0,Math.abs(c[S]-d[S])-x-v):b-f-p-x-v).call(et,"rx",T).call(et,"ry",M).call(zt,this,r)).node()}};function _p(e,t){return new Kl(e,rS(iS(t)))}function tf(e,t={}){return Su(t)||(t={...t,y:Ae,x2:Y,interval:1}),new Kl(e,Xu(iS(Gu(t))))}function ef(e,t={}){return Su(t)||(t={...t,x:Ae,y2:Y,interval:1}),new Kl(e,Zu(rS(Hu(t))))}function TS(e,t){t=Xz(t);let{x:n,y:r,color:i,size:o}=t,s=I1(e,n),a=I1(e,r),l=I1(e,i),c=I1(e,o),{fx:u,fy:d,x:{value:f,reduce:h,zero:p,...m},y:{value:g,reduce:b,zero:y,...x},color:{value:_,color:v,reduce:w},size:{value:T,reduce:M},mark:F}=t;if(h===void 0&&(h=b==null&&f==null&&T==null&&g!=null?"count":null),b===void 0&&(b=h==null&&g==null&&T==null&&f!=null?"count":null),M===void 0&&T==null&&w==null&&h==null&&b==null&&(f==null||_e(s))&&(g==null||_e(a))&&(M="count"),p===void 0&&(p=E1(h)?!0:void 0),y===void 0&&(y=E1(b)?!0:void 0),f==null&&g==null)throw new Error("must specify x or y");if(h!=null&&g==null)throw new Error("reducing x requires y");if(b!=null&&f==null)throw new Error("reducing y requires x");F===void 0&&(F=T!=null||M!=null?"dot":E1(h)||E1(b)||w!=null?"bar":f!=null&&g!=null?_e(s)||_e(a)||h==null&&b==null&&!xp(s)&&!xp(a)?"dot":"line":f!=null||g!=null?"rule":null);let S,I,k;switch(F){case"dot":k=Nn,I="stroke";break;case"line":k=s&&a||h!=null||b!=null?y||b!=null||s&&xp(s)?ka:p||h!=null||a&&xp(a)?Fa:bp:s?Fa:ka,I="stroke",I5(l)&&(S=null);break;case"area":k=!(y||b!=null)&&(p||h!=null||a&&xp(a))?Ma:Is,I="fill",I5(l)&&(S=null);break;case"rule":k=s?Pr:Ur,I="stroke";break;case"bar":k=h!=null?_e(a)?T5(h)&&s&&_e(s)?Aa:Io:tf:b!=null?_e(s)?T5(b)&&a&&_e(a)?Aa:Eo:ef:w!=null||M!=null?s&&_e(s)&&a&&_e(a)?Aa:s&&_e(s)?Eo:a&&_e(a)?Io:_p:s&&ys(s)&&!(a&&ys(a))?Io:a&&ys(a)&&!(s&&ys(s))?Eo:Aa,I="fill";break;default:throw new Error(`invalid mark: ${F}`)}let O={fx:u,fy:d,x:s??void 0,y:a??void 0,[I]:l??v,z:S,r:c??void 0,tip:!0},N,A={[I]:w??void 0,r:M??void 0};if(h!=null&&b!=null)throw new Error("cannot reduce both x and y");return b!=null?(A.y=b,N=_e(s)?ba:So):h!=null?(A.x=h,N=_e(a)?_a:To):(w!=null||M!=null)&&(s&&a?N=_e(s)&&_e(a)?Gh:_e(s)?To:_e(a)?So:Ts:s?N=_e(s)?ba:So:a&&(N=_e(a)?_a:To)),(N===Ts||N===So)&&(O.x={value:s,...m}),(N===Ts||N===To)&&(O.y={value:a,...x}),p===void 0&&(p=s&&!(N===Ts||N===So)&&(k===Io||k===Ma||k===tf||k===Ur)),y===void 0&&(y=a&&!(N===Ts||N===To)&&(k===Eo||k===Is||k===ef||k===Pr)),{fx:u??null,fy:d??null,x:{value:f??null,reduce:h??null,zero:!!p,...m},y:{value:g??null,reduce:b??null,zero:!!y,...x},color:{value:_??null,reduce:w??null,...v!==void 0&&{color:v}},size:{value:T??null,reduce:M??null},mark:F,markImpl:E5[k],markOptions:O,transformImpl:E5[N],transformOptions:A,colorMode:I}}function M5(e,t){let n=TS(e,t),{fx:r,fy:i,x:{zero:o},y:{zero:s},markOptions:a,transformOptions:l,colorMode:c}=n,u=SS[n.markImpl],d=SS[n.transformImpl],f=r!=null||i!=null?ju({strokeOpacity:.1}):null,h=[o?Pr([0]):null,s?Ur([0]):null],p=u(e,d?d(l,a):a);return c==="stroke"?bn(f,h,p):bn(f,p,h)}function xp(e){let t,n;for(let r of e){if(r==null)continue;if(t===void 0){t=r;continue}let i=Math.sign(Ut(t,r));if(!!i){if(n!==void 0&&i!==n)return!1;t=r,n=i}}return!0}function Xz({x:e,y:t,color:n,size:r,fx:i,fy:o,mark:s}={}){return Lr(e)||(e=nf(e)),Lr(t)||(t=nf(t)),Lr(n)||(n=ya(n)?{color:n}:nf(n)),Lr(r)||(r=nf(r)),Lr(i)&&({value:i}=nf(i)),Lr(o)&&({value:o}=nf(o)),s!=null&&(s=`${s}`.toLowerCase()),{x:e,y:t,color:n,size:r,fx:i,fy:o,mark:s}}function I1(e,t){let n=st(e,t.value);return n&&(n.label=lr(t.value)),n}function nf(e){return Zz(e)?{reduce:e}:{value:e}}function E1(e){return/^(?:distinct|count|sum|proportion)$/i.test(e)}function T5(e){return/^(?:first|last|mode)$/i.test(e)}function Zz(e){if(e==null)return!1;if(typeof e.reduceIndex=="function"||typeof e.reduce=="function"&&hn(e)||/^p\d{2}$/i.test(e))return!0;switch(`${e}`.toLowerCase()){case"first":case"last":case"count":case"distinct":case"sum":case"proportion":case"proportion-facet":case"deviation":case"min":case"min-index":case"max":case"max-index":case"mean":case"median":case"variance":case"mode":return!0}return!1}function I5(e){return e?new Or(e).size>e.length>>1:!1}var SS={dot:Nn,line:bp,lineX:Fa,lineY:ka,areaX:Ma,areaY:Is,ruleX:Pr,ruleY:Ur,barX:Io,barY:Eo,rect:_p,rectX:tf,rectY:ef,cell:Aa,bin:Ts,binX:So,binY:To,group:Gh,groupX:ba,groupY:_a},E5=Object.fromEntries(Object.entries(SS).map(([e,t])=>[t,e]));function rf(e,t={}){let{x:n,x1:r,x2:i}=t;n===void 0&&r===void 0&&i===void 0&&(t={...t,x:n=Y});let o={};return n!=null&&(o.x=e),r!=null&&(o.x1=e),i!=null&&(o.x2=e),oi(o,t)}function of(e,t={}){let{y:n,y1:r,y2:i}=t;n===void 0&&r===void 0&&i===void 0&&(t={...t,y:n=Y});let o={};return n!=null&&(o.y=e),r!=null&&(o.y1=e),i!=null&&(o.y2=e),oi(o,t)}function oi(e={},t={}){let n=jn(t),r=Object.entries(e).map(([i,o])=>{let s=Ib(i,t);if(s==null)throw new Error(`missing channel: ${i}`);let[a,l]=pn(s);return{key:i,input:s,output:a,setOutput:l,map:Kz(o)}});return{...mn(t,(i,o)=>{let s=st(i,n),a=r.map(({input:c})=>st(i,c)),l=r.map(({setOutput:c})=>c(new Array(i.length)));for(let c of o)for(let u of s?ln(c,d=>s[d]).values():[c])r.forEach(({map:d},f)=>d.mapIndex(u,a[f],l[f]));return{data:i,facets:o}}),...Object.fromEntries(r.map(({key:i,output:o})=>[i,o]))}}function Kz(e){if(e==null)throw new Error("missing map");if(typeof e.mapIndex=="function")return e;if(typeof e.map=="function"&&hn(e))return Qz(e);if(typeof e=="function")return IS(Tu(e));switch(`${e}`.toLowerCase()){case"cumsum":return tV;case"rank":return IS((t,n)=>md(t,r=>n[r]));case"quantile":return IS((t,n)=>Jz(t,r=>n[r]))}throw new Error(`invalid map: ${e}`)}function Qz(e){return console.warn("deprecated map interface; implement mapIndex instead."),{mapIndex:e.map.bind(e)}}function Jz(e,t){let n=Zi(e,t)-1;return md(e,t).map(r=>r/n)}function IS(e){return{mapIndex(t,n,r){let i=e(t,n);if(i.length!==t.length)throw new Error("map function returned a mismatched length");for(let o=0,s=t.length;o<s;++o)r[t[o]]=i[o]}}}var tV={mapIndex(e,t,n){let r=0;for(let i of e)n[i]=r+=t[i]}};function A5(e={},t){return arguments.length===1&&(t=e),rf(sf(e),t)}function F5(e={},t){return arguments.length===1&&(t=e),of(sf(e),t)}function sf(e={}){typeof e=="number"&&(e={k:e});let{k:t,reduce:n,shift:r,anchor:i,strict:o}=e;if(i===void 0&&r!==void 0&&(i=nV(r),Yn(`Warning: the shift option is deprecated; please use anchor "${i}" instead.`)),!((t=Math.floor(t))>0))throw new Error(`invalid k: ${t}`);return rV(n)(t,eV(i,t),o)}function eV(e="middle",t){switch(`${e}`.toLowerCase()){case"middle":return t-1>>1;case"start":return 0;case"end":return t-1}throw new Error(`invalid anchor: ${e}`)}function nV(e){switch(`${e}`.toLowerCase()){case"centered":return"middle";case"leading":return"start";case"trailing":return"end"}throw new Error(`invalid shift: ${e}`)}function rV(e="mean"){if(typeof e=="string"){if(/^p\d{2}$/i.test(e))return M1(vu(e));switch(e.toLowerCase()){case"deviation":return M1(Hr);case"max":return A1((t,n)=>Jt(t,r=>n[r]));case"mean":return iV;case"median":return M1(Si);case"min":return A1((t,n)=>ge(t,r=>n[r]));case"mode":return A1((t,n)=>Dc(t,r=>n[r]));case"sum":return k5;case"variance":return M1(qs);case"difference":return aV;case"ratio":return lV;case"first":return cV;case"last":return uV}}if(typeof e!="function")throw new Error(`invalid reduce: ${e}`);return A1(Tu(e))}function M1(e){return(t,n,r)=>r?{mapIndex(i,o,s){let a=c=>o[c]==null?NaN:+o[c],l=0;for(let c=0;c<t-1;++c)isNaN(a(c))&&++l;for(let c=0,u=i.length-t+1;c<u;++c)isNaN(a(c+t-1))&&++l,s[i[c+n]]=l===0?e(ps(i,c,c+t),a):NaN,isNaN(a(c))&&--l}}:{mapIndex(i,o,s){let a=l=>o[l]==null?NaN:+o[l];for(let l=-n;l<0;++l)s[i[l+n]]=e(ps(i,0,l+t),a);for(let l=0,c=i.length-n;l<c;++l)s[i[l+n]]=e(ps(i,l,l+t),a)}}}function A1(e){return(t,n,r)=>r?{mapIndex(i,o,s){let a=0;for(let l=0;l<t-1;++l)a+=Be(o[i[l]]);for(let l=0,c=i.length-t+1;l<c;++l)a+=Be(o[i[l+t-1]]),a===t&&(s[i[l+n]]=e(ps(i,l,l+t),o)),a-=Be(o[i[l]])}}:{mapIndex(i,o,s){for(let a=-n;a<0;++a)s[i[a+n]]=e(ps(i,0,a+t),o);for(let a=0,l=i.length-n;a<l;++a)s[i[a+n]]=e(ps(i,a,a+t),o)}}}function k5(e,t,n){return n?{mapIndex(r,i,o){let s=0,a=0;for(let l=0;l<e-1;++l){let c=i[r[l]];c===null||isNaN(c)?++s:a+=+c}for(let l=0,c=r.length-e+1;l<c;++l){let u=i[r[l]],d=i[r[l+e-1]];d===null||isNaN(d)?++s:a+=+d,o[r[l+t]]=s===0?a:NaN,u===null||isNaN(u)?--s:a-=+u}}}:{mapIndex(r,i,o){let s=0,a=r.length;for(let l=0,c=Math.min(a,e-t-1);l<c;++l)s+=+i[r[l]]||0;for(let l=-t,c=a-t;l<c;++l)s+=+i[r[l+e-1]]||0,o[r[l+t]]=s,s-=+i[r[l]]||0}}}function iV(e,t,n){if(n){let r=k5(e,t,n);return{mapIndex(i,o,s){r.mapIndex(i,o,s);for(let a=0,l=i.length-e+1;a<l;++a)s[i[a+t]]/=e}}}else return{mapIndex(r,i,o){let s=0,a=0,l=r.length;for(let c=0,u=Math.min(l,e-t-1);c<u;++c){let d=i[r[c]];d!==null&&!isNaN(d=+d)&&(s+=d,++a)}for(let c=-t,u=l-t;c<u;++c){let d=i[r[c+e-1]],f=i[r[c]];d!==null&&!isNaN(d=+d)&&(s+=d,++a),o[r[c+t]]=s/a,f!==null&&!isNaN(f=+f)&&(s-=f,--a)}}}}function oV(e,t,n,r){for(let i=n+r;n<i;++n){let o=e[t[n]];if(Be(o))return o}}function sV(e,t,n,r){for(let i=n+r-1;i>=n;--i){let o=e[t[i]];if(Be(o))return o}}function N5(e,t,n,r){for(let i=n+r;n<i;++n){let o=e[t[n]];if(o!==null&&!isNaN(o=+o))return o}}function O5(e,t,n,r){for(let i=n+r-1;i>=n;--i){let o=e[t[i]];if(o!==null&&!isNaN(o=+o))return o}}function aV(e,t,n){return n?{mapIndex(r,i,o){for(let s=0,a=r.length-e;s<a;++s){let l=i[r[s]],c=i[r[s+e-1]];o[r[s+t]]=l===null||c===null?NaN:c-l}}}:{mapIndex(r,i,o){for(let s=-t,a=r.length-e+t+1;s<a;++s)o[r[s+t]]=O5(i,r,s,e)-N5(i,r,s,e)}}}function lV(e,t,n){return n?{mapIndex(r,i,o){for(let s=0,a=r.length-e;s<a;++s){let l=i[r[s]],c=i[r[s+e-1]];o[r[s+t]]=l===null||c===null?NaN:c/l}}}:{mapIndex(r,i,o){for(let s=-t,a=r.length-e+t+1;s<a;++s)o[r[s+t]]=O5(i,r,s,e)/N5(i,r,s,e)}}}function cV(e,t,n){return n?{mapIndex(r,i,o){for(let s=0,a=r.length-e;s<a;++s)o[r[s+t]]=i[r[s]]}}:{mapIndex(r,i,o){for(let s=-t,a=r.length-e+t+1;s<a;++s)o[r[s+t]]=oV(i,r,s,e)}}}function uV(e,t,n){return n?{mapIndex(r,i,o){for(let s=0,a=r.length-e;s<a;++s)o[r[s+t]]=i[r[s+e-1]]}}:{mapIndex(r,i,o){for(let s=-t,a=r.length-e+t+1;s<a;++s)o[r[s+t]]=sV(i,r,s,e)}}}var Es={n:20,k:2,color:"currentColor",opacity:.2,strict:!0,anchor:"end"};function C5(e,{x:t=Y,y:n,k:r=Es.k,color:i=Es.color,opacity:o=Es.opacity,fill:s=i,fillOpacity:a=o,stroke:l=i,strokeOpacity:c,strokeWidth:u,...d}={}){return bn(ne(s)?null:Ma(e,oi({x1:Na({k:-r,...d}),x2:Na({k:r,...d})},{x1:t,x2:t,y:n,fill:s,fillOpacity:a,...d})),ne(l)?null:Fa(e,oi({x:Na(d)},{x:t,y:n,stroke:l,strokeOpacity:c,strokeWidth:u,...d})))}function B5(e,{x:t,y:n=Y,k:r=Es.k,color:i=Es.color,opacity:o=Es.opacity,fill:s=i,fillOpacity:a=o,stroke:l=i,strokeOpacity:c,strokeWidth:u,...d}={}){return bn(ne(s)?null:Is(e,oi({y1:Na({k:-r,...d}),y2:Na({k:r,...d})},{x:t,y1:n,y2:n,fill:s,fillOpacity:a,...d})),ne(l)?null:ka(e,oi({y:Na(d)},{x:t,y:n,stroke:l,strokeOpacity:c,strokeWidth:u,...d})))}function Na({n:e=Es.n,k:t=0,strict:n=Es.strict,anchor:r=Es.anchor}={}){return sf({k:e,reduce:i=>Zo(i)+t*(Hr(i)||0),strict:n,anchor:r})}var fV={ariaLabel:"tick",fill:null,stroke:"currentColor"},F1=class extends at{constructor(t,n,r){super(t,n,r,fV),Oi(this,r)}render(t,n,r,i,o){return J("svg:g",o).call(St,this,i,o).call(this._transform,this,n).call(s=>s.selectAll().data(t).enter().append("line").call(_t,this).attr("x1",this._x1(n,r,i)).attr("x2",this._x2(n,r,i)).attr("y1",this._y1(n,r,i)).attr("y2",this._y2(n,r,i)).call(zt,this,r).call(Ss,this,r,o)).node()}},wp=class extends F1{constructor(t,n={}){let{x:r,y:i,inset:o=0,insetTop:s=o,insetBottom:a=o}=n;super(t,{x:{value:r,scale:"x"},y:{value:i,scale:"y",type:"band",optional:!0}},n),this.insetTop=bt(s),this.insetBottom=bt(a)}_transform(t,n,{x:r}){t.call(ut,n,{x:r},Te,0)}_x1(t,{x:n}){return r=>n[r]}_x2(t,{x:n}){return r=>n[r]}_y1({y:t},{y:n},{marginTop:r}){let{insetTop:i}=this;return n&&t?o=>n[o]+i:r+i}_y2({y:t},{y:n},{height:r,marginBottom:i}){let{insetBottom:o}=this;return n&&t?s=>n[s]+t.bandwidth()-o:r-i-o}},vp=class extends F1{constructor(t,n={}){let{x:r,y:i,inset:o=0,insetRight:s=o,insetLeft:a=o}=n;super(t,{y:{value:i,scale:"y"},x:{value:r,scale:"x",type:"band",optional:!0}},n),this.insetRight=bt(s),this.insetLeft=bt(a)}_transform(t,n,{y:r}){t.call(ut,n,{y:r},0,Te)}_x1({x:t},{x:n},{marginLeft:r}){let{insetLeft:i}=this;return n&&t?o=>n[o]+i:r+i}_x2({x:t},{x:n},{width:r,marginRight:i}){let{insetRight:o}=this;return n&&t?s=>n[s]+t.bandwidth()-o:r-i-o}_y1(t,{y:n}){return r=>n[r]}_y2(t,{y:n}){return r=>n[r]}};function k1(e,{x:t=Y,...n}={}){return new wp(e,{...n,x:t})}function N1(e,{y:t=Y,...n}={}){return new vp(e,{...n,y:t})}function D5(e,{x:t=Y,y:n=null,fill:r="#ccc",fillOpacity:i,stroke:o="currentColor",strokeOpacity:s,strokeWidth:a=2,sort:l,...c}={}){let u=n!=null?_a:Wh;return bn(Ur(e,u({x1:ES,x2:MS},{x:t,y:n,stroke:o,strokeOpacity:s,...c})),Io(e,u({x1:"p25",x2:"p75"},{x:t,y:n,fill:r,fillOpacity:i,...c})),k1(e,u({x:"p50"},{x:t,y:n,stroke:o,strokeOpacity:s,strokeWidth:a,sort:l,...c})),Nn(e,oi({x:R5},{x:t,y:n,z:n,stroke:o,strokeOpacity:s,...c})))}function L5(e,{y:t=Y,x:n=null,fill:r="#ccc",fillOpacity:i,stroke:o="currentColor",strokeOpacity:s,strokeWidth:a=2,sort:l,...c}={}){let u=n!=null?ba:Wh;return bn(Pr(e,u({y1:ES,y2:MS},{x:n,y:t,stroke:o,strokeOpacity:s,...c})),Eo(e,u({y1:"p25",y2:"p75"},{x:n,y:t,fill:r,fillOpacity:i,...c})),N1(e,u({y:"p50"},{x:n,y:t,stroke:o,strokeOpacity:s,strokeWidth:a,sort:l,...c})),Nn(e,oi({y:R5},{x:n,y:t,z:n,stroke:o,strokeOpacity:s,...c})))}function R5(e){let t=ES(e),n=MS(e);return e.map(r=>r<t||r>n?r:NaN)}function ES(e){let t=P5(e)*2.5-U5(e)*1.5;return ge(e,n=>n>=t?n:NaN)}function MS(e){let t=U5(e)*2.5-P5(e)*1.5;return Jt(e,n=>n<=t?n:NaN)}function P5(e){return Kn(e,.25)}function U5(e){return Kn(e,.75)}var dV={ariaLabel:"raster",stroke:null,pixelSize:1};function af(e,t){let n=+e;if(isNaN(n))throw new Error(`invalid ${t}: ${e}`);return n}function $5(e,t){let n=Math.floor(e);if(isNaN(n))throw new Error(`invalid ${t}: ${e}`);return n}var Tp=class extends at{constructor(t,n,r={},i){let{width:o,height:s,x:a,y:l,x1:c=a==null?0:void 0,y1:u=l==null?0:void 0,x2:d=a==null?o:void 0,y2:f=l==null?s:void 0,pixelSize:h=i.pixelSize,blur:p=0,interpolate:m}=r;if(o!=null&&(o=$5(o,"width")),s!=null&&(s=$5(s,"height")),c!=null&&(c=af(c,"x1")),u!=null&&(u=af(u,"y1")),d!=null&&(d=af(d,"x2")),f!=null&&(f=af(f,"y2")),a==null&&(c==null||d==null))throw new Error("missing x");if(l==null&&(u==null||f==null))throw new Error("missing y");t!=null&&o!=null&&s!=null&&(a===void 0&&c!=null&&d!=null&&(a=xV(c,d,o,s)),l===void 0&&u!=null&&f!=null&&(l=wV(u,f,o,s))),super(t,{x:{value:a,scale:"x",optional:!0},y:{value:l,scale:"y",optional:!0},x1:{value:c==null?null:[c],scale:"x",optional:!0,filter:null},y1:{value:u==null?null:[u],scale:"y",optional:!0,filter:null},x2:{value:d==null?null:[d],scale:"x",optional:!0,filter:null},y2:{value:f==null?null:[f],scale:"y",optional:!0,filter:null},...n},r,i),this.width=o,this.height=s,this.pixelSize=af(h,"pixelSize"),this.blur=af(p,"blur"),this.interpolate=a==null||l==null?null:hV(m)}},Ip=class extends Tp{constructor(t,n={}){let{imageRendering:r}=n;if(t==null){let{fill:i,fillOpacity:o}=n;Kt(o)[0]!==void 0&&(n=O1("fillOpacity",n)),De(i)[0]!==void 0&&(n=O1("fill",n))}super(t,void 0,n,dV),this.imageRendering=te(r,"auto")}scale(t,{color:n,...r},i){return super.scale(t,r,i)}render(t,n,r,i,o){let s=n[r.channels.fill?.scale]??(A=>A),{x:a,y:l}=r,{document:c}=o,[u,d,f,h]=V5(r,i,o),p=f-u,m=h-d,{pixelSize:g,width:b=Math.round(Math.abs(p)/g),height:y=Math.round(Math.abs(m)/g)}=this,x=b*y,{fill:_,fillOpacity:v}=r,w=0;if(this.interpolate){let A=b/p,C=y/m,L=Pt(a,B=>(B-u)*A,Float64Array),U=Pt(l,B=>(B-d)*C,Float64Array);_&&(_=this.interpolate(t,b,y,L,U,_)),v&&(v=this.interpolate(t,b,y,L,U,v))}else this.data==null&&t&&(w=t.fi*x);let T=c.createElement("canvas");T.width=b,T.height=y;let M=T.getContext("2d"),F=M.createImageData(b,y),S=F.data,{r:I,g:k,b:O}=Qn(this.fill)??{r:0,g:0,b:0},N=(this.fillOpacity??1)*255;for(let A=0;A<x;++A){let C=A<<2;if(_){let L=s(_[A+w]);if(L==null){S[C+3]=0;continue}({r:I,g:k,b:O}=Qn(L))}v&&(N=v[A+w]*255),S[C+0]=I,S[C+1]=k,S[C+2]=O,S[C+3]=N}return this.blur>0&&fx(F,this.blur),M.putImageData(F,0,0),J("svg:g",o).call(St,this,i,o).call(ut,this,n).call(A=>A.append("image").attr("transform",`translate(${u},${d}) scale(${Math.sign(f-u)},${Math.sign(h-d)})`).attr("width",Math.abs(p)).attr("height",Math.abs(m)).attr("preserveAspectRatio","none").call(et,"image-rendering",this.imageRendering).call(_t,this).attr("xlink:href",T.toDataURL())).node()}};function AS(e,t,n){arguments.length<3&&(n=t,t=null);let{x:r,y:i,[e]:o,...s}=n;return r===void 0&&i===void 0&&x4(t)&&(r=hs,i=ha,o===void 0&&(o=m4)),[t,{...s,x:r,y:i,[e]:o}]}function z5(){let[e,t]=AS("fill",...arguments);return new Ip(e,e==null||t.fill!==void 0||t.fillOpacity!==void 0?t:{...t,fill:Y})}function V5({x1:e,y1:t,x2:n,y2:r},i,{projection:o}){let{width:s,height:a,marginTop:l,marginRight:c,marginBottom:u,marginLeft:d}=i;return[e&&o==null?e[0]:d,t&&o==null?t[0]:l,n&&o==null?n[0]:s-c,r&&o==null?r[0]:a-u]}function FS({x1:e,y1:t,x2:n,y2:r},i,o,s){let a={};return e&&(a.x1=e),t&&(a.y1=t),n&&(a.x2=n),r&&(a.y2=r),V5(ku(a,i),o,s)}function O1(e,t={}){let{[e]:n}=t;if(typeof n!="function")throw new Error(`invalid ${e}: not a function`);return ye({...t,[e]:void 0},function(r,i,o,s,a,l){let{x:c,y:u}=s;if(!c)throw new Error("missing scale: x");if(!u)throw new Error("missing scale: y");let[d,f,h,p]=FS(o,s,a,l),m=h-d,g=p-f,{pixelSize:b}=this,{width:y=Math.round(Math.abs(m)/b),height:x=Math.round(Math.abs(g)/b)}=t,_=new Array(y*x*(i?i.length:1)),v=m/y,w=g/x,T=0;for(let M of i??[void 0])for(let F=.5;F<x;++F)for(let S=.5;S<y;++S,++T)_[T]=n(c.invert(d+S*v),u.invert(f+F*w),M);return{data:_,facets:i,channels:{[e]:{value:_,scale:"auto"}}}})}function hV(e){if(typeof e=="function")return e;if(e==null)return C1;switch(`${e}`.toLowerCase()){case"none":return C1;case"nearest":return NS;case"barycentric":return kS();case"random-walk":return OS()}throw new Error(`invalid interpolate: ${e}`)}function C1(e,t,n,r,i,o){let s=new Array(t*n);for(let a of e)r[a]<0||r[a]>=t||i[a]<0||i[a]>=n||(s[Math.floor(i[a])*t+Math.floor(r[a])]=o[a]);return s}function kS({random:e=xl(42)}={}){return(t,n,r,i,o,s)=>{let{points:a,triangles:l,hull:c}=Un.from(t,h=>i[h],h=>o[h]),u=new s.constructor(n*r).fill(NaN),d=new Uint8Array(n*r),f=_V(s,e);for(let h=0;h<l.length;h+=3){let p=l[h],m=l[h+1],g=l[h+2],b=a[2*p],y=a[2*m],x=a[2*g],_=a[2*p+1],v=a[2*m+1],w=a[2*g+1],T=Math.min(b,y,x),M=Math.max(b,y,x),F=Math.min(_,v,w),S=Math.max(_,v,w),I=(v-w)*(b-x)+(_-w)*(x-y);if(!I)continue;let k=s[t[p]],O=s[t[m]],N=s[t[g]];for(let A=Math.floor(T);A<M;++A)for(let C=Math.floor(F);C<S;++C){if(A<0||A>=n||C<0||C>=r)continue;let L=A+.5,U=C+.5,B=((v-w)*(L-x)+(U-w)*(x-y))/I;if(B<0)continue;let $=((w-_)*(L-x)+(U-w)*(b-x))/I;if($<0)continue;let V=1-B-$;if(V<0)continue;let z=A+n*C;u[z]=f(k,B,O,$,N,V,A,C),d[z]=1}}return pV(u,d,i,o,s,n,r,c,t,f),u}}function pV(e,t,n,r,i,o,s,a,l,c){n=Float64Array.from(a,h=>n[l[h]]),r=Float64Array.from(a,h=>r[l[h]]),i=Array.from(a,h=>i[l[h]]);let u=n.length,d=Array.from({length:u},(h,p)=>yV(p,n,r)),f=0;for(let h=0;h<s;++h){let p=h+.5;for(let m=0;m<o;++m){let g=m+o*h;if(!t[g]){let b=m+.5;for(let y=0;y<u;++y){let x=(u+f+(y%2?(y+1)/2:-y/2))%u;if(d[x](b,p)){let _=mV(n.at(x-1),r.at(x-1),n[x],r[x],b,p);e[g]=c(i.at(x-1),_,i[x],1-_,i[x],0,m,h),f=x;break}}}}}}function mV(e,t,n,r,i,o){let s=n-e,a=r-t,l=s*(n-i)+a*(r-o),c=s*(i-e)+a*(o-t);return l>0&&c>0?l/(l+c):+(l>c)}function Sp(e,t,n,r){return e*r-n*t}function yV(e,t,n){let r=t.length,i=t.at(e-2),o=n.at(e-2),s=t.at(e-1),a=n.at(e-1),l=t[e],c=n[e],u=t.at(e+1-r),d=n.at(e+1-r),f=s-l,h=a-c,p=i-s,m=o-a,g=l-u,b=c-d,y=Math.hypot(f,h),x=Math.hypot(p,m),_=Math.hypot(g,b);return(v,w)=>{let T=v-s,M=w-a,F=v-l,S=w-c;return Sp(T,M,F,S)>-1e-6&&Sp(T,M,f,h)*x-Sp(T,M,p,m)*y>-1e-6&&Sp(F,S,g,b)*y-Sp(F,S,f,h)*_<=0}}function NS(e,t,n,r,i,o){let s=new o.constructor(t*n),a=Un.from(e,u=>r[u],u=>i[u]),l,c;for(let u=.5,d=0;u<n;++u){c=l;for(let f=.5;f<t;++f,++d)c=a.find(f,u,c),f===.5&&(l=c),s[d]=o[e[c]]}return s}function OS({random:e=xl(42),minDistance:t=.5,maxSteps:n=2}={}){return(r,i,o,s,a,l)=>{let c=new l.constructor(i*o),u=Un.from(r,p=>s[p],p=>a[p]),d,f,h;for(let p=.5,m=0;p<o;++p){f=d;for(let g=.5;g<i;++g,++m){let b=g,y=p;h=f=u.find(b,y,f),g===.5&&(d=f);let x,_=0;for(;(x=Math.hypot(s[r[h]]-b,a[r[h]]-y))>t&&_<n;){let v=e(g,p,_)*2*Math.PI;b+=Math.cos(v)*x,y+=Math.sin(v)*x,h=u.find(b,y,h),++_}c[m]=l[r[h]]}}return c}}function gV(e,t,n,r,i,o){return t*e+r*n+o*i}function bV(e){return(t,n,r,i,o,s,a,l)=>{let c=e(a,l);return c<n?t:c<n+i?r:o}}function _V(e,t){return ys(e)||Se(e)?gV:bV(t)}function xV(e,t,n){return{transform(r){let i=r.length,o=new Float64Array(i),s=(t-e)/n,a=e+s/2;for(let l=0;l<i;++l)o[l]=l%n*s+a;return o}}}function wV(e,t,n,r){return{transform(i){let o=i.length,s=new Float64Array(o),a=(t-e)/r,l=e+a/2;for(let c=0;c<o;++c)s[c]=Math.floor(c/n)%r*a+l;return s}}}var j5={ariaLabel:"contour",fill:"none",stroke:"currentColor",strokeMiterlimit:1,pixelSize:2},Ep=class extends Tp{constructor(t,{smooth:n=!0,value:r,...i}={}){let o=Pb({},i,j5);if(r===void 0){for(let a in o)if(o[a].value!=null){if(r!==void 0)throw new Error("ambiguous contour value");r=i[a],i[a]="value"}}if(r!=null){let a={transform:l=>l.map(c=>c.value),label:lr(r)};for(let l in o)i[l]==="value"&&(i[l]=a)}if(t==null){if(r==null)throw new Error("missing contour value");i=O1("value",{value:r,...i}),r=null}else{let{interpolate:a}=i;r===void 0&&(r=Y),a===void 0&&(i.interpolate="nearest")}super(t,{value:{value:r,optional:!0}},vV(i),j5);let s={geometry:{value:Y}};for(let a in this.channels){let l=this.channels[a],{scale:c}=l;c==="x"||c==="y"||a==="value"||(s[a]=l,delete this.channels[a])}this.contourChannels=s,this.smooth=!!n}filter(t,{x:n,y:r,value:i,...o},s){return super.filter(t,o,s)}render(t,n,r,i,o){let{geometry:s}=r,a=Mn();return J("svg:g",o).call(St,this,i,o).call(ut,this,n).call(l=>{l.selectAll().data(t).enter().append("path").call(_t,this).attr("d",c=>a(s[c])).call(zt,this,r)}).node()}};function vV({thresholds:e,interval:t,...n}){return e=_S(e,t,Ws),ye(n,function(r,i,o,s,a,l){let[c,u,d,f]=FS(o,s,a,l),h=d-c,p=f-u,{pixelSize:m,width:g=Math.round(Math.abs(h)/m),height:b=Math.round(Math.abs(p)/m)}=this,y=g/h,x=b/p,_=o.value.value,v=[];if(this.interpolate){let{x:S,y:I}=wa(o,s,l),k=Pt(S,C=>(C-c)*y,Float64Array),O=Pt(I,C=>(C-u)*x,Float64Array),N=[o.x,o.y,o.value],A=[k,O,_];for(let C of i){let L=this.filter(C,N,A);v.push(this.interpolate(L,g,b,k,O,_))}}else if(i){let S=g*b,I=i.length;for(let k=0;k<I;++k)v.push(_.slice(k*S,k*S+S))}else v.push(_);if(this.blur>0)for(let S of v)ud({data:S,width:g,height:b},this.blur);let w=SV(e,_,...TV(v));if(w===null)throw new Error(`unsupported thresholds: ${e}`);let{contour:T}=Yc().size([g,b]).smooth(this.smooth),M=[],F=[];for(let S of v)F.push(Ke(M.length,M.push(...Pt(w,I=>T(S,I)))));for(let{coordinates:S}of M)for(let I of S)for(let k of I)for(let O of k)O[0]=O[0]/y+c,O[1]=O[1]/x+u;return{data:M,facets:F,channels:Lb(this.contourChannels,M)}})}function SV(e,t,n,r){if(typeof e?.range=="function")return e.range(e.floor(n),r);if(typeof e=="function"&&(e=e(t,n,r)),typeof e!="number")return Re(e);let i=Tn(...Cc(n,r,e),e);for(;i[i.length-1]>=r;)i.pop();for(;i[1]<n;)i.shift();return i}function q5(){return new Ep(...AS("value",...arguments))}function TV(e){return[ge(e,t=>ge(t,Y5)),Jt(e,t=>Jt(t,Y5))]}function Y5(e){return isFinite(e)?e:NaN}function H5(e,t){return CS(Sa,e,t)}function X5(e,t={}){return CS(Pu,e,t)}function Z5(e,t={}){return CS(Uu,e,t)}function CS(e,t,n={}){let{x:r,y:i,maxRadius:o}=n,s=e({px:r,py:i,maxRadius:o}),a=[];r!=null&&a.push(Pr(t,W5("x",{...s,inset:-6},n))),i!=null&&a.push(Ur(t,W5("y",{...s,inset:-6},n))),r!=null&&a.push($r(t,G5("x",{...s,dy:9,frameAnchor:"bottom",lineAnchor:"top"},n))),i!=null&&a.push($r(t,G5("y",{...s,dx:-9,frameAnchor:"left",textAnchor:"end"},n)));for(let l of a)l.ariaLabel=`crosshair ${l.ariaLabel}`;return bn(...a)}function K5(e,{channels:t,...n},{facet:r,facetAnchor:i,fx:o,fy:s,[e]:a,channels:l,transform:c,initializer:u}){return{...n,facet:r,facetAnchor:i,fx:o,fy:s,[e]:a,channels:{...t,...l},transform:c,initializer:IV(e,u)}}function IV(e,t){return t==null?t:function(n,r,{x:i,y:o,px:s,py:a,...l},...c){let{channels:{x:u,y:d,...f}={},...h}=t.call(this,n,r,{...l,x:s,y:a},...c);return{channels:{...f,...u&&{px:u,...e==="x"&&{x:u}},...d&&{py:d,...e==="y"&&{y:d}}},...h}}}function W5(e,t,n){let{color:r="currentColor",opacity:i=.2,ruleStroke:o=r,ruleStrokeOpacity:s=i,ruleStrokeWidth:a}=n;return{...K5(e,t,n),stroke:o,strokeOpacity:s,strokeWidth:a}}function G5(e,t,n){let{color:r="currentColor",textFill:i=r,textFillOpacity:o,textStroke:s="white",textStrokeOpacity:a,textStrokeWidth:l=5}=n;return{...K5(e,t,EV(e,n)),fill:i,fillOpacity:o,stroke:s,strokeOpacity:a,strokeWidth:l}}function EV(e,t){return ye(t,(n,r,i)=>({channels:{text:{value:Zh(i,e)?.value}}}))}var MV={ariaLabel:"delaunay link",fill:"none",stroke:"currentColor",strokeMiterlimit:1},AV={ariaLabel:"delaunay mesh",fill:null,stroke:"currentColor",strokeOpacity:.2},FV={ariaLabel:"hull",fill:"none",stroke:"currentColor",strokeWidth:1.5,strokeMiterlimit:1},kV={ariaLabel:"voronoi",fill:"none",stroke:"currentColor",strokeMiterlimit:1},NV={ariaLabel:"voronoi mesh",fill:null,stroke:"currentColor",strokeOpacity:.2},BS=class extends at{constructor(t,n={}){let{x:r,y:i,z:o,curve:s,tension:a}=n;super(t,{x:{value:r,scale:"x",optional:!0},y:{value:i,scale:"y",optional:!0},z:{value:o,optional:!0}},n,MV),this.curve=fp(s,a),Oi(this,n)}render(t,n,r,i,o){let{x:s,y:a}=n,{x:l,y:c,z:u}=r,{curve:d}=this,[f,h]=yn(this,i),p=l?y=>l[y]:dn(f),m=c?y=>c[y]:dn(h),g=this;function b(y){let x=-1,_=[],v={};for(let N in r)v[N]=[];let w=[],T=[],M=[],F=[];function S(N,A){N=y[N],A=y[A],_.push(++x),w[x]=p(N),M[x]=m(N),T[x]=p(A),F[x]=m(A);for(let C in r)v[C].push(r[C][A])}let{halfedges:I,hull:k,triangles:O}=Un.from(y,p,m);for(let N=0;N<I.length;++N){let A=I[N];A>N&&S(O[N],O[A])}for(let N=0;N<k.length;++N)S(k[N],k[(N+1)%k.length]);Ce(this).selectAll().data(_).enter().append("path").call(_t,g).attr("d",N=>{let A=er(),C=d(A);return C.lineStart(),C.point(w[N],M[N]),C.point(T[N],F[N]),C.lineEnd(),A}).call(zt,g,v).call(Ss,g,v,o)}return J("svg:g",o).call(St,this,i,o).call(ut,this,{x:l&&s,y:c&&a}).call(u?y=>y.selectAll().data(ln(t,x=>u[x]).values()).enter().append("g").each(b):y=>y.datum(t).each(b)).node()}},Mp=class extends at{constructor(t,n={},r,i=({z:o})=>o){let{x:o,y:s}=n;super(t,{x:{value:o,scale:"x",optional:!0},y:{value:s,scale:"y",optional:!0},z:{value:i(n),optional:!0}},n,r)}render(t,n,r,i,o){let{x:s,y:a}=n,{x:l,y:c,z:u}=r,[d,f]=yn(this,i),h=l?b=>l[b]:dn(d),p=c?b=>c[b]:dn(f),m=this;function g(b){let y=Un.from(b,h,p);Ce(this).append("path").datum(b[0]).call(_t,m).attr("d",m._render(y,i)).call(zt,m,r)}return J("svg:g",o).call(St,this,i,o).call(ut,this,{x:l&&s,y:c&&a}).call(u?b=>b.selectAll().data(ln(t,y=>u[y]).values()).enter().append("g").each(g):b=>b.datum(t).each(g)).node()}},DS=class extends Mp{constructor(t,n={}){super(t,n,AV),this.fill="none"}_render(t){return t.render()}},LS=class extends Mp{constructor(t,n={}){super(t,n,FV,jn)}_render(t){return t.renderHull()}},RS=class extends at{constructor(t,n={}){let{x:r,y:i,z:o}=n;super(t,{x:{value:r,scale:"x",optional:!0},y:{value:i,scale:"y",optional:!0},z:{value:o,optional:!0}},n,kV)}render(t,n,r,i,o){let{x:s,y:a}=n,{x:l,y:c,z:u}=r,[d,f]=yn(this,i),h=l?b=>l[b]:dn(d),p=c?b=>c[b]:dn(f),m=this;function g(b){let y=Un.from(b,h,p),x=Q5(y,i);Ce(this).selectAll().data(b).enter().append("path").call(_t,m).attr("d",(_,v)=>x.renderCell(v)).call(zt,m,r)}return J("svg:g",o).call(St,this,i,o).call(ut,this,{x:l&&s,y:c&&a}).call(u?b=>b.selectAll().data(ln(t,y=>u[y]).values()).enter().append("g").each(g):b=>b.datum(t).each(g)).node()}},PS=class extends Mp{constructor(t,n){super(t,n,NV),this.fill="none"}_render(t,n){return Q5(t,n).render()}};function Q5(e,t){let{width:n,height:r,marginTop:i,marginRight:o,marginBottom:s,marginLeft:a}=t;return e.voronoi([a,i,n-o,r-s])}function Ap(e,t,{x:n,y:r,...i}={}){return[n,r]=Fe(n,r),new e(t,{...i,x:n,y:r})}function J5(e,t){return Ap(BS,e,t)}function tk(e,t){return Ap(DS,e,t)}function ek(e,t){return Ap(LS,e,t)}function nk(e,t){return Ap(RS,e,t)}function rk(e,t){return Ap(PS,e,t)}var OV={ariaLabel:"density",fill:"none",stroke:"currentColor",strokeMiterlimit:1},Fp=class extends at{constructor(t,{x:n,y:r,z:i,weight:o,fill:s,stroke:a,...l}={}){let c=ik(s)&&(s="currentColor",!0),u=ik(a)&&(a="currentColor",!0);super(t,{x:{value:n,scale:"x",optional:!0},y:{value:r,scale:"y",optional:!0},z:{value:jn({z:i,fill:s,stroke:a}),optional:!0},weight:{value:o,optional:!0}},BV({...l,fill:s,stroke:a},c,u),OV),c&&(this.fill=void 0),u&&(this.stroke=void 0),this.z=i}filter(t){return t}render(t,n,r,i,o){let{contours:s}=r,a=Mn();return J("svg:g",o).call(St,this,i,o).call(ut,this,{}).call(l=>l.selectAll().data(t).enter().append("path").call(_t,this).call(zt,this,r).attr("d",c=>a(s[c]))).node()}};function ok(e,{x:t,y:n,...r}={}){return[t,n]=Fe(t,n),new Fp(e,{...r,x:t,y:n})}var CV=new Set(["x","y","z","weight"]);function BV(e,t,n){let{bandwidth:i,thresholds:o}=e;return i=i===void 0?20:+i,o=o===void 0?20:typeof o?.[Symbol.iterator]=="function"?He(o):+o,ye(e,function(s,a,l,c,u,d){let f=l.weight?He(l.weight.value):null,h=l.z?.value,{z:p}=this,[m,g]=yn(this,u),{width:b,height:y}=u,{x,y:_}=wa(l,c,d),v=Object.fromEntries(Object.entries(l).filter(([O])=>!CV.has(O)).map(([O,N])=>[O,{...N,value:[]}])),w=t&&[],T=n&&[],M=Hx().x(x?O=>x[O]:m).y(_?O=>_[O]:g).weight(f?O=>f[O]:1).size([b,y]).bandwidth(i),F=[];for(let O of a){let N=[];F.push(N);for(let A of h?Qh(O,h,p):[O]){let C=M.contours(A);N.push([A,C])}}let S=o;if(!(S instanceof Dl)){let O=0;for(let N of F)for(let[,A]of N){let C=A.max;C>O&&(O=C)}S=Float64Array.from({length:o-1},(N,A)=>O*100*(A+1)/o)}let I=[],k=[];for(let O of F){let N=[];I.push(N);for(let[A,C]of O)for(let L of S){N.push(k.length),k.push(C(L/100)),w&&w.push(L),T&&T.push(L);for(let U in v)v[U].value.push(l[U].value[A[0]])}}return w&&w.push(0),T&&T.push(0),{data:s,facets:I,channels:{...v,...w&&{fill:{value:w,scale:"color"}},...T&&{stroke:{value:T,scale:"color"}},contours:{value:k}}}})}function ik(e){return/^density$/i.test(e)}var DV={ariaLabel:"geo",fill:"none",stroke:"currentColor",strokeWidth:1,strokeLinecap:"round",strokeLinejoin:"round",strokeMiterlimit:1},kp=class extends at{constructor(t,n={}){let[r,i]=Kt(n.r,3);super(t,{geometry:{value:n.geometry,scale:"projection"},r:{value:r,scale:"r",filter:sr,optional:!0}},gp(n),DV),this.r=i}render(t,n,r,i,o){let{geometry:s,r:a}=r,l=Mn(o.projection??LV(n)),{r:c}=this;return ua(c)?t=[]:c!==void 0&&l.pointRadius(c),J("svg:g",o).call(St,this,i,o).call(ut,this,n).call(u=>{u.selectAll().data(t).enter().append("path").call(_t,this).attr("d",a?d=>l.pointRadius(a[d])(s[d]):d=>l(s[d])).call(zt,this,r)}).node()}};function LV({x:e,y:t}){if(e||t)return e??(e=n=>n),t??(t=n=>n),bl({point(n,r){this.stream.point(e(n),t(r))}})}function B1(e,{geometry:t=Y,...n}={}){switch(e?.type){case"FeatureCollection":e=e.features;break;case"GeometryCollection":e=e.geometries;break;case"Feature":case"LineString":case"MultiLineString":case"MultiPoint":case"MultiPolygon":case"Point":case"Polygon":case"Sphere":e=[e];break}return new kp(e,{geometry:t,...n})}function sk({strokeWidth:e=1.5,...t}={}){return B1({type:"Sphere"},{strokeWidth:e,...t})}function ak({strokeOpacity:e=.1,...t}={}){return B1(yw(),{strokeOpacity:e,...t})}var lf=.5,cf=0;function lk(e={fill:"count"},{binWidth:t,...n}={}){let{z:r}=n;return t=t===void 0?20:bt(t),e=Hh(e,n),wo(e,"fill")&&(n.channels={...n.channels,fill:{value:[]}}),n.symbol===void 0&&(n.symbol="hexagon"),n.r===void 0&&!wo(e,"r")&&(n.r=t/2),ye(n,(i,o,s,a,l,c)=>{let{x:u,y:d,z:f,fill:h,stroke:p,symbol:m}=s;if(u===void 0)throw new Error("missing channel: x");if(d===void 0)throw new Error("missing channel: y");({x:u,y:d}=wa(s,a,c)),f=f?f.value:st(i,r),h=h?.value,p=p?.value,m=m?.value;let g=Xh(e,{z:f,fill:h,stroke:p,symbol:m}),b=f&&[],y=h&&[],x=p&&[],_=m&&[],v=[],w=[],T=[],M=-1;for(let k of e)k.initialize(i);for(let k of o){let O=[];for(let N of e)N.scope("facet",k);for(let[N,A]of ga(k,g))for(let C of RV(A,u,d,t)){O.push(++M),w.push(C.x),T.push(C.y),f&&b.push(g===f?N:f[C[0]]),h&&y.push(g===h?N:h[C[0]]),p&&x.push(g===p?N:p[C[0]]),m&&_.push(g===m?N:m[C[0]]);for(let L of e)L.reduce(C)}v.push(O)}let F=s.x.scale,S=s.y.scale,I={x:{value:w,source:a[F]?{value:Pt(w,a[F].invert),scale:F}:null},y:{value:T,source:a[S]?{value:Pt(T,a[S].invert),scale:S}:null},...f&&{z:{value:b}},...h&&{fill:{value:y,scale:"auto"}},...p&&{stroke:{value:x,scale:"auto"}},...m&&{symbol:{value:_,scale:"auto"}},...Object.fromEntries(e.map(({name:k,output:O})=>[k,{scale:"auto",label:O.label,radius:k==="r"?t/2:void 0,value:O.transform()}]))};return{data:i,facets:v,channels:I}})}function RV(e,t,n,r){let i=r*(1.5/w2),o=new Map;for(let s of e){let a=t[s],l=n[s];if(isNaN(a)||isNaN(l))continue;let c=Math.round(l=(l-cf)/i),u=Math.round(a=(a-lf)/r-(c&1)/2),d=l-c;if(Math.abs(d)*3>1){let p=a-u,m=u+(a<u?-1:1)/2,g=c+(l<c?-1:1),b=a-m,y=l-g;p*p+d*d>b*b+y*y&&(u=m+(c&1?1:-1)/2,c=g)}let f=`${u},${c}`,h=o.get(f);h===void 0&&(o.set(f,h=[]),h.x=(u+(c&1)/2)*r+lf,h.y=c*i+cf),h.push(s)}return o.values()}var PV={ariaLabel:"hexgrid",fill:"none",stroke:"currentColor",strokeOpacity:.1};function ck(e){return new Np(e)}var Np=class extends at{constructor({binWidth:t=20,clip:n=!0,...r}={}){super(da,void 0,{clip:n,...r},PV),this.binWidth=bt(t)}render(t,n,r,i,o){let{binWidth:s}=this,{marginTop:a,marginRight:l,marginBottom:c,marginLeft:u,width:d,height:f}=i,h=u-lf,p=d-l-lf,m=a-cf,g=f-c-cf,b=s/2,y=b*v2,x=y/2,_=b*2,v=y*1.5,w=Math.floor(h/_),T=Math.ceil(p/_),M=Math.floor((m+x)/v),F=Math.ceil((g-x)/v)+1,S=`m0,${Oa(-y)}l${Oa(b)},${Oa(x)}v${Oa(y)}l${Oa(-b)},${Oa(x)}`,I=S;for(let k=M;k<F;++k)for(let O=w;O<T;++O)I+=`M${Oa(O*_+(k&1)*b)},${Oa(k*v)}${S}`;return J("svg:g",o).datum(0).call(St,this,i,o).call(ut,this,{},Te+lf,Te+cf).call(k=>k.append("path").call(_t,this).call(zt,this,r).attr("d",I)).node()}};function Oa(e){return Math.round(e*1e3)/1e3}var UV={ariaLabel:"image",fill:null,stroke:null};function $V(e){return/^\.*\//.test(e)}function zV(e){return/^(blob|data|file|http|https):/i.test(e)}function VV(e){return typeof e=="string"&&($V(e)||zV(e))?[void 0,e]:[e,void 0]}var Op=class extends at{constructor(t,n={}){let{x:r,y:i,r:o,width:s,height:a,rotate:l,src:c,preserveAspectRatio:u,crossOrigin:d,frameAnchor:f,imageRendering:h}=n;o==null&&(o=void 0),o===void 0&&s===void 0&&a===void 0?s=a=16:s===void 0&&a!==void 0?s=a:a===void 0&&s!==void 0&&(a=s);let[p,m]=VV(c),[g,b]=Kt(o),[y,x]=Kt(s,b!==void 0?b*2:void 0),[_,v]=Kt(a,b!==void 0?b*2:void 0),[w,T]=Kt(l,0);super(t,{x:{value:r,scale:"x",optional:!0},y:{value:i,scale:"y",optional:!0},r:{value:g,scale:"r",filter:sr,optional:!0},width:{value:y,filter:sr,optional:!0},height:{value:_,filter:sr,optional:!0},rotate:{value:w,optional:!0},src:{value:p,optional:!0}},gp(n),UV),this.src=m,this.width=x,this.rotate=T,this.height=v,this.r=b,this.preserveAspectRatio=te(u,"xMidYMid"),this.crossOrigin=Le(d),this.frameAnchor=xo(f),this.imageRendering=te(h,"auto")}render(t,n,r,i,o){let{x:s,y:a}=n,{x:l,y:c,width:u,height:d,r:f,rotate:h,src:p}=r,{r:m,width:g,height:b,rotate:y}=this,[x,_]=yn(this,i);return J("svg:g",o).call(St,this,i,o).call(ut,this,{x:l&&s,y:c&&a}).call(v=>v.selectAll().data(t).enter().append("image").call(_t,this).attr("x",uk(l,u,f,x,g,m)).attr("y",uk(c,d,f,_,b,m)).attr("width",u?w=>u[w]:g!==void 0?g:f?w=>f[w]*2:m*2).attr("height",d?w=>d[w]:b!==void 0?b:f?w=>f[w]*2:m*2).attr("transform",h?w=>`rotate(${h[w]})`:y?`rotate(${y})`:null).attr("transform-origin",h||y?Ta`${l?w=>l[w]:x}px ${c?w=>c[w]:_}px`:null).call(et,"href",p?w=>p[w]:this.src).call(et,"preserveAspectRatio",this.preserveAspectRatio).call(et,"crossorigin",this.crossOrigin).call(et,"image-rendering",this.imageRendering).call(et,"clip-path",f?w=>`circle(${f[w]}px)`:m!==void 0?`circle(${m}px)`:null).call(zt,this,r)).node()}};function uk(e,t,n,r,i,o){return t&&e?s=>e[s]-t[s]/2:t?s=>r-t[s]/2:e&&i!==void 0?s=>e[s]-i/2:i!==void 0?r-i/2:n&&e?s=>e[s]-n[s]:n?s=>r-n[s]:e?s=>e[s]-o:r-o}function fk(e,{x:t,y:n,...r}={}){return r.frameAnchor===void 0&&([t,n]=Fe(t,n)),new Op(e,{...r,x:t,y:n})}function jV(e,t,n){var r=1e-8,i=t-1,o=n-1,s=0,a,l,c,u,d,f,h,p,m,g,b;if(e<=0)return 0;if(e>=1)return 1;for(t>=1&&n>=1?(c=e<.5?e:1-e,u=Math.sqrt(-2*Math.log(c)),h=(2.30753+u*.27061)/(1+u*(.99229+u*.04481))-u,e<.5&&(h=-h),p=(h*h-3)/6,m=2/(1/(2*t-1)+1/(2*n-1)),g=h*Math.sqrt(p+m)/m-(1/(2*n-1)-1/(2*t-1))*(p+5/6-2/(3*m)),h=t/(t+n*Math.exp(2*g))):(a=Math.log(t/(t+n)),l=Math.log(n/(t+n)),u=Math.exp(t*a)/t,d=Math.exp(n*l)/n,g=u+d,e<u/g?h=Math.pow(t*g*e,1/t):h=1-Math.pow(n*g*(1-e),1/n)),b=-uf(t)-uf(n)+uf(t+n);s<10;s++){if(h===0||h===1)return h;if(f=YV(h,t,n)-e,u=Math.exp(i*Math.log(h)+o*Math.log(1-h)+b),d=f/u,h-=u=d/(1-.5*Math.min(1,d*(i/h-o/(1-h)))),h<=0&&(h=.5*(h+u)),h>=1&&(h=.5*(h+u+1)),Math.abs(u)<r*h&&s>0)break}return h}function YV(e,t,n){var r=e===0||e===1?0:Math.exp(uf(t+n)-uf(t)-uf(n)+t*Math.log(e)+n*Math.log(1-e));return e<0||e>1?!1:e<(t+1)/(t+n+2)?r*dk(e,t,n)/t:1-r*dk(1-e,n,t)/n}function dk(e,t,n){var r=1e-30,i=1,o=t+n,s=t+1,a=t-1,l=1,c=1-o*e/s,u,d,f,h;for(Math.abs(c)<r&&(c=r),c=1/c,h=c;i<=100&&(u=2*i,d=i*(n-i)*e/((a+u)*(t+u)),c=1+d*c,Math.abs(c)<r&&(c=r),l=1+d/l,Math.abs(l)<r&&(l=r),c=1/c,h*=c*l,d=-(t+i)*(o+i)*e/((t+u)*(s+u)),c=1+d*c,Math.abs(c)<r&&(c=r),l=1+d/l,Math.abs(l)<r&&(l=r),c=1/c,f=c*l,h*=f,!(Math.abs(f-1)<3e-7));i++);return h}function uf(e){var t=0,n=[76.18009172947146,-86.5053203294167,24.01409824083091,-1.231739572450155,.001208650973866179,-5395239384953e-18],r=1.000000000190015,i,o,s;for(s=(o=i=e)+5.5,s-=(i+.5)*Math.log(s);t<6;t++)r+=n[t]/++o;return Math.log(2.506628274631*r/i)-s}function hk(e,t){var n=jV(2*Math.min(e,1-e),.5*t,.5);return n=Math.sqrt(t*(1-n)/n),e>.5?n:-n}var qV={ariaLabel:"linear-regression",fill:"currentColor",fillOpacity:.1,stroke:"currentColor",strokeWidth:1.5,strokeLinecap:"round",strokeLinejoin:"round",strokeMiterlimit:1},D1=class extends at{constructor(t,n={}){let{x:r,y:i,z:o,ci:s=.95,precision:a=4}=n;if(super(t,{x:{value:r,scale:"x"},y:{value:i,scale:"y"},z:{value:jn(n),optional:!0}},n,qV),this.z=o,this.ci=+s,this.precision=+a,!(0<=this.ci&&this.ci<1))throw new Error(`invalid ci; not in [0, 1): ${s}`);if(!(this.precision>0))throw new Error(`invalid precision: ${a}`)}render(t,n,r,i,o){let{x:s,y:a,z:l}=r,{ci:c}=this;return J("svg:g",o).call(St,this,i,o).call(ut,this,n).call(u=>u.selectAll().data(l?Qh(t,l,this.z):[t]).enter().call(d=>d.append("path").attr("fill","none").call(_t,this).call($l,this,{...r,fill:null,fillOpacity:null}).attr("d",f=>this._renderLine(f,s,a)).call(c&&!gs(this.fill)?f=>f.select(WV).attr("stroke","none").call(_t,this).call($l,this,{...r,stroke:null,strokeOpacity:null,strokeWidth:null}).attr("d",h=>this._renderBand(h,s,a)):()=>{}))).node()}};function WV(){return this.parentNode.insertBefore(this.ownerDocument.createElementNS(Xr.svg,"path"),this)}var US=class extends D1{constructor(t,n){super(t,n)}_renderBand(t,n,r){let{ci:i,precision:o}=this,[s,a]=Qt(t,u=>r[u]),l=L1(t,r,n),c=yk(t,r,n,(1-i)/2,l);return pu().y(u=>u).x0(u=>c(u,-1)).x1(u=>c(u,1))(Ke(s,a-o/2,o).concat(a))}_renderLine(t,n,r){let[i,o]=Qt(t,a=>r[a]),s=L1(t,r,n);return`M${s(i)},${i}L${s(o)},${o}`}},$S=class extends D1{constructor(t,n){super(t,n)}_renderBand(t,n,r){let{ci:i,precision:o}=this,[s,a]=Qt(t,u=>n[u]),l=L1(t,n,r),c=yk(t,n,r,(1-i)/2,l);return pu().x(u=>u).y0(u=>c(u,-1)).y1(u=>c(u,1))(Ke(s,a-o/2,o).concat(a))}_renderLine(t,n,r){let[i,o]=Qt(t,a=>n[a]),s=L1(t,n,r);return`M${i},${s(i)}L${o},${s(o)}`}};function pk(e,{y:t=Ae,x:n=Y,stroke:r,fill:i=ne(r)?"currentColor":r,...o}={}){return new US(e,Wu({...o,x:n,y:t,fill:i,stroke:r}))}function mk(e,{x:t=Ae,y:n=Y,stroke:r,fill:i=ne(r)?"currentColor":r,...o}={}){return new $S(e,qu({...o,x:t,y:n,fill:i,stroke:r}))}function L1(e,t,n){let r=0,i=0,o=0,s=0;for(let u of e){let d=t[u],f=n[u];r+=d,i+=f,o+=d*f,s+=d*d}let a=e.length,l=(a*o-r*i)/(a*s-r*r),c=(i-l*r)/a;return u=>l*u+c}function yk(e,t,n,r,i){let o=In(e,u=>t[u])/e.length,s=0,a=0;for(let u of e)s+=(t[u]-o)**2,a+=(n[u]-i(t[u]))**2;let l=Math.sqrt(a/(e.length-2)),c=hk(r,e.length-2);return(u,d)=>{let f=i(u),h=l*Math.sqrt(1/e.length+(u-o)**2/s);return f+d*c*h}}function Cp({path:e=Y,delimiter:t,frameAnchor:n,treeLayout:r=_l,treeSort:i,treeSeparation:o,treeAnchor:s,treeFilter:a,...l}={}){s=$1(s),i=_k(i),a!=null&&(a=VS(a)),n===void 0&&(n=s.frameAnchor);let c=xk(t),u=Mk(l,VS),[d,f]=pn(),[h,p]=pn();return{x:d,y:h,frameAnchor:n,...mn(l,(m,g)=>{let b=c(st(m,e)),y=f([]),x=p([]),_=-1,v=[],w=[],T=Uy().path(F=>b[F]),M=r();M.nodeSize&&M.nodeSize([1,1]),M.separation&&o!==void 0&&M.separation(o??Vh);for(let F of u)F[P1]=F[Ik]([]);for(let F of g){let S=[],I=T(F.filter(k=>b[k]!=null)).each(k=>k.data=m[k.data]);i!=null&&I.sort(i),M(I);for(let k of I.descendants())if(!(a!=null&&!a(k))){S.push(++_),v[_]=k.data,s.position(k,_,y,x);for(let O of u)O[P1][_]=O[Ek](k)}w.push(S)}return{data:v,facets:w}}),...Object.fromEntries(u)}}function U1({path:e=Y,delimiter:t,curve:n="bump-x",stroke:r="#555",strokeWidth:i=1.5,strokeOpacity:o=.5,treeLayout:s=_l,treeSort:a,treeSeparation:l,treeAnchor:c,treeFilter:u,...d}={}){c=$1(c),a=_k(a),u!=null&&(u=bk(u)),d={curve:n,stroke:r,strokeWidth:i,strokeOpacity:o,...d};let f=xk(t),h=Mk(d,bk),[p,m]=pn(),[g,b]=pn(),[y,x]=pn(),[_,v]=pn();return{x1:p,x2:g,y1:y,y2:_,...mn(d,(w,T)=>{let M=f(st(w,e)),F=m([]),S=b([]),I=x([]),k=v([]),O=-1,N=[],A=[],C=Uy().path(U=>M[U]),L=s();L.nodeSize&&L.nodeSize([1,1]),L.separation&&l!==void 0&&L.separation(l??Vh);for(let U of h)U[P1]=U[Ik]([]);for(let U of T){let B=[],$=C(U.filter(V=>M[V]!=null)).each(V=>V.data=w[V.data]);a!=null&&$.sort(a),L($);for(let{source:V,target:z}of $.links())if(!(u!=null&&!u(z,V))){B.push(++O),N[O]=z.data,c.position(V,O,F,I),c.position(z,O,S,k);for(let Q of h)Q[P1][O]=Q[Ek](z,V)}A.push(B)}return{data:N,facets:A}}),...Object.fromEntries(h)}}function $1(e="left"){switch(`${e}`.trim().toLowerCase()){case"left":return GV;case"right":return HV}throw new Error(`invalid tree anchor: ${e}`)}var GV={frameAnchor:"left",dx:6,position({x:e,y:t},n,r,i){r[n]=t,i[n]=-e}},HV={frameAnchor:"right",dx:-6,position({x:e,y:t},n,r,i){r[n]=-t,i[n]=-e}};function _k(e){return e==null||typeof e=="function"?e:`${e}`.trim().toLowerCase().startsWith("node:")?gk(VS(e)):gk(XV(e))}function gk(e){return(t,n)=>fn(e(t),e(n))}function XV(e){return t=>t.data?.[e]}function xk(e="/"){if(e=`${e}`,e==="/")return n=>n;if(e.length!==1)throw new Error("delimiter must be exactly one character");let t=e.charCodeAt(0);return n=>n.map(r=>ZV(r,t))}var zS=92,wk=47;function ZV(e,t){if(t===zS)throw new Error("delimiter cannot be backslash");let n=!1;for(let r=0,i=e.length;r<i;++r){switch(e.charCodeAt(r)){case zS:if(!n){n=!0;continue}break;case t:n?(e=e.slice(0,r-1)+e.slice(r),--r,--i):e=e.slice(0,r)+"/"+e.slice(r+1);break;case wk:n?(e=e.slice(0,r)+"\\\\"+e.slice(r),r+=2,i+=2):(e=e.slice(0,r)+"\\"+e.slice(r),++r,++i);break}n=!1}return e}function KV(e){let t=!1;for(let n=0,r=e.length;n<r;++n){switch(e.charCodeAt(n)){case zS:if(!t){t=!0;continue}case wk:t&&(e=e.slice(0,n-1)+e.slice(n),--n,--r);break}t=!1}return e}function vk(e){return hn(e)&&typeof e.node=="function"}function QV(e){return hn(e)&&typeof e.link=="function"}function VS(e){if(vk(e))return e.node;if(e=`${e}`.trim().toLowerCase(),!!e.startsWith("node:")){switch(e){case"node:name":return YS;case"node:path":return jS;case"node:internal":return Sk;case"node:external":return Tk;case"node:depth":return qS;case"node:height":return WS}throw new Error(`invalid node value: ${e}`)}}function bk(e){if(vk(e))return e.node;if(QV(e))return e.link;if(e=`${e}`.trim().toLowerCase(),!(!e.startsWith("node:")&&!e.startsWith("parent:"))){switch(e){case"parent:name":return R1(YS);case"parent:path":return R1(jS);case"parent:depth":return R1(qS);case"parent:height":return R1(WS);case"node:name":return YS;case"node:path":return jS;case"node:internal":return Sk;case"node:external":return Tk;case"node:depth":return qS;case"node:height":return WS}throw new Error(`invalid link value: ${e}`)}}function jS(e){return e.id}function YS(e){return JV(e.id)}function qS(e){return e.depth}function WS(e){return e.height}function Sk(e){return!!e.children}function Tk(e){return!e.children}function R1(e){return(t,n)=>n==null?void 0:e(n)}function JV(e){let t=e.length;for(;--t>0&&!tj(e,t););return KV(e.slice(t+1))}function tj(e,t){if(e[t]==="/"){let n=0;for(;t>0&&e[--t]==="\\";)++n;if((n&1)===0)return!0}return!1}var Ik=2,Ek=3,P1=4;function Mk(e,t){let n=[];for(let r in e){let i=e[r],o=t(i);o!==void 0&&n.push([r,...pn(i),o])}return n}function GS(e,{fill:t,stroke:n,strokeWidth:r,strokeOpacity:i,strokeLinejoin:o,strokeLinecap:s,strokeMiterlimit:a,strokeDasharray:l,strokeDashoffset:c,marker:u,markerStart:d=u,markerEnd:f=u,dot:h=ne(d)&&ne(f),text:p="node:name",textStroke:m="white",title:g="node:path",dx:b,dy:y,textAnchor:x,treeLayout:_=_l,textLayout:v=_===_l||_===Ry?"mirrored":"normal",tip:w,...T}={}){if(b===void 0&&(b=$1(T.treeAnchor).dx),x!==void 0)throw new Error("textAnchor is not a configurable tree option");v=Xe(v,"textLayout",["mirrored","normal"]);function M(F){return $r(e,Cp({treeLayout:_,text:p,fill:t===void 0?"currentColor":t,stroke:m,dx:b,dy:y,title:g,...F,...T}))}return bn(T1(e,U1({treeLayout:_,markerStart:d,markerEnd:f,stroke:n!==void 0?n:t===void 0?"node:internal":t,strokeWidth:r,strokeOpacity:i,strokeLinejoin:o,strokeLinecap:s,strokeMiterlimit:a,strokeDasharray:l,strokeDashoffset:c,...T})),h?Nn(e,Cp({treeLayout:_,fill:t===void 0?"node:internal":t,title:g,tip:w,...T})):null,p!=null?v==="mirrored"?[M({textAnchor:"start",treeFilter:"node:external"}),M({textAnchor:"end",treeFilter:"node:internal",dx:-b})]:M():null)}function Ak(e,t){return GS(e,{...t,treeLayout:Ry})}function Fk({geometry:e=Y,...t}={}){return ye({...t,x:null,y:null},(n,r,i,o,s,{projection:a})=>{let l=st(n,e),c=l.length,u=new Float64Array(c),d=new Float64Array(c),f=Mn(a);for(let h=0;h<c;++h)[u[h],d[h]]=f.centroid(l[h]);return{data:n,facets:r,channels:{x:{value:u,scale:a==null?"x":null,source:null},y:{value:d,scale:a==null?"y":null,source:null}}}})}function kk({geometry:e=Y,...t}={}){let n;return{...t,x:{transform:r=>Float64Array.from(n=st(st(r,e),uw),([i])=>i)},y:{transform:()=>Float64Array.from(n,([,r])=>r)}}}var zk=jp($k(),1);var lj=({marginLeft:e})=>[1,e],cj=({width:e,marginRight:t})=>[-1,e-t],uj=({width:e,marginLeft:t,marginRight:n})=>[0,(t+e-n)/2],fj=({marginTop:e})=>[1,e],dj=({height:e,marginBottom:t})=>[-1,e-t],hj=({height:e,marginTop:t,marginBottom:n})=>[0,(t+e-n)/2];function Vk(e){return typeof e=="string"?{anchor:e}:e}function jk(e={},t={}){arguments.length===1&&([e,t]=qk(e));let{anchor:n="left",padding:r=1,r:i=t.r}=Vk(e);switch(`${n}`.toLowerCase()){case"left":n=lj;break;case"right":n=cj;break;case"middle":n=uj;break;default:throw new Error(`unknown dodge anchor: ${n}`)}return Wk("x","y",n,bt(r),i,t)}function Yk(e={},t={}){arguments.length===1&&([e,t]=qk(e));let{anchor:n="bottom",padding:r=1,r:i=t.r}=Vk(e);switch(`${n}`.toLowerCase()){case"top":n=fj;break;case"bottom":n=dj;break;case"middle":n=hj;break;default:throw new Error(`unknown dodge anchor: ${n}`)}return Wk("y","x",n,bt(r),i,t)}function qk(e){let{anchor:t,padding:n,...r}=e,{r:i}=r;return[{anchor:t,padding:n,r:i},r]}function Wk(e,t,n,r,i,o){if(i!=null&&typeof i!="number"){let{channels:s,sort:a,reverse:l}=o;s=Yh(s),s?.r===void 0&&(o={...o,channels:{...s,r:{value:i,scale:"r"}}}),a===void 0&&l===void 0&&(o.sort={channel:"-r"})}return ye(o,function(s,a,l,c,u,d){let{[t]:f,r:h}=l;if(!l[t])throw new Error(`missing channel: ${t}`);({[t]:f}=wa(l,c,d));let p=h?void 0:i!==void 0?bt(i):this.r!==void 0?this.r:3;h&&(h=st(h.value,c[h.scale]||Y,Float64Array));let[m,g]=n(u),b=m?mj:pj,y=new Float64Array(f.length),x=h?_=>h[_]:()=>p;for(let _ of a){let v=(0,zk.default)();_=_.filter(h?T=>bu(f[T])&&sr(h[T]):T=>bu(f[T]));let w=new Float64Array(2*_.length+2);for(let T of _){let M=x(T),F=m?M+r:0,S=f[T]-M,I=f[T]+M,k=2;v.queryInterval(S-r,I+r,([,,N])=>{let A=y[N]-F,C=f[T]-f[N],L=r+(h?h[T]+h[N]:2*p),U=Math.sqrt(L*L-C*C);w[k++]=A-U,w[k++]=A+U});let O=w.slice(0,k);m&&(O=O.filter(N=>N>=0));t:for(let N of O.sort(b)){for(let A=0;A<k;A+=2)if(w[A]+1e-6<N&&N<w[A+1]-1e-6)continue t;y[T]=N+F;break}v.insert([S,I,T])}}m||(m=1);for(let _ of a)for(let v of _)y[v]=y[v]*m+g;return{data:s,facets:a,channels:{[e]:{value:y,source:null},[t]:{value:f,source:l[t]},...h&&{r:{value:h,source:l.r}}}}})}function pj(e,t){return Math.abs(e)-Math.abs(t)}function mj(e,t){return e-t}function Hk(e,t){return arguments.length===1&&({basis:e,...t}=e),rf(j1(e),t)}function Xk(e,t){return arguments.length===1&&({basis:e,...t}=e),of(j1(e),t)}function j1(e){if(e===void 0)return Gk;if(typeof e=="function")return Y1(Tu(e));if(/^p\d{2}$/i.test(e))return pf(vu(e));switch(`${e}`.toLowerCase()){case"deviation":return bj;case"first":return Gk;case"last":return gj;case"max":return _j;case"mean":return xj;case"median":return wj;case"min":return vj;case"sum":return Sj;case"extent":return yj}throw new Error(`invalid basis: ${e}`)}function Y1(e){return{mapIndex(t,n,r){let i=+e(t,n);for(let o of t)r[o]=n[o]===null?NaN:n[o]/i}}}function pf(e){return Y1((t,n)=>e(t,r=>n[r]))}var yj={mapIndex(e,t,n){let[r,i]=Qt(e,s=>t[s]),o=i-r;for(let s of e)n[s]=t[s]===null?NaN:(t[s]-r)/o}},Gk=Y1((e,t)=>{for(let n=0;n<e.length;++n){let r=t[e[n]];if(Be(r))return r}}),gj=Y1((e,t)=>{for(let n=e.length-1;n>=0;--n){let r=t[e[n]];if(Be(r))return r}}),bj={mapIndex(e,t,n){let r=Zo(e,o=>t[o]),i=Hr(e,o=>t[o]);for(let o of e)n[o]=t[o]===null?NaN:i?(t[o]-r)/i:0}},_j=pf(Jt),xj=pf(Zo),wj=pf(Si),vj=pf(ge),Sj=pf(In);function Zk(e,t={}){if(typeof e=="string")switch(e.toLowerCase()){case"first":return JS(t);case"last":return tT(t)}if(typeof e=="function")return Ca(null,e,t);let n,r;for(n in e){if(r!==void 0)throw new Error("ambiguous selector; multiple inputs");r=Tj(e[n])}if(r===void 0)throw new Error(`invalid selector: ${e}`);return Ca(n,r,t)}function Tj(e){if(typeof e=="function")return e;switch(`${e}`.toLowerCase()){case"min":return eT;case"max":return nT}throw new Error(`unknown selector: ${e}`)}function JS(e){return Ca(null,Ij,e)}function tT(e){return Ca(null,Ej,e)}function Kk(e){return Ca("x",eT,e)}function Qk(e){return Ca("y",eT,e)}function Jk(e){return Ca("x",nT,e)}function tN(e){return Ca("y",nT,e)}function*Ij(e){yield e[0]}function*Ej(e){yield e[e.length-1]}function*eT(e,t){yield E0(e,n=>t[n])}function*nT(e,t){yield rl(e,n=>t[n])}function Ca(e,t,n){if(e!=null){if(n[e]==null)throw new Error(`missing channel: ${e}`);e=n[e]}let r=jn(n);return mn(n,(i,o)=>{let s=st(i,r),a=st(i,e),l=[];for(let c of o){let u=[];for(let d of s?ln(c,f=>s[f]).values():[c])for(let f of t(d,a))u.push(f);l.push(u)}return{data:i,facets:l}})}var e_=jp(iN());var LN=jp(aN());function lN(e){let t=document.createElement("template");return t.innerHTML=e,document.importNode(t.content,!0)}function cN(e){let t=document.createElementNS("http://www.w3.org/2000/svg","g");return t.innerHTML=e,t}var Fs=Object.assign(J1(lN,e=>{if(e.firstChild===null)return null;if(e.firstChild===e.lastChild)return e.removeChild(e.firstChild);let t=document.createElement("span");return t.appendChild(e),t}),{fragment:J1(lN,e=>e)}),V4t=Object.assign(J1(cN,e=>e.firstChild===null?null:e.firstChild===e.lastChild?e.removeChild(e.firstChild):e),{fragment:J1(cN,e=>{let t=document.createDocumentFragment();for(;e.firstChild;)t.appendChild(e.firstChild);return t})}),Nj=9,Oj=10,Cj=12,Bj=13,Dj=32,Lj=65,Rj=90,Pj=97,Uj=122,W1=60,fr=62,Ba=47,Mo=45,iT=33,oT=61,uN=34,fN=39,$j=63,On=1,dN=2,hN=3,sT=4,G1=5,Da=6,aT=7,H1=8,X1=9,lT=10,cT=11,Z1=12,uT=13,Lp=14,pN=15,mN=16,As=17,yN=18,gN=19,bN=20,_N=21,fT=22,Rp=23,xN=24,wN=25,Ao=26,vN=27,SN=28,TN=29,zj=128,IN=1,Vj=8,jj=1,kN="http://www.w3.org/2000/svg",Jl="http://www.w3.org/1999/xlink",EN="http://www.w3.org/XML/1998/namespace",MN="http://www.w3.org/2000/xmlns/",NN=new Map(["attributeName","attributeType","baseFrequency","baseProfile","calcMode","clipPathUnits","diffuseConstant","edgeMode","filterUnits","glyphRef","gradientTransform","gradientUnits","kernelMatrix","kernelUnitLength","keyPoints","keySplines","keyTimes","lengthAdjust","limitingConeAngle","markerHeight","markerUnits","markerWidth","maskContentUnits","maskUnits","numOctaves","pathLength","patternContentUnits","patternTransform","patternUnits","pointsAtX","pointsAtY","pointsAtZ","preserveAlpha","preserveAspectRatio","primitiveUnits","refX","refY","repeatCount","repeatDur","requiredExtensions","requiredFeatures","specularConstant","specularExponent","spreadMethod","startOffset","stdDeviation","stitchTiles","surfaceScale","systemLanguage","tableValues","targetX","targetY","textLength","viewBox","viewTarget","xChannelSelector","yChannelSelector","zoomAndPan"].map(e=>[e.toLowerCase(),e])),Q1=new Map([["xlink:actuate",Jl],["xlink:arcrole",Jl],["xlink:href",Jl],["xlink:role",Jl],["xlink:show",Jl],["xlink:title",Jl],["xlink:type",Jl],["xml:lang",EN],["xml:space",EN],["xmlns",MN],["xmlns:xlink",MN]]);function J1(e,t){return function({raw:n}){let r=On,i="",o,s,a,l,c=0;for(let h=0,p=arguments.length;h<p;++h){let m=n[h];if(h>0){let g=arguments[h];switch(r){case Ao:{if(g!=null){let b=`${g}`;if(ON(s))i+=b.replace(/[<]/g,yf);else{if(new RegExp(`</${s}[\\s>/]`,"i").test(i.slice(-s.length-2)+b))throw new Error("unsafe raw text");i+=b}}break}case On:{g==null||(g instanceof Node||typeof g!="string"&&g[Symbol.iterator]||/(?:^|>)$/.test(n[h-1])&&/^(?:<|$)/.test(m)?(i+="<!--::"+h+"-->",c|=zj):i+=`${g}`.replace(/[<&]/g,yf));break}case X1:{r=Z1;let b;if(/^[\s>]/.test(m)){if(g==null||g===!1){i=i.slice(0,a-n[h-1].length);break}if(g===!0||(b=`${g}`)==""){i+="''";break}if(n[h-1].slice(a,l)==="style"&&dT(g)||typeof g=="function"){i+="::"+h,c|=IN;break}}if(b===void 0&&(b=`${g}`),b==="")throw new Error("unsafe unquoted empty string");i+=b.replace(/^['"]|[\s>&]/g,yf);break}case Z1:{i+=`${g}`.replace(/[\s>&]/g,yf);break}case cT:{i+=`${g}`.replace(/['&]/g,yf);break}case lT:{i+=`${g}`.replace(/["&]/g,yf);break}case Da:{if(dT(g)){i+="::"+h+"=''",c|=IN;break}throw new Error("invalid binding")}case As:break;default:throw new Error("invalid binding")}}for(let g=0,b=m.length;g<b;++g){let y=m.charCodeAt(g);switch(r){case On:{y===W1&&(r=dN);break}case dN:{y===iT?r=wN:y===Ba?r=hN:K1(y)?(o=g,s=void 0,r=sT,--g):y===$j?(r=G1,--g):(r=On,--g);break}case hN:{K1(y)?(r=sT,--g):y===fr?r=On:(r=G1,--g);break}case sT:{La(y)?(r=Da,s=Up(m,o,g)):y===Ba?r=Lp:y===fr&&(s=Up(m,o,g),r=Pp(s)?Ao:On);break}case Da:{La(y)||(y===Ba||y===fr?(r=aT,--g):y===oT?(r=H1,a=g+1,l=void 0):(r=H1,--g,a=g+1,l=void 0));break}case H1:{La(y)||y===Ba||y===fr?(r=aT,--g,l=g):y===oT&&(r=X1,l=g);break}case aT:{La(y)||(y===Ba?r=Lp:y===oT?r=X1:y===fr?r=Pp(s)?Ao:On:(r=H1,--g,a=g+1,l=void 0));break}case X1:{La(y)||(y===uN?r=lT:y===fN?r=cT:y===fr?r=Pp(s)?Ao:On:(r=Z1,--g));break}case lT:{y===uN&&(r=uT);break}case cT:{y===fN&&(r=uT);break}case Z1:{La(y)?r=Da:y===fr&&(r=Pp(s)?Ao:On);break}case uT:{La(y)?r=Da:y===Ba?r=Lp:y===fr?r=Pp(s)?Ao:On:(r=Da,--g);break}case Lp:{y===fr?r=On:(r=Da,--g);break}case G1:{y===fr&&(r=On);break}case pN:{y===Mo?r=mN:y===fr?r=On:(r=As,--g);break}case mN:{y===Mo?r=Rp:y===fr?r=On:(r=As,--g);break}case As:{y===W1?r=yN:y===Mo&&(r=fT);break}case yN:{y===iT?r=gN:y!==W1&&(r=As,--g);break}case gN:{y===Mo?r=bN:(r=As,--g);break}case bN:{y===Mo?r=_N:(r=Rp,--g);break}case _N:{r=Rp,--g;break}case fT:{y===Mo?r=Rp:(r=As,--g);break}case Rp:{y===fr?r=On:y===iT?r=xN:y!==Mo&&(r=As,--g);break}case xN:{y===Mo?r=fT:y===fr?r=On:(r=As,--g);break}case wN:{y===Mo&&m.charCodeAt(g+1)===Mo?(r=pN,++g):(r=G1,--g);break}case Ao:{y===W1&&(r=vN);break}case vN:{y===Ba?r=SN:(r=Ao,--g);break}case SN:{K1(y)?(o=g,r=TN,--g):(r=Ao,--g);break}case TN:{La(y)&&s===Up(m,o,g)?r=Da:y===Ba&&s===Up(m,o,g)?r=Lp:y===fr&&s===Up(m,o,g)?r=On:K1(y)||(r=Ao,--g);break}default:{r=void 0;break}}}i+=m}let u=e(i),d=document.createTreeWalker(u,c,null,!1),f=[];for(;d.nextNode();){let h=d.currentNode;switch(h.nodeType){case jj:{let p=h.attributes;for(let m=0,g=p.length;m<g;++m){let{name:b,value:y}=p[m];if(/^::/.test(b)){let x=arguments[+b.slice(2)];AN(h,b),--m,--g;for(let _ in x){let v=x[_];v==null||v===!1||(typeof v=="function"?h[_]=v:_==="style"&&dT(v)?FN(h[_],v):Yj(h,_,v===!0?"":v))}}else if(/^::/.test(y)){let x=arguments[+y.slice(2)];AN(h,b),--m,--g,typeof x=="function"?h[b]=x:FN(h[b],x)}}break}case Vj:{if(/^::/.test(h.data)){let p=h.parentNode,m=arguments[+h.data.slice(2)];if(m instanceof Node)p.insertBefore(m,h);else if(typeof m!="string"&&m[Symbol.iterator])if(m instanceof NodeList||m instanceof HTMLCollection)for(let g=m.length-1,b=h;g>=0;--g)b=p.insertBefore(m[g],b);else for(let g of m)g!=null&&p.insertBefore(g instanceof Node?g:document.createTextNode(g),h);else p.insertBefore(document.createTextNode(m),h);f.push(h)}break}}}for(let h of f)h.parentNode.removeChild(h);return t(u)}}function yf(e){return`&#${e.charCodeAt(0).toString()};`}function K1(e){return Lj<=e&&e<=Rj||Pj<=e&&e<=Uj}function La(e){return e===Nj||e===Oj||e===Cj||e===Dj||e===Bj}function dT(e){return e&&e.toString===Object.prototype.toString}function Pp(e){return e==="script"||e==="style"||ON(e)}function ON(e){return e==="textarea"||e==="title"}function Up(e,t,n){return e.slice(t,n).toLowerCase()}function Yj(e,t,n){if(e.namespaceURI===kN&&(t=t.toLowerCase(),t=NN.get(t)||t,Q1.has(t))){e.setAttributeNS(Q1.get(t),t,n);return}e.setAttribute(t,n)}function AN(e,t){if(e.namespaceURI===kN&&(t=t.toLowerCase(),t=NN.get(t)||t,Q1.has(t))){e.removeAttributeNS(Q1.get(t),t);return}e.removeAttribute(t)}function FN(e,t){for(let n in t){let r=t[n];n.startsWith("--")?e.setProperty(n,r):e[n]=r}}function CN(e){class t extends e.Mark{constructor(r,i){super(r,[{name:"x",value:i.x,scale:"x",optional:!0},{name:"y",value:i.y,scale:"y",optional:!0},{name:"z",value:i.z,optional:!0},{name:"content",value:i.label}],i),this.data=r,this.x=i.x,this.y=i.y,this.label=i.label,this.padding=i.padding,this.minCellSize=i.minCellSize}render(r,i,o,s){let a=this.calcVoronoi(this.data,i,s.width,s.height);a=a.filter(([u,d,f])=>d);let l={top:u=>u.attr("text-anchor","middle").attr("y",-this.padding),right:u=>u.attr("text-anchor","start").attr("dy","0.35em").attr("x",this.padding),bottom:u=>u.attr("text-anchor","middle").attr("dy","0.71em").attr("y",this.padding),left:u=>u.attr("text-anchor","end").attr("dy","0.35em").attr("x",-this.padding)},c=Ix("svg:g");return Ce(c.node()).style("font","10px sans-serif").selectAll("text").data(a).join("text").each(function([[u,d],f,h]){let[p,m]=av(f),g=(Math.round(Math.atan2(m-d,p-u)/Math.PI*2)+4)%4;Ce(this).call(g===0?l.right:g===3?l.top:g===1?l.bottom:l.left)}).attr("transform",([u])=>`translate(${u})`).attr("display",([,u])=>-sv(u)>this.minCellSize?null:"none").text((u,d)=>u[2][this.label]),c.node()}calcVoronoi(r,i,o,s){let l=Un.from(r,u=>i.x(u[this.x]),u=>i.y(u[this.y])).voronoi([-1,-1,o+1,s+1]);return r.map((u,d)=>[[i.x(u[this.x]),i.y(u[this.y])],l.cellPolygon(d),u])}}return function(r,i){return new t(r,i)}}var t_=new Map([["ATL",{name:"Atlanta Hawks",colors:["#C8102E","#FDB927","#000000","#9EA2A2"]}],["BOS",{name:"Boston Celtics",colors:["#008348","#BB9753","#000000","#A73832","#FFFFFF"]}],["BKN",{name:"Brooklyn Nets",colors:["#000000","#FFFFFF","#707271"]}],["CHA",{name:"Charlotte Bobcats",colors:["#f26532","#2f598c","#959da0"]}],["CHI",{name:"Chicago Bulls",colors:["#CE1141","#000000"]}],["CHO",{name:"Charlotte Hornets",colors:["#00788C","#1D1160","#A1A1A4","#FFFFFF"]}],["CLE",{name:"Cleveland Cavaliers",colors:["#6F263D","#FFB81C","#041E42","#000000"]}],["DAL",{name:"Dallas Mavericks",colors:["#0064B1","#00285E","#BBC4CA","#000000"]}],["DEN",{name:"Denver Nuggets",colors:["#0E2240","#8B2131","#FEC524","#244289"]}],["DET",{name:"Detroit Pistons",colors:["#1D428A","#C8102E","#BEC0C2","#000000","#FFFFFF"]}],["GSW",{name:"Golden State Warriors",colors:["#1D428A","#FDB927"]}],["HOU",{name:"Houston Rockets",colors:["#CE1141","#9EA2A2","#000000","#373A36","#FFFFFF"]}],["IND",{name:"Indiana Pacers",colors:["#BEC0C2","#FDBB30","#002D62"]}],["LAC",{name:"Los Angeles Clippers",colors:["#C8102E","#1D428A","#000000","#BEC0C2","#FFFFFF"]}],["LAL",{name:"Los Angeles Lakers",colors:["#552583","#FDB927","#000000"]}],["MEM",{name:"Memphis Grizzlies",colors:["#5D76A9","#12173F","#707271","#F5B112"]}],["MIA",{name:"Miami Heat",colors:["#000000","#98002E","#F9A01B"]}],["MIL",{name:"Milwaukee Bucks",colors:["#00471B","#EEE1C6","#0077C0","#000000","#FFFFFF"]}],["MIN",{name:"Minnesota Timberwolves",colors:["#0C2340","#78BE20","#236192","#9EA2A2","#FFFFFF"]}],["NJN",{name:"New Jersey Nets",colors:["#000000","#FFFFFF","#707271"]}],["NOH",{name:"New Orleans Hornets",colors:["#00788C","#1D1160","#A1A1A4","#FFFFFF"]}],["NOP",{name:"New Orleans Pelicans",colors:["#0A2240","#8C734B","#CE0E2D"]}],["NYK",{name:"New York Knicks",colors:["#006BB6","#F58426","#BEC0C2","#000000","#FFFFFF"]}],["OKC",{name:"Oklahoma City Thunder",colors:["#007AC1","#EF3B24","#FDBB30","#002D62"]}],["ORL",{name:"Orlando Magic",colors:["#0077C0","#000000","#C4CED4"]}],["PHI",{name:"Philadelphia 76ers",colors:["#006BB6","#C4CED4","#ED174C","#000000","#002B5C","#FFFFFF"]}],["PHX",{name:"Phoenix Suns",colors:["#1D1160","#E56020","#000000","#63727A","#F9A01B"]}],["POR",{name:"Portland Trailblazers",colors:["#E03A3E","#FFFFFF","#000000"]}],["SAC",{name:"Sacramento Kings",colors:["#5A2B81","#63727A","#000000"]}],["SAS",{name:"San Antonio Spurs",colors:["#000000","#C4CED4"]}],["TOR",{name:"Toronto Raptors",colors:["#CE1141","#000000","#393A96","#B4975A","#FFFFFF"]}],["TOT",{name:"Season Total",comment:"bbref uses TOT to indicate a player's season total if they were on more than one team",colors:["#888888","#888888"]}],["UTA",{name:"Utah Jazz",colors:["#F9A01B","#00471B","#002B5C"]}],["WAS",{name:"Washington Wizards",colors:["#002B5C","#E31837","#C4CED4","#FFFFFF"]}]]);var Je={player_name:{name:"player_name",type:0},team_abbreviation:{name:"team abbreviation",type:0},age:{name:"age",type:2},gp:{name:"games played",type:1},w:{name:"wins",type:1},l:{name:"losses",type:1},w_pct:{name:"win percentage",type:2},min:{name:"minutes played",type:2},fgm:{name:"field goals made",type:1},fga:{name:"field goals attempted",type:1},fg_pct:{name:"field goal percentage",type:2},fg2_pct:{name:"2 point fg percentage",type:2},fg2a_frequency:{name:"% of shots that were 2 point fga",type:2},fg2a:{name:"2 point fg attempts",type:1},fg2m:{name:"2 point fg made",type:1},fg3a:{name:"3 point fg attempts",type:1},fg3a_frequency:{name:"% of shots that were 3 point fga",type:2},fg3m:{name:"3 point fg made",type:1},fg3_pct:{name:"3 point fg percentage",type:2},ftm:{name:"free throws made",type:1},fta:{name:"free throws attempted",type:1},ft_pct:{name:"free throw percentage",type:2},oreb:{name:"offensive rebounds",type:1},dreb:{name:"defensive rebounds",type:1},reb:{name:"rebounds",type:1},ast:{name:"assists",type:1},tov:{name:"turnovers",type:1},stl:{name:"steals",type:1},blk:{name:"blocks",type:1},blka:{name:"blocks against",type:1},pf:{name:"personal fouls",type:1},pfd:{name:"personal fouls drawn",type:1},pts:{name:"points",type:1},plus_minus:{name:"plus/minus",type:1},nba_fantasy_pts:{name:"NBA fantasy points",type:2},dd2:{name:"double doubles",type:1},td3:{name:"triple doubles",type:1},year:{name:"year",type:3},min_pergame:{name:"min_pergame",type:2},fgm_pergame:{name:"fgm_pergame",type:2},fga_pergame:{name:"fga_pergame",type:2},fg3m_pergame:{name:"fg3m_pergame",type:2},fg3a_pergame:{name:"fg3a_pergame",type:2},ftm_pergame:{name:"ftm_pergame",type:2},fta_pergame:{name:"fta_pergame",type:2},oreb_pergame:{name:"oreb_pergame",type:2},dreb_pergame:{name:"dreb_pergame",type:2},reb_pergame:{name:"reb_pergame",type:2},ast_pergame:{name:"ast_pergame",type:2},tov_pergame:{name:"tov_pergame",type:2},stl_pergame:{name:"stl_pergame",type:2},blk_pergame:{name:"blk_pergame",type:2},blka_pergame:{name:"blka_pergame",type:2},pf_pergame:{name:"pf_pergame",type:2},pfd_pergame:{name:"pfd_pergame",type:2},pts_pergame:{name:"pts_pergame",type:2},plus_minus_pergame:{name:"plus_minus_pergame",type:2},nba_fantasy_pts_pergame:{name:"nba_fantasy_pts_pergame",type:2},min_per36:{name:"min_per36",type:2},fgm_per36:{name:"fgm_per36",type:2},fga_per36:{name:"fga_per36",type:2},fg3m_per36:{name:"fg3m_per36",type:2},fg3a_per36:{name:"fg3a_per36",type:2},ftm_per36:{name:"ftm_per36",type:2},fta_per36:{name:"fta_per36",type:2},oreb_per36:{name:"oreb_per36",type:2},dreb_per36:{name:"dreb_per36",type:2},reb_per36:{name:"reb_per36",type:2},ast_per36:{name:"ast_per36",type:2},tov_per36:{name:"tov_per36",type:2},stl_per36:{name:"stl_per36",type:2},blk_per36:{name:"blk_per36",type:2},blka_per36:{name:"blka_per36",type:2},pf_per36:{name:"pf_per36",type:2},pfd_per36:{name:"pfd_per36",type:2},pts_per36:{name:"pts_per36",type:2},plus_minus_per36:{name:"plus_minus_per36",type:2},nba_fantasy_pts_per36:{name:"nba_fantasy_pts_per36",type:2},min_per100possessions:{name:"min_per100possessions",type:2},fgm_per100possessions:{name:"fgm_per100possessions",type:2},fga_per100possessions:{name:"fga_per100possessions",type:2},fg3m_per100possessions:{name:"fg3m_per100possessions",type:2},fg3a_per100possessions:{name:"fg3a_per100possessions",type:2},ftm_per100possessions:{name:"ftm_per100possessions",type:2},fta_per100possessions:{name:"fta_per100possessions",type:2},oreb_per100possessions:{name:"oreb_per100possessions",type:2},dreb_per100possessions:{name:"dreb_per100possessions",type:2},reb_per100possessions:{name:"reb_per100possessions",type:2},ast_per100possessions:{name:"ast_per100possessions",type:2},tov_per100possessions:{name:"tov_per100possessions",type:2},stl_per100possessions:{name:"stl_per100possessions",type:2},blk_per100possessions:{name:"blk_per100possessions",type:2},blka_per100possessions:{name:"blka_per100possessions",type:2},pf_per100possessions:{name:"pf_per100possessions",type:2},pfd_per100possessions:{name:"pfd_per100possessions",type:2},pts_per100possessions:{name:"pts_per100possessions",type:2},plus_minus_per100possessions:{name:"plus_minus_per100possessions",type:2},nba_fantasy_pts_per100possessions:{name:"nba_fantasy_pts_per100possessions",type:2},off_rating:{name:"offensive rating",type:2},def_rating:{name:"defensive rating",type:2},net_rating:{name:"net rating",type:2},ast_pct:{name:"assist percentage",type:2},ast_to:{name:"assists to turnovers",type:2},ast_ratio:{name:"assist ration",type:2},oreb_pct:{name:"offensive rebound percentage",type:2},dreb_pct:{name:"defensive rebound percentage",type:2},reb_pct:{name:"rebound percentage",type:2},tm_tov_pct:{name:"team turnover percentage",type:2},efg_pct:{name:"effective field goal percentage",type:2},ts_pct:{name:"true shooting percentage",type:2},usg_pct:{name:"usage percentage",type:2},pace:{name:"pace",type:2},pie:{name:"pie",type:2},poss:{name:"poss",type:1},fgm_pg:{name:"fgm_pg",type:2},fga_pg:{name:"fga_pg",type:2},def_ws:{name:"Defensive Win Shares",type:2},def_ws_pergame:{name:"Defensive Win Shares per game",type:2},def_ws_per36:{name:"Defensive Win Shares per 36",type:2},def_ws_per100possessions:{name:"Defensive Win Shares per 100 posessions",type:2},zzconst8:{name:"Constant: 8",type:4,value:8},zzconst4:{name:"Constant: 4",type:4,value:4}};var ks=e=>document.querySelector(e),hT=e=>document.querySelectorAll(e),qj=CN(rT),RN="https://llimllib.github.io/nba_data";function Wj(e){return e.replace(/[^a-z0-9]/gi,"_").toLowerCase()}function Gj(e,t){let n=[];e.useLabels&&(n=[...n,qj(e.data,{x:t.xfield,y:t.yfield,label:"player_name",padding:10,minCellSize:3e3})]);let r=Je[t.rField].type==4?()=>Je[t.rField??""].value:i=>i[t.rField];return e.useTeamColors?n=[...n,Nn(e.data,{x:t.xfield,y:t.yfield,r,fill:i=>(t_.get(i.team_abbreviation)||console.log("missing:",i),t_.get(i.team_abbreviation)?.colors[0]),fillOpacity:e.opacity/100}),Nn(e.data,{x:t.xfield,y:t.yfield,r:i=>r(i)/2,fill:i=>t_.get(i.team_abbreviation)?.colors[1],fillOpacity:e.opacity/100})]:e.useCustomColor?n.push(Nn(e.data,{x:t.xfield,y:t.yfield,r,fill:e.customColor,fillOpacity:e.opacity/100})):n.push(Nn(e.data,{x:t.xfield,y:t.yfield,r,fill:"#888888",fillOpacity:e.opacity/100})),n}async function PN(e){let t=e.serieses.map(f=>Gj(f,e)).flat();e.title!=""&&t.push($r([e.title],{frameAnchor:"top",fontSize:25,fontVariant:"bold",fontFamily:"serif",dy:10-e.marginTop})),e.subtitle!=""&&t.push($r([e.subtitle],{frameAnchor:"top",fontSize:15,fontFamily:"serif",dy:35-e.marginTop})),console.log("making chart with options:",e);let n=Array.from(new Set(e.serieses.reduce((f,h)=>[...f,...h.data],[])));n.forEach(f=>{let h=e.xLabel==""?e.xfield:e.xLabel,p=e.yLabel==""?e.yfield:e.yLabel;f.tooltip=`${f.player_name}
${f.team_abbreviation}
${h}: ${f[e.xfield]}
${p}: ${f[e.yfield]}`});let r=Je[e.rField].type==4,i=r?[Je[e.rField].value/2,Je[e.rField].value]:Qt(n,f=>f[e.rField]);i[0]=(i[0]??0)/2;let o=r?[Je[e.rField].value/2,Je[e.rField].value]:[e.rMin,e.rMax];t.push(Yu(n,Sa({x:e.xfield,y:e.yfield,title:f=>f.tooltip})));let s=up({width:e.width,height:e.height,marginTop:e.marginTop,marginRight:e.marginRight,marginBottom:e.marginBottom,marginLeft:e.marginLeft,grid:!0,style:{background:"#fff9eb"},x:{inset:e.xPadding,label:e.xLabel.length>0?e.xLabel:e.xfield,labelOffset:e.xLabelOffset,labelAnchor:e.xLabelAnchor,nice:!0,ticks:e.xTicks,tickFormat:e.xfieldType==3?"c":void 0,zero:e.xIncludeZero},y:{inset:e.yPadding,label:e.yLabel.length>0?e.yLabel:e.yfield,labelOffset:e.yLabelOffset,labelAnchor:e.yLabelAnchor,nice:!0,ticks:e.yTicks,tickFormat:e.yfieldType==3?"c":void 0,zero:e.yIncludeZero},r:{domain:i,range:o},marks:[...t]}),a=Ce(s);if(a.attr("overflow","visible"),!r){let f=a.append("g").attr("class","rLabel");f.append("circle").attr("cx",25).attr("cy",27).attr("r",4).style("fill","black"),f.append("text").attr("x",32).attr("y",30).attr("text-anchor","start").text(e.rLabel==""?e.rField:e.rLabel)}let l=JSON.stringify(e,(f,h)=>f=="data"?void 0:h),c=new URL(window.location.toString()),u=`${c.origin}${c.pathname}?options=${encodeURIComponent((0,e_.base64encode)(l))}`;window.history.replaceState(null,"",u);let d=ks("#plot");d.innerHTML="",Ce(s).classed("plot",!0),d.append(s)}function Hj(){let e=Cn("#title");(0,LN.default)("svg.plot",e.length>0?Wj(e):"plot",{scale:1,quality:.92,download:!0})}async function Xj(){let t=await F3({mvp:{mainModule:"duckdb-mvp.wasm",mainWorker:"duckdb/duckdb-browser-mvp.worker.js"},eh:{mainModule:"duckdb-eh.wasm",mainWorker:"duckdb/duckdb-browser-eh.worker.js"}});if(!t.mainWorker)throw new Error("should never happen: bundle.mainWorker missing");let n=new Worker(t.mainWorker),r=new E3,i=new A3(r,n);await i.instantiate(t.mainModule,t.pthreadWorker);let o=await i.connect();return await o.query(`
      CREATE TABLE players AS
          SELECT * FROM "${RN}/playerstats.parquet"
  `),o}async function Zj(e,t){return(await e.query(t)).toArray().map(r=>r.toJSON())}async function Kj(e){let t=JSON.parse((0,e_.base64decode)(decodeURIComponent(new URL(window.location.toString()).searchParams.get("options"))));Bt("#width",t.width),Bt("#height",t.height),Bt("#xField",t.xfield),Bt("#yField",t.yfield),Bt("#title",t.title),Bt("#subtitle",t.subtitle),Bt("#width",t.width),Bt("#height",t.height),Bt("#marginTop",t.marginTop),Bt("#marginRight",t.marginRight),Bt("#marginBottom",t.marginBottom),Bt("#marginLeft",t.marginLeft),Bt("#xIncludeZero",t.xIncludeZero),Bt("#xTicks",t.xTicks),Bt("#xLabelOffset",t.xLabelOffset),Bt("#xPadding",t.xPadding),Bt("#xLabelAnchor",t.xLabelAnchor),Bt("#xLabel",t.xLabel),Bt("#yIncludeZero",t.yIncludeZero),Bt("#yTicks",t.yTicks),Bt("#yLabelOffset",t.yLabelOffset),Bt("#yPadding",t.yPadding),Bt("#yLabelAnchor",t.yLabelAnchor),Bt("#yLabel",t.yLabel),Bt("#rField",t.rField),Bt("#rMin",t.rMin),Bt("#rMax",t.rMax),Bt("#rLabel",t.rLabel),t.serieses.forEach(async(n,r)=>{let i=r+1;document.querySelector(`#series${i}`)?(Bt(`#series${r+1} .year`,n.year),Bt(`#series${r+1} .useTeamColors`,n.useTeamColors),Bt(`#series${r+1} .useLabels`,n.useLabels),Bt(`#series${r+1} .opacity`,n.opacity),Bt(`#series${r+1} .filter`,n.filter)):(new MutationObserver(async(s,a)=>{if(document.getElementById(`series${i}`)){Bt(`#series${r+1} .year`,n.year),Bt(`#series${r+1} .useTeamColors`,n.useTeamColors),Bt(`#series${r+1} .useLabels`,n.useLabels),Bt(`#series${r+1} .opacity`,n.opacity),Bt(`#series${r+1} .filter`,n.filter),a.disconnect();return}}).observe(document,{childList:!0,subtree:!0}),await pT(e))}),t.serieses=await UN(e),await PN(t)}async function BN(e){let t=Cn("#xField"),n=Cn("#yField");await PN({xfield:t,xfieldType:Je[t].type,yfield:Cn("#yField"),yfieldType:Je[n].type,title:Cn("#title"),subtitle:Cn("#subtitle"),width:dr("#width"),height:dr("#height"),marginTop:dr("#marginTop"),marginRight:dr("#marginRight"),marginBottom:dr("#marginBottom"),marginLeft:dr("#marginLeft"),xIncludeZero:$p("#xIncludeZero"),xTicks:dr("#xTicks"),xLabelOffset:dr("#xLabelOffset"),xPadding:dr("#xPadding"),xLabelAnchor:Cn("#xLabelAnchor"),xLabel:Cn("#xLabel"),yIncludeZero:$p("#yIncludeZero"),yTicks:dr("#yTicks"),yLabelOffset:dr("#yLabelOffset"),yPadding:dr("#yPadding"),yLabelAnchor:Cn("#yLabelAnchor"),yLabel:Cn("#yLabel"),rField:Cn("#rField"),rMin:dr("#rMin"),rMax:dr("#rMax"),rLabel:Cn("#rLabel"),serieses:await UN(e)})}var DN=!0;function gf(e){return async()=>{if(DN&&new URL(window.location.toString()).searchParams.get("options"))try{await Kj(e)}catch(t){console.error(t),await BN(e)}else BN(e);DN=!1}}async function pT(e){let t=Array.from(document.querySelectorAll(".series")).length+1;ks(".remove-series").disabled=t==1;let n=Fs`<div class="series" id="series${t}">
      <div class="controlrow">
        Year: <select class="year" id="year${t}">
          <option value="2024" selected>2024</option>
          <option value="2023">2023</option>
          <option value="2022">2022</option>
          <option value="2021">2021</option>
          <option value="2020">2020</option>
          <option value="2019">2019</option>
          <option value="2018">2018</option>
          <option value="2017">2017</option>
          <option value="2016">2016</option>
          <option value="2015">2015</option>
          <option value="2014">2014</option>
          <option value="2013">2013</option>
          <option value="2012">2012</option>
          <option value="2011">2011</option>
          <option value="2010">2010</option>
          <option value="any">any</option>
          </select>
      </div>
      <div class="controlrow">
        <label for="useTeamColors${t}">Use Team Colors</label>
          <input type="checkbox" id="useTeamColors${t}" class="useTeamColors" checked></input>
        <label for="useLabels${t}">Use labels</label>
          <input type="checkbox" id="useLabels${t}" class="useLabels" checked></input>
        <label for="opacity${t}">Opacity</label>
          <input type="number" id="opacity${t}" class="opacity number2" value="100"></input>
      </div>
      <div class="controlrow">
        <label for="customColor${t}">Custom color</label>
          <input type="checkbox" id="customColor${t}" class="customColor"></input>
        <label for="color${t}">choose color:</label>
          <input type="color" id="color${t}" class="color" value="#000000" />
        <br />
      </div>
      <div class="controlrow">
        <label for="filter${t}">filter:</label>
          <input id="filter${t}" class="filter" value="quantile(fga) > 66"></input>
        <br />
      </div>
      <div class="controlrow">
        <button class="moveSeriesUp" id="moveSeriesUp${t}" disabled>↑</button>
        <button class="moveSeriesDown" id="moveSeriesDown${t}" disabled>↓</button>
      </div>
    </div>`;new MutationObserver(async(i,o)=>{let s=document.getElementById(`series${t}`);if(s){gf(e)(),[".year",".useTeamColors",".useLabels",".opacity",".customColor",".color",".filter"].forEach(c=>s.querySelector(c)?.addEventListener("change",gf(e))),s.querySelector(".moveSeriesUp")?.addEventListener("click",Qj),s.querySelector(".moveSeriesDown")?.addEventListener("click",Jj);let a=Array.from(document.querySelectorAll(".series")).length;hT(".moveSeriesUp").forEach(c=>c.disabled=a==1),hT(".moveSeriesDown").forEach(c=>c.disabled=a==1),ks(".moveSeriesUp").disabled=!0;let l=Array.from(hT(".moveSeriesDown"));l[l.length-1].disabled=!0,o.disconnect();return}}).observe(document,{childList:!0,subtree:!0}),ks(".serieses")?.appendChild(n)}function Qj(e){let t=e.target;if(!t.parentElement)throw new Error("unable to find parent element");let n=t.parentElement,r=n?.previousSibling,i=n?.parentElement;i?.removeChild(n),i?.insertBefore(n,r)}function Jj(e){let t=e.target;if(!t.parentElement)throw new Error("unable to find parent element");let n=t?.parentElement,r=n?.nextSibling;n?.parentElement?.removeChild(n),r?.after(n)}async function tY(e){let t=Array.from(document.querySelectorAll(".series"));t.length!=1&&(ks(".remove-series").disabled=t.length==2,t[t.length-1].remove(),gf(e)())}var eY=/quantile\((\w+)\)/;function nY(e){let t=[],n=null;for(;(n=eY.exec(e))!==null;){let[r,i]=n;e=e.replace(r,`_${i}_ntile`),t.push(i)}return[e,t]}function rY(e,t){let[n,r]=nY(e);return t!="any"?r.length>0?`
          WITH player_stats AS (
            select *, ${r.map(o=>`ntile(100) OVER (ORDER BY ${o}) AS _${o}_ntile`).join(", ")}
            FROM players
            WHERE year='${t}'
          )
          SELECT *
          FROM player_stats
          WHERE year=${t} and ${n}`:`
        SELECT *
        FROM players
        WHERE year=${t} and ${e}`:r.length>0?`
          WITH player_stats AS (
            select *, ${r.map(o=>`ntile(100) OVER (ORDER BY ${o}) AS _${o}_ntile`).join(", ")}
            FROM players
            WHERE year='${t}'
          )
          SELECT *
          FROM player_stats
          WHERE ${n}`:`
        SELECT *
        FROM players
        WHERE ${e}`}function $p(e,t=document.body){return!!t.querySelector(e).checked}function Cn(e,t=document.body){return t.querySelector(e).value}function Bt(e,t){try{typeof t=="boolean"?document.querySelector(e).checked=t:typeof t=="number"?document.querySelector(e).value=t.toString():document.querySelector(e).value=t}catch(n){console.error(`Failed setting selector ${e} to value ${t}:
${n}`)}}function dr(e,t=document.body){return t.querySelector(e).valueAsNumber}async function UN(e){return await Promise.all(Array.from(document.querySelectorAll(".series")).map(async(t,n)=>{let r=n+1,i=Cn(`#year${r}`,t),o=$p(`#useTeamColors${r}`,t),s=$p(`#useLabels${r}`,t),a=dr(`#opacity${r}`,t),l=$p(`#customColor${r}`,t),c=Cn(`#color${r}`,t),u=Cn(`#filter${r}`,t),d=await Zj(e,rY(u,i));return{year:i,useTeamColors:o,useLabels:s,opacity:a,useCustomColor:l,customColor:c,filter:u,data:d}}))}function iY(e){let t="ts_pct",n=Object.keys(Je).sort().map(l=>l==t?Fs.fragment`<option value="${l}" selected>${Je[l].name}</option>`:Fs.fragment`<option value="${l}">${Je[l].name}</option>`),r="usg_pct",i=Object.keys(Je).sort().map(l=>l==r?Fs.fragment`<option value="${l}" selected>${Je[l].name}</option>`:Fs.fragment`<option value="${l}">${Je[l].name}</option>`),o="zzconst8",s=Object.keys(Je).sort().map(l=>l==o?Fs.fragment`<option value="${l}" selected>${Je[l].name}</option>`:Fs.fragment`<option value="${l}">${Je[l].name}</option>`),a=Fs`<div>
    <div class="controlrow">
      <button id="swapAxes">🔄 swap x and y</button>
      <button id="clearOptions">🧹 clear options</button>
      <button id="download">⬇️ download</button>
    </div>

    <div class="controlgroup">
      <h3>Graph Options</h3>
      <div class="controlrow">
        Width:
        <input type="number" class="number2" id="width" value="800" />
        Height:
        <input type="number" class="number2" id="height" value="800" />
      </div>
      <div class="controlrow">Title: <input type="text" id="title" /></div>
      <div class="controlrow">
        Subtitle: <input type="text" id="subtitle" />
      </div>
      <div class="controlrow">
        margin top:
        <input type="number" class="margin number" id="marginTop" value="40" />
        right:
        <input
          type="number"
          class="margin number"
          id="marginRight"
          value="50"
        />
        bottom:
        <input
          type="number"
          class="margin number"
          id="marginBottom"
          value="40"
        />
        left:
        <input type="number" class="margin number" id="marginLeft" value="60" />
      </div>
    </div>

    <div class="controlgroup">
      <h3>X axis</h3>
      <div class="controlrow">
        <select id="xField">
          ${n}
        </select>
      </div>
      <div class="controlrow">
        ticks:
        <input type="number" class="axis number" id="xTicks" value="5" />
        label offset:
        <input type="number" class="axis number" id="xLabelOffset" value="30" />
        padding:
        <input type="number" class="axis number" id="xPadding" value="5" />
        label anchor:
        <select id="xLabelAnchor">
          <option value="right">right</option>
          <option value="left">left</option>
          <option value="center" selected>center</option>
        </select>
      </div>
      <div class="controlrow">
        label: <input type="text" id="xLabel" value="true shooting %" />
        <label for="xIncludeZero">Start range at 0</label>
          <input type="checkbox" id="xIncludeZero"></input>
      </div>
    </div>

    <div class="controlgroup">
      <h3>Y axis</h3>
      <div class="controlrow">
        <select id="yField">
          ${i}
        </select>
      </div>
      <div class="controlrow">
        ticks:
        <input type="number" class="axis number" id="yTicks" value="5" />
        label offset:
        <input type="number" class="axis number" id="yLabelOffset" value="40" />
        padding:
        <input type="number" class="axis number" id="yPadding" value="5" />
        label anchor:
        <select id="yLabelAnchor">
          <option value="top" selected>top</option>
          <option value="bottom">bottom</option>
          <option value="center">center</option>
        </select>
      </div>
      <div class="controlrow">
        label: <input type="text" id="yLabel" value="usage percentage" />
        <label for="yIncludeZero">Start range at 0</label>
          <input type="checkbox" id="yIncludeZero"></input>
      </div>
    </div>

    <div class="controlgroup">
      <h3>R axis</h3>
      <div class="controlrow">
        <select id="rField">
          ${s}
        </select>
      </div>
      <div class="controlrow">
        min size:
        <input type="number" class="axis number" id="rMin" value="4" /> max
        size:
        <input type="number" class="axis number" id="rMax" value="8" />
      </div>
      <div class="controlrow">label: <input type="text" id="rLabel" /></div>
    </div>
  </div>`;console.log(a),ks(".graph-options")?.insertAdjacentElement("afterbegin",a),["#xField","#yField","#width","#height","#title","#subtitle","#marginTop","#marginRight","#marginLeft","#marginBottom","#xIncludeZero","#xTicks","#xLabelOffset","#xLabelAnchor","#xLabel","#xPadding","#yIncludeZero","#yTicks","#yLabelOffset","#yLabelAnchor","#yLabel","#yPadding","#rField","#rMin","#rMax","#rLabel"].forEach(l=>{a.querySelector(l).addEventListener("change",gf(e)),a.querySelector(l).addEventListener("input",gf(e))}),a.querySelector("#download").addEventListener("click",Hj),a.querySelector("#swapAxes").addEventListener("click",()=>{let l=Cn("#xField");Bt("#xField",Cn("#yField")),Bt("#yField",l),gf(e)()}),a.querySelector("#clearOptions").addEventListener("click",()=>{let l=new URL(window.location.toString()),c=`${l.origin}${l.pathname}`;window.history.replaceState(null,"",c)})}function oY(e){let t={month:"long",day:"numeric",hour:"numeric",minute:"numeric",hour12:!0,timeZone:"UTC"};return e.toLocaleString("en-US",t)}window.addEventListener("DOMContentLoaded",async e=>{let n=await(await fetch(`${RN}/metadata.json`)).json();ks(".updated").innerText=`data updated on ${oY(new Date(n.updated))} UTC`;let r=await Xj();window.conn=r,iY(r),ks(".add-series")?.addEventListener("click",()=>pT(r)),ks(".remove-series")?.addEventListener("click",()=>tY(r)),pT(r)});
//# sourceMappingURL=data:application/json;base64,
